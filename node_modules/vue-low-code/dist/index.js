/*!
 * vue-low-code v1.0.35
 * (c) Klaus Schaefers
 * Released under the BSD-2-Clause License.
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var Logger = /*#__PURE__*/function () {
  function Logger() {
    _classCallCheck(this, Logger);

    this.logLevel = 0;
  }

  _createClass(Logger, [{
    key: "setLogLevel",
    value: function setLogLevel(l) {
      this.logLevel = l;
    }
  }, {
    key: "warn",
    value: function warn(msg, obj) {
      if (obj !== undefined) {
        console.warn(msg, obj);
      } else {
        console.warn(msg);
      }
    }
  }, {
    key: "error",
    value: function error(msg, obj) {
      if (obj !== undefined) {
        console.error(msg, obj);
      } else {
        console.error(msg);
      }
    }
  }, {
    key: "log",
    value: function log(level, msg, obj) {
      var obj2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";

      if (level < this.logLevel) {
        if (obj !== undefined) {
          console.debug(msg, obj, obj2);
        } else {
          console.debug(msg);
        }
      }
    }
  }]);

  return Logger;
}();

var Logger$1 = new Logger();

var Layout = Object.freeze({
  Row: 'row',
  // row means we render as rows top down. Thjis is different than felx rows!
  Grid: 'grid',
  Wrap: 'wrap',
  AutoHorizontal: 'auto-horizontal',
  AutoVertical: 'auto-vertical'
});

function isLayoutWrap(e) {
  return e.layout && e.layout.type === Layout.Wrap;
}
function isLayoutRow(e) {
  return e.layout && e.layout.type === Layout.Row;
}
function isLayoutGrid(e) {
  return e.layout && e.layout.type === Layout.Grid;
}
function isLayoutGrow(e) {
  return e.layout && e.layout.grow > 0;
}
function isLayoutAuto(e) {
  // why did check for this??? || e.layout.align !== undefined Take a look at auto fixed. This is somehow needed for the growth
  return e.layout !== undefined && (e.layout.type === Layout.AutoHorizontal || e.layout.type === Layout.AutoVertical); //|| e.layout.align !== undefined
}
function isLayoutAutoHorizontal(e) {
  return e.layout && e.layout.type === Layout.AutoHorizontal;
}
function isLayoutAutovertical(e) {
  return e.layout && e.layout.type === Layout.AutoVertical;
}
function getFileName(name) {
  return name.replace(/\s/g, '_');
}
function hasChildren(widget) {
  return widget.children && widget.children.length > 0;
}
function isScreen(e) {
  return e.type === 'Screen';
}
/**
 * Advanced widgets cannot have children, e.g. stacked rings
 */

function canHaveChildren(element) {
  if (element.props && element.props.customComponent) {
    return false;
  }

  if (isContainerElement(element) || isInputElement(element)) {
    return true;
  }

  return false;
}
function isInputElement(element) {
  var type = element.type;
  return type === 'TextBox' || type === 'TextArea' || type === 'Password' || type === 'DropDown';
}
function isContainerElement(element) {
  var type = element.type;
  return type === 'Box' || type === 'Button' || type === 'Image' || type === 'ChildrenToggle' || type === 'Repeater' || type === 'DynamicContainer' || type === 'ContainerDropDown';
}
/**
 * Check if the child can be nested in a parent
 * @param {} child The child to be nested
 * @param {*} parent The parent to receiveo
 */

function canBeChild(child, parent) {
  /**
   * Costum widgets cannot have children
   */
  if (parent.props && parent.props.customComponent) {
    return false;
  }
  /**
   * Box likes element can always have children
   */


  if (isContainerElement(parent)) {
    return true;
  }
  /**
   * Input elements can have labels embedded. This is needed to attach the label later
   */


  if (isInputElement(parent) && child.type === 'Label') {
    return true;
  }

  return false;
}
/**
 * Determine if the grid is collection
 * of stacked rows. This is true of arwew no overlaps
 */

function hasRowLayout(widget) {
  if (widget) {
    var nodes = widget.children;
    var length = nodes.length;

    for (var i = 0; i < length; i++) {
      for (var j = 0; j < length; j++) {
        var a = nodes[i];
        var b = nodes[j];

        if (a.id !== b.id) {
          if (isOverLappingY(a, b)) {
            return false;
          }
        }
      }
    }
  }

  return true;
}
function isWrappedContainer(e) {
  return e.style.wrap || e.style.layout === 'Wrap';
}
function isAutoLayoutSpaceBetween(e) {
  return e.layout && e.layout.justifyContent === 'space-between';
}
function isDesignSystemRoot(e) {
  return e.isDesignSystemRoot;
}
function isRepeater(e) {
  if (e) {
    return e.type === 'Repeater';
  }

  return false;
}
function hasComponentScreenParent(e) {
  return e.hasComponentScreenParent;
}
function isRepeaterAuto(e) {
  if (e.type === 'Repeater' && e.props.layout == 'grid' && e.props.auto === true) {
    return true;
  }

  return false;
}
function isFixedPosition(widget) {
  return widget.style.fixed && widget.type !== 'Screen';
}
function isRepeaterGrid(e) {
  if (e.type === 'Repeater' && e.props.layout === 'grid') {
    return true;
  }

  return false;
}
function isBlock(e) {
  return e && e.style && e.style.display === 'block';
}
function isOverLappingY(pos, box) {
  return !isTop(pos, box) && !isBottom(pos, box);
}
function isTop(from, to) {
  return from.y >= to.y + to.h;
}
function isBottom(from, to) {
  return from.y + from.h <= to.y;
}
function isFixedHorizontal(e) {
  return e.props && e.props.resize && e.props.resize.fixedHorizontal;
}
function isHugHorizontal(e) {
  return e.props && e.props.resize && e.props.resize.hugHorizontal === true;
}
function isFixedVertical(e) {
  if (e.type === 'Box' || e.type === 'Button' || e.type === 'Label' || e.type === 'Container' || e.type === 'Repeater' || e.children && e.children.length > 0) {
    return e.props && e.props.resize && e.props.resize.fixedVertical;
  }

  return true;
}
function isPinnedLeft(e) {
  return e.props && e.props.resize && e.props.resize.left;
}
function isPinnedRight(e) {
  return e.props && e.props.resize && e.props.resize.right;
}
function isPinnedUp(e) {
  return e.props && e.props.resize && e.props.resize.up;
}
function isPinnedDown(e) {
  return e.props && e.props.resize && e.props.resize.down;
}
function isFullWidth(e) {
  return e.props && e.props.resize && e.props.resize.fullWidth;
}
/*
export function isAtBottom(element, model, threshold = 10) {
    if (element && model.screenSize) {
        let dif = getDistanceFromScreenBottom(element, model)
        return dif < threshold
    }
    return false
}
*/

function getDistanceFromScreenBottom(element, model, parentScreen) {
  if (element && model.screenSize && parentScreen) {
    var h = Math.min(parentScreen.h, model.screenSize.h);
    var dif = h - (element.y + element.h);
    return dif;
  }

  return 0;
}
function isCentered(e) {
  if (e.parent) {
    var dif = e.parent.w - (2 * e.x + e.w); // We have a minimum threshold of 3px

    return Math.abs(dif) < Math.max(3, e.parent.w * 0.003);
  }

  return false;
}
function getClickLine(element) {
  if (element.lines) {
    return element.lines.find(function (l) {
      return l.event === 'click';
    });
  }

  return null;
}
function isOverlay(screen) {
  return screen.style && screen.style.overlay;
}
function isComponentSet(e) {
  return e.figmaType === 'COMPONENT_SET';
}
function isChildrenToggle(e) {
  return e.type === 'ChildrenToggle' || e.smartContainerType === 'ChildrenToggle';
}
function hasOverlayBackground(screen) {
  return screen.style && screen.style.hasBackground;
}
function hasMinMaxWdith(screen) {
  return screen.style !== undefined && (screen.style.minWidth > 0 || screen.style.maxWidth > 0);
}
function fixAutos(style, widget) {
  if (style.fontSize === 'Auto') {
    style.fontSize = widget.h;
  }

  return style;
}
/**
 * FIX for old models without z-value
 */

function fixMissingZValue(box) {
  if (box.z === null || box.z === undefined) {
    box.z = 0;
  }
}
/**
 * Get children
 */


function getOrderedWidgets(widgets) {
  var result = [];

  for (var id in widgets) {
    var widget = widgets[id];

    if (widget) {
      fixMissingZValue(widget);
      result.push(widget);
    }
  }

  sortWidgetList(result);
  return result;
}
/**
 * This method is super important for the correct rendering!
 *
 * We sort by:
 *
 *  1) style.fixed: fixed elements will be renderd last, therefore they come
 *  as the last elements in the list
 *
 * 	2) inherited : inherited values come first. They shall be rendered below the
 *  widget of the new screen
 *
 *  3) z : High z values come later
 *
 *  4) id: if the z value is the same, sort by id, which means the order the widgets have been
 *  added to the screen.
 */

function sortWidgetList(result) {
  /**
   * Inline function to determine if a widget is fixed.
   * we have to check if style exists, because the Toolbar.onToolWidgetLayer()
   * call the method without styles.
   */
  var isFixed = function isFixed(w) {
    if (w.style && w.style.fixed) {
      return true;
    }

    return false;
  };

  result.sort(function (a, b) {
    var aFix = isFixed(a);
    var bFix = isFixed(b);
    /**
     * 1) Sort by fixed. If both are fixed or not fixed,
     * continue sorting by inherited.
     */

    if (aFix == bFix) {
      /**
       * If both a inherited or not inherited,
       * continue sorting by z & id
       */
      if (a.inherited && b.inherited || !a.inherited && !b.inherited) {
        /**
         * 4) if the have the same z, sot by id
         */
        if (a.z == b.z && a.id && b.id) {
          return a.id.localeCompare(b.id);
        }
        /**
         * 3) Sort by z. Attention, Chrome
         * needs -1, 0, 1 or one. > does not work
         */


        return a.z - b.z;
      }

      if (a.inherited) {
        return -1;
      }

      return 1;
    }

    if (aFix) {
      return 1;
    }

    return -1;
  });
}
function isContainedInBox(obj, parent) {
  if (parent) {
    if (obj.x >= parent.x && obj.x + obj.w <= parent.w + parent.x && obj.y >= parent.y && obj.y + obj.h <= parent.y + parent.h) {
      return true;
    }
  }

  return false;
}
function getBoundingBoxByIds(ids, model) {
  var children = ids.map(function (id) {
    if (model.widgets && model.widgets[id]) {
      return model.widgets[id];
    } else {
      Logger$1.log(1, 'ExportUtil.getBoundingBoxByIds() > No child with id', id);
    }

    return null;
  }).filter(function (child) {
    return child !== null;
  });
  return getBoundingBoxByBoxes(children);
}
function getBoundingBoxByBoxes(boxes) {
  var result = {
    x: 100000000,
    y: 100000000,
    w: 0,
    h: 0,
    z: 100000000,
    props: {
      resize: {}
    },
    style: {}
  };

  for (var i = 0; i < boxes.length; i++) {
    var box = boxes[i];
    result.x = Math.min(result.x, box.x);
    result.y = Math.min(result.y, box.y);
    result.w = Math.max(result.w, box.x + box.w);
    result.h = Math.max(result.h, box.y + box.h);
    result.z = Math.max(result.z, box.z);

    if (isFixedHorizontal(box)) {
      result.props.resize.fixedHorizontal = true;
    }

    if (isFixedVertical(box)) {
      result.props.resize.fixedVertical = true;
    }
  }

  result.h -= result.y;
  result.w -= result.x;
  return result;
}
function createInheritedModel(model) {
  /**
   * Build lookup map for overwrites
   */
  var overwritenWidgets = {};

  for (var screenID in model.screens) {
    var screen = model.screens[screenID];
    overwritenWidgets[screenID] = {};

    for (var i = 0; i < screen.children.length; i++) {
      var widgetID = screen.children[i];
      var widget = model.widgets[widgetID];

      if (widget && widget.parentWidget) {
        overwritenWidgets[screenID][widget.parentWidget] = widgetID;
      }
    }
  }

  var inModel = clone(model);
  inModel.inherited = true;
  /**
   * add container widgets
   */

  createContaineredModel(inModel);
  /**
   * add widgets from parent (master) screens
   */

  for (var _screenID in inModel.screens) {
    /**
     * *ATTENTION* We read from the org model, otherwise we have
     * issues in the loop as we change the screen.
     */
    var _screen = model.screens[_screenID];

    if (_screen.parents && _screen.parents.length > 0) {
      /**
       * add widgets from parent screens
       */
      for (var _i = 0; _i < _screen.parents.length; _i++) {
        var parentID = _screen.parents[_i];

        if (parentID != _screenID) {
          if (model.screens[parentID]) {
            /**
             * *ATTENTION* We read from the org model, otherwise we have
             * issues in the loop as we change the screen!
             */
            var parentScreen = model.screens[parentID];
            var difX = parentScreen.x - _screen.x;
            var difY = parentScreen.y - _screen.y;
            var parentChildren = parentScreen.children;

            for (var j = 0; j < parentChildren.length; j++) {
              var parentWidgetID = parentChildren[j];
              /**
               * *ATTENTION* We read from the org model, otherwise we have
               * issues in the loop as we change the screen!
               */

              var parentWidget = model.widgets[parentWidgetID];

              if (parentWidget) {
                var overwritenWidgetID = overwritenWidgets[_screenID][parentWidgetID];

                if (!overwritenWidgetID) {
                  var copy = clone(parentWidget);
                  /**
                   * Super important the ID mapping!!
                   */

                  copy.id = parentWidget.id + "@" + _screenID;
                  copy.inherited = parentWidget.id;
                  copy.inheritedScreen = _screenID;
                  copy.inheritedOrder = _i + 1;
                  /**
                   * Now lets also put it at the right position!
                   */

                  copy.x -= difX;
                  copy.y -= difY;
                  /**
                   * We write the new widget to the inherited model!
                   *
                   */

                  inModel.widgets[copy.id] = copy;

                  inModel.screens[_screenID].children.push(copy.id);
                  /**
                   * Also add a to the inherited copies
                   * so we can to live updates in canvas
                   */


                  var parentCopy = inModel.widgets[parentWidget.id];

                  if (!parentCopy.copies) {
                    parentCopy.copies = [];
                  }

                  parentCopy.copies.push(copy.id);
                } else {
                  var overwritenWidget = inModel.widgets[overwritenWidgetID];

                  if (overwritenWidget) {
                    overwritenWidget.props = mixin(clone(parentWidget.props), overwritenWidget.props, true);
                    overwritenWidget.style = mixin(clone(parentWidget.style), overwritenWidget.style, true);

                    if (overwritenWidget.hover) {
                      overwritenWidget.hover = mixin(clone(parentWidget.hover), overwritenWidget.hover, true);
                    }

                    if (overwritenWidget.error) {
                      overwritenWidget.error = mixin(clone(parentWidget.error), overwritenWidget.error, true);
                    }
                    /**
                     * Also add a reference to the *INHERITED* copies
                     * so we can to live updates in canvas
                     */


                    var _parentCopy = inModel.widgets[parentWidget.id];

                    if (!_parentCopy.inheritedCopies) {
                      _parentCopy.inheritedCopies = [];
                    }

                    _parentCopy.inheritedCopies.push(overwritenWidget.id);
                    /**
                     * Also inherited positions
                     */


                    if (overwritenWidget.parentWidgetPos) {
                      overwritenWidget.x = parentWidget.x - difX;
                      overwritenWidget.y = parentWidget.y - difY;
                      overwritenWidget.w = parentWidget.w;
                      overwritenWidget.h = parentWidget.h;
                    }

                    overwritenWidget._inheried = true;
                  } else {
                    console.error("createInheritedModel() > No overwriten widget in model");
                  }
                }
              } else {
                console.warn("createInheritedModel() > no parent screen child with id > " + parentID + ">" + parentWidget);
              }
            }

            createInheritedGroups(inModel.screens[_screenID], parentScreen, model, inModel);
          } else {
            console.warn("createInheritedModel() > Deteced Self inheritance...", _screen);
          }
        } else {
          console.warn("createInheritedModel() > no parent screen with id > " + parentID);
        }
      }
    }
  }
  /**
   * Inline designtokens. must come last, otherwise master screen widgets are not correctly filled.
   */


  inModel = inlineModelDesignTokens(inModel);
  return inModel;
}

function createInheritedGroups(inScreen, parentScreen, model, inModel) {
  Logger$1.log(4, 'ExportUtil.createInheritedGroups()');
  var parentGroups = getAllGroupsForScreen(parentScreen, model);
  var widgetParentMapping = {};
  inScreen.children.forEach(function (widgetID) {
    var inheritedWidget = inModel.widgets[widgetID];

    if (inheritedWidget) {
      widgetParentMapping[inheritedWidget.inherited] = widgetID;
    } else {
      console.warn('createInheritedGroups() Could not find widget', widgetID);
    }
  });
  parentGroups.forEach(function (group) {
    var newGroup = {
      name: group.name + "_" + inScreen.name,
      id: group.id + "@" + inScreen.id,
      inherited: group.id,
      inheritedScreen: parentScreen.id,
      props: clone(group.props),
      style: clone(group.style),
      children: []
    };
    group.children.forEach(function (widgetID) {
      var inheritedID = widgetParentMapping[widgetID];

      if (inheritedID) {
        newGroup.children.push(inheritedID);
      } else {
        console.warn('createInheritedGroups() Could not find parent widhet', widgetID);
      }
    });

    if (inModel.groups) {
      inModel.groups[newGroup.id] = newGroup;
    }
  });
}

function createContaineredModel(inModel) {
  for (var screenID in inModel.screens) {
    var screen = inModel.screens[screenID];

    for (var i = 0; i < screen.children.length; i++) {
      var widgetID = screen.children[i];
      var widget = inModel.widgets[widgetID];

      if (widget) {
        if (widget.isContainer) {
          var children = getContainedChildWidgets(widget, inModel);
          widget.children = children.map(function (w) {
            return w.id;
          });
        }
      }
    }
  }
}

function inlineModelDesignTokens(model) {
  /**
   * This is quite costly. Can we do this smarter? Maybe we could do it in the
   * RenderFactory (beawre of hover etc). Then we would have to just add here
   * for all the reference design token the modified?
   */
  if (model.designtokens) {
    for (var widgetID in model.widgets) {
      var widget = model.widgets[widgetID];
      inlineBoxDesignToken(widget, model);
    }

    for (var screenId in model.screens) {
      var scrn = model.screens[screenId];
      inlineBoxDesignToken(scrn, model);
    }
    /**
     * FIXME Add tempaltes
     */

  }

  return model;
}

function inlineBoxDesignToken(box, model) {
  /**
   * If the box is templates, we copy all the designtokens from the template
   */
  if (box && box.template && model.templates && model.templates[box.template]) {
    var template = model.templates[box.template];

    if (template.designtokens) {
      /**
       * We could mix this in....
       */
      box.designtokens = template.designtokens;
    }
  }

  if (box && box.designtokens) {
    var designtokens = box.designtokens;

    for (var state in designtokens) {
      if (!box[state]) {
        box[state] = {};
      }

      var stateTokens = designtokens[state];

      for (var cssProp in stateTokens) {
        var designTokenId = stateTokens[cssProp];
        var designToken = model.designtokens[designTokenId];

        if (designToken) {
          if (designToken.isComplex) {
            box[state][cssProp] = designToken.value[cssProp];
          } else {
            box[state][cssProp] = designToken.value;
          }
        } else {
          console.warn('ModelUtil.inlineBoxDesignToken() > NO token with id or no value:' + designTokenId, designToken);
        }
      }
    }
  }

  return box;
}

function copyTemplateStyles(model) {
  if (model.templates) {
    for (var widgetID in model.widgets) {
      var widget = model.widgets[widgetID];

      if (widget.template) {
        var template = model.templates[widget.template];
        widget._template = template;
      }
    }
  }

  return model;
}

function getContainedChildWidgets(container, model) {
  var result = [];
  /*
   * Loop over sorted list
   */

  var sortedWidgets = getOrderedWidgets(model.widgets);
  var found = false;

  for (var i = 0; i < sortedWidgets.length; i++) {
    var widget = sortedWidgets[i];

    if (container.id != widget.id) {
      if (found && isContainedInBox(widget, container)) {
        widget.container = container.id;
        result.push(widget);
      }
    } else {
      found = true;
    }
  }

  return result;
}
function mixin(a, b, keepTrack) {
  if (a && b) {
    b = clone(b);

    if (keepTrack) {
      b._mixed = {};
    }

    for (var k in a) {
      if (b[k] === undefined || b[k] === null) {
        b[k] = a[k];

        if (keepTrack) {
          b._mixed[k] = true;
        }
      }
    }
  }

  return b;
}
function clone(obj) {
  if (!obj) {
    return null;
  }

  var _s = JSON.stringify(obj);

  return JSON.parse(_s);
}
function getLines(widget, model) {
  var result = [];

  if (widget.inherited && model.widgets[widget.inherited]) {
    widget = model.widgets[widget.inherited];
  }

  var widgetID = widget.id;
  var lines = getFromLines(widget, model);

  if (lines && lines.length > 0) {
    return lines;
  }

  var group = getParentGroup(widgetID, model);

  if (group) {
    var groupLine = getFromLines(group, model);

    if (groupLine && groupLine.length > 0) {
      return groupLine;
    }
  }
  /**
   * Since 2.1.3 we use might have sub groups.
   */


  var topGroup = getTopParentGroup(widgetID, model);

  if (topGroup) {
    var _groupLine = getFromLines(topGroup, model);

    if (_groupLine && _groupLine.length > 0) {
      return _groupLine;
    }
  }

  return result;
}
function getTopParentGroup(id, model) {
  var group = getParentGroup(id, model);

  if (group) {
    while (group) {
      var parent = getParentGroup(group.id, model);

      if (parent) {
        group = parent;
      } else {
        /**
         * In contrast the the Layout copz of this, we do not add
         * all children... not sure it this is needed
         */
        return group;
      }
    }
  }

  return null;
}
function getParentGroup(widgetID, model) {
  if (model.groups) {
    for (var id in model.groups) {
      var group = model.groups[id];
      var i = group.children.indexOf(widgetID);

      if (i > -1) {
        return group;
      }
      /**
       * Since 2.13 we have subgroups and check this too
       */


      if (group.groups) {
        var _i2 = group.groups.indexOf(widgetID);

        if (_i2 > -1) {
          return group;
        }
      }
    }
  }

  return null;
}
function getGroup(widgetID, model) {
  if (model.groups) {
    for (var id in model.groups) {
      var group = model.groups[id];
      var i = group.children.indexOf(widgetID);

      if (i > -1) {
        return group;
      }
    }
  }
}
function getAllGroupChildren(group, model) {
  if (!group.children) {
    return [];
  }

  var result = group.children.slice(0);
  /**
   * Check all sub groups
   */

  if (group.groups) {
    group.groups.forEach(function (subId) {
      var sub = model.groups[subId];

      if (sub) {
        var children = getAllGroupChildren(sub, model);
        result = result.concat(children);
      } else {
        console.warn('getAllGroupChildren() No sub group', subId);
      }
    });
  }

  return result;
}
function getAllGroupsForScreen(screen, model) {
  var result = {};
  screen.children.forEach(function (widgetID) {
    var group = getGroup(widgetID, model);

    if (group) {
      result[group.id] = group;
    }
  });
  return Object.values(result);
}

function getFromLines(box, model) {
  var result = [];

  for (var id in model.lines) {
    var line = model.lines[id];

    if (line.from == box.id) {
      result.push(line);
    }
  }

  return result;
}

function getBoxById(id, model) {
  if (model.screens[id]) {
    return model.screens[id];
  }

  if (model.widgets[id]) {
    return model.widgets[id];
  }
}

function getElementsAsRows(nodes) {
  var rows = [];
  var row;
  var lastRowId = null;
  nodes.forEach(function (n) {
    var rowId = n.row ? n.row : '-1';

    if (rowId != lastRowId) {
      row = [];
      rows.push(row);
    }

    row.push(n);
    lastRowId = rowId;
  });
  return rows;
}
function setCSSClassNames(parent, screenName) {
  var name = parent.name;
  name = name.replace(/\./g, "_");

  if (name.match(/^\d/)) {
    name = "q" + name;
  }

  parent.cssScreen = "".concat(screenName.replace(/\s+/g, "_"));
  parent.cssClass = "".concat(name.replace(/\s+/g, "_"));
  var cssSelector = ".".concat(name.replace(/\s+/g, "_"));

  if (parent.parent) {
    cssSelector = ".".concat(screenName.replace(/\s+/g, "_"), " ").concat(cssSelector);
  } else {
    cssSelector = ".qux-screen".concat(cssSelector);
  }

  parent.cssSelector = cssSelector;

  if (parent && parent.children) {
    parent.children.forEach(function (c) {
      setCSSClassNames(c, screenName);
    });
  }

  if (parent && parent.fixedChildren) {
    parent.fixedChildren.forEach(function (c) {
      setCSSClassNames(c, screenName);
    });
  }
}
function stringToType(value) {
  if (value === 'true') {
    value = true;
  }

  if (value === 'false') {
    value = false;
  }

  return value;
}

var Config = /*#__PURE__*/function () {
  function Config() {
    _classCallCheck(this, Config);
  }

  _createClass(Config, [{
    key: "getFigmaCSS",
    value: function getFigmaCSS() {
      return {
        isFigma: true,
        grid: true,
        justifyContentInWrapper: false,
        pinnedLeft: false,
        pinnedRight: false,
        fixedHorizontal: false,
        attachLabels: false,
        huggedCanResize: true,
        hoverEmbeddedLabel: true
      };
    }
  }, {
    key: "getDefault",
    value: function getDefault() {
      return {
        debug: {
          logLevel: 0
        },
        designletPrefix: '',
        loadFonts: true,
        figma: {
          varientComponentHoverKey: 'Mouse=Hover',
          varientComponentDefaultKey: 'Mouse=Default',
          downloadVectors: true
        },
        css: {
          grid: true,
          justifyContentInWrapper: false,
          attachLabels: true,
          huggedCanResize: true,
          hoverEmbeddedLabel: false
        },
        router: {
          key: "screenName",
          prefix: ""
        },
        databinding: {
          default: ""
        },
        imageFolder: "/img",
        components: {},
        breakpoints: {
          mobile: {
            min: 0,
            max: 400
          },
          tablet: {
            min: 401,
            max: 1200
          },
          desktop: {
            min: 1201,
            max: 1000000
          }
        },
        meta: {},
        addDefaultDatabinding: true
      };
    }
  }, {
    key: "merge",
    value: function merge(config, overwrites) {
      if (overwrites.addDefaultDatabinding !== undefined) {
        config.addDefaultDatabinding = overwrites.addDefaultDatabinding;
      }

      if (overwrites.css) {
        config.css = mixin(config.css, overwrites.css);
      }

      if (overwrites.router) {
        config.router = mixin(config.router, overwrites.router);
      }

      if (overwrites.databinding) {
        config.databinding = mixin(config.databinding, overwrites.databinding);
      }

      if (overwrites.components) {
        config.components = overwrites.components;
      }

      if (overwrites.imageFolder) {
        config.imageFolder = overwrites.imageFolder;
      }

      if (overwrites.debug) {
        config.debug = mixin(config.debug, overwrites.debug);
      }

      if (overwrites.designletPrefix) {
        config.designletPrefix = overwrites.designletPrefix;
      }

      if (overwrites.loadFonts !== undefined) {
        config.loadFonts = overwrites.loadFonts;
      }

      if (overwrites.responsive) {
        config.responsive = overwrites.responsive;
      }

      if (overwrites.figma) {
        config.figma = mixin(config.figma, overwrites.figma);
      }

      if (overwrites.meta) {
        config.meta = mixin(config.meta, overwrites.meta);
      }

      return config;
    }
  }]);

  return Config;
}();

var Config$1 = new Config();

function addGridToElements(parent) {
  /**
   * FIXME: Just add grdid when needed?
   */
  //if (parent.layout === Layout.Grid) {
  var grid = computeGrid(parent);

  if (grid) {
    parent.grid = grid;

    if (parent.children && parent.children.length > 0) {
      parent.children.forEach(function (e) {
        e.gridColumnStart = 0;
        e.gridColumnEnd = grid.columns.length;
        e.gridRowStart = 0;
        e.gridRowEnd = grid.rows.length;
        grid.columns.forEach(function (c, i) {
          /**
           * FIXME: if we want to use grdiCleanUp we
           * have to use start and end
           */
          if (c.v === e.x) {
            e.gridColumnStart = i;
          } else if (c.v === e.x + e.w) {
            e.gridColumnEnd = i;
          }
        });
        grid.rows.forEach(function (r, i) {
          if (r.v === e.y) {
            e.gridRowStart = i;
          }

          if (r.v === e.y + e.h) {
            e.gridRowEnd = i;
          }
        });
      });
    }
  } //}


  if (parent.children && parent.children.length > 0) {
    parent.children.forEach(function (c) {
      addGridToElements(c);
    });
  }

  return parent;
}
function computeGrid(parent) {
  var fixSmallColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (parent.children && parent.children.length > 0) {
    var rows = {};
    var columns = {};
    /**
     * Collect all the relevant lines. First the parent
     * then all the children
     */

    addGridColumns(columns, 0, parent, true);
    addGridColumns(columns, parent.w, parent, false);
    addGridRow(rows, 0, parent, true);
    addGridRow(rows, parent.h, parent, false);
    parent.children.forEach(function (c) {
      addGridColumns(columns, c.x, c, true);
      addGridColumns(columns, c.x + c.w, c, false);
      addGridRow(rows, c.y, c, true);
      addGridRow(rows, c.y + c.h, c, false);
    });
    /**
     * Set the width and convert objects to arrays
     */

    columns = setGridColumnWidth(columns, parent);
    rows = setGridRowHeight(rows, parent);

    if (fixSmallColumns) {
      /**
       * To make htis work, we need to fix the addGridToElements() to not match values,
       * but go over the start and end thingies.
       */
      columns = computeReducedColumns(columns);
    }
    /**
     * determine fixed columns and rows
     */


    setFixedGirdRowsAndColumns(parent, columns, rows);
    return {
      rows: rows,
      columns: columns
    };
  }

  return null;
}
function computeReducedColumns(columns) {
  var temp = [];
  var last = null;

  for (var c = 0; c < columns.length; c++) {
    var col = columns[c];

    if (last && col.v - last.v < 2) {
      /**
       * This does not work
       */
      var start = last.start.concat(col.start);
      var end = last.end.concat(col.end);
      last.start = start;
      last.end = end;
    } else {
      temp.push(col);
      last = col;
    }
  }

  return temp;
}
function setFixedGirdRowsAndColumns(parent, columns, rows) {
  /**
   * Set fixed. For each child check if the
   * 1) We have fixed Vertical or Horizontal
   * 2) If pinned. e.g. if pinned right, all
   *    columns < e.v must be fixed
   */
  parent.children.forEach(function (e) {
    if (isFixedHorizontal(e)) {
      columns.forEach(function (column) {
        if (column.v >= e.x && column.v < e.x + e.w) {
          column.fixed = true;
        }
      });
    }

    if (isPinnedLeft(e)) {
      // FIXME: Just fix the closest
      var before = columns.filter(function (column) {
        return column.v < e.x;
      });

      if (before.length > 0) {
        before[before.length - 1].fixed = true;
      } //columns.forEach(column => {
      //    if (column.v < e.x) {
      //        column.fixed = true
      //    }
      //})

    }

    if (isPinnedRight(e)) {
      var after = columns.filter(function (column) {
        return column.v >= e.x + e.w;
      });

      if (after.length > 0) {
        after[0].fixed = true;
      } //columns.forEach(column => {
      //    if (column.v >= e.x + e.w) {
      //        column.fixed = true
      //    }
      //})

    }

    if (isFixedVertical(e)) {
      rows.forEach(function (row) {
        if (row.v >= e.y && row.v < e.y + e.h) {
          row.fixed = true;
        }
      });
    }

    if (isPinnedUp(e)) {
      rows.forEach(function (row) {
        if (row.v < e.y) {
          row.fixed = true;
        }
      });
    }

    if (isPinnedDown(e)) {
      rows.forEach(function (row) {
        if (row.v >= e.y + e.h) {
          row.fixed = true;
        }
      });
    }
  });
}
function setGridColumnWidth(columns, parent) {
  columns = Object.values(columns).sort(function (a, b) {
    return a.v - b.v;
  });
  columns.forEach(function (column, i) {
    if (columns[i + 1]) {
      column.l = columns[i + 1].v - column.v;
    } else {
      column.l = parent.w - column.v;
    }
  });
  return columns.filter(function (c) {
    return c.l > 0;
  });
}
function setGridRowHeight(rows, parent) {
  rows = Object.values(rows).sort(function (a, b) {
    return a.v - b.v;
  });
  rows.forEach(function (row, i) {
    if (rows[i + 1]) {
      row.l = rows[i + 1].v - row.v;
    } else {
      row.l = parent.h - row.v;
    }
  });
  return rows.filter(function (r) {
    return r.l > 0;
  });
}
function addGridColumns(columns, x, e, start) {
  if (!columns[x]) {
    columns[x] = {
      v: x,
      start: [],
      end: [],
      fixed: false,
      hasMinMax: false
    };
  }

  if (start) {
    columns[x].start.push(e);
  } else {
    columns[x].end.push(e);
  }
  /**
   * If we have a min max, we will
   * later try to use max-content. This will
   * only work for the longest element.
   * Check CSSPosition.getGridColumnTracks()
   */


  if (hasMinMaxWdith(e)) {
    columns[x].hasMinMax = true;
  }
}
function addGridRow(rows, y, e, start) {
  if (!rows[y]) {
    rows[y] = {
      v: y,
      start: [],
      end: [],
      fixed: false
    };
  }

  if (start) {
    rows[y].start.push(e);
  } else {
    rows[y].end.push(e);
  }
}

var cloneID = 0;
/**
 * Inlines some quant-ux stuff
 */

var supportedWidgetTypes = ["Button", "Box", "Label", "Container", "Icon", "Image", "CheckBox", "RadioBox", "RadioBox2", "HotSpot", "TextBox", "Password", "TextArea", "Repeater", "RadioGroup", "CheckBoxGroup", "ToggleButton", "Switch", "DropDown", "MobileDropDown", "Stepper", "HSlider", "Date", "DateDropDown", "SegmentButton", "Rating", "IconToggle", "LabeledIconToggle", "TypeAheadTextBox", "Table", "Paging", "BarChart", "PieChart", "MultiRingChart", "RingChart", "Vector", "Timeline", "Upload", "ChildrenToggle", "Camera", "UploadPreview", "Spinner", "DynamicContainer", "RichText", "Link"];
var textProperties = ["color", "textDecoration", "textAlign", "fontFamily", "fontSize", "fontStyle", "fontWeight", "letterSpacing", "lineHeight", "lineHeightPX"];
function transform(model, config) {
  Logger$1.log(1, "Falt2Tree.transform () > enter", config);
  var result = {
    id: model.id,
    name: model.name,
    templates: model.templates ? Object.values(model.templates) : [],
    warnings: [],
    screens: []
  };
  /**
   * IN QUX we want to attach label nodes. In Figma this causes issues. with attachLabels we control for which elements we should use this
   */

  var nodesWithLabelAttachment = config.css && config.css.attachLabels === true ? ["TextBox", "Password", "TextArea", "Box", "Button", "DropDown"] : ["TextBox", "Password", "TextArea", "DropDown"];
  var hasRows = config.css && config.css.grid !== true;

  var _loop = function _loop(screenID) {
    var screen = model.screens[screenID];
    /**
     * First we build a hierachical parent child relation.
     */

    screen = transformScreenToTree(screen, model);
    /**
     * Add rows and grid if needed
     */

    screen = layoutTree(screen);
    /**
     * Now we put the fixed stuff in the fixedChildren list
     */

    screen = setFixedChildren(screen, model);
    /**
     * Now we need to layout the shit again, because we have removed the fixed elements.
     * FIXME: Make the layoutTree method faster that it also works with the fixedChildren
     */

    if (screen.fixedChildren && screen.fixedChildren.length > 0) {
      Logger$1.log(1, "Falt2Tree.transform() > fixed elements require double layout");
      screen = layoutTree(screen);
    }
    /**
     * Since 0.5 we will set now the layouts.
     */

    /**
     * set screen pos to 0,0
     */


    screen.children.forEach(function (c) {
      c.parent = screen;
    });
    screen.x = 0;
    screen.y = 0;
    attachSingleLabelsInScreen(model, screen, nodesWithLabelAttachment);
    setWidgetTypes(screen);
    setCSSClassNames$1(screen, screen.name);
    result.screens.push(screen);
  };

  for (var screenID in model.screens) {
    _loop(screenID);
  }

  return result;
}

function layoutTree(screen) {
  Logger$1.log('Flat2Tree.layoutTree() > ');
  /**
   * We add lines, because for wrapped groups we need the rows!
   * Attention: In the UI we can not configure this anymore!
   */
  // screen = Rows.addRows(screen)

  /**
   * First we determine the type of layout
   */

  addLayoutType(screen);
  /**
   * Afterwards we re order the elements
   */

  fixParents(screen);
  screen = addGrid(screen);
  return screen;
}

function addLayoutType(element) {
  /**
   * We set here for each element how it should be rendered, if and only if,
   * the layout has not been set by hand, e.g. in Figma.
   *
   * If we set the layout, the options are:
   * 1) Wrap -> defined in UI. Has priority
   * 2) Rows -> if the X over laps
   * 3) Grid -> Default
   */
  var grow = 0;

  if (element.layout && element.layout.grow !== undefined) {
    grow = element.layout.grow;
  }

  if (!isLayoutAuto(element)) {
    /**
     * For Figma Autos, the wrap will be ignored!
     */
    if (isWrappedContainer(element)) {
      element.layout = {
        type: Layout.Wrap,
        grow: grow
      };
      setOrderInWrapper(element, element.children);
    } else if (hasRowLayout(element)) {
      element.layout = {
        type: Layout.Row,
        grow: grow
      };
      setOrderInRow(element, element.children);
    } else {
      element.layout = {
        type: Layout.Grid,
        grow: grow
      };
    }
  }

  if (element.children) {
    element.children.forEach(function (child) {
      return addLayoutType(child);
    });
  }

  return element;
}

function addGrid(screen) {
  addGridToElements(screen);
  return screen;
}
/**
 * In a column, elements are rendered top to down
 */


function setOrderInRow(parent, nodes) {
  Logger$1.log(5, "Falt2Tree.setOrderInRow() > Column", parent.name);
  nodes.sort(function (a, b) {
    return a.y - b.y;
  });
  var last = 0;
  nodes.forEach(function (n) {
    var top = n.y - last;
    last = n.y + n.h; //n.row = i

    n.top = top;
  });
}
/**
* Sort by bz row and column. After wards set just paddings and mardings
*/


function setOrderInWrapper(parent, nodes) {
  Logger$1.log(3, "Falt2Tree.setOrderInWrapper() > Wrapper Container", parent.name);
  nodes.sort(function (a, b) {
    if (isOverLappingY(a, b)) {
      return a.x - b.x;
    }

    return a.y - b.y;
  });

  if (parent.isGroup) {
    /*
    	* If the parent is group, the offet will be 0! So we calculate instead
    	* the didtance between the first and second row and first and second column.
    	* This is offcourse just guess.
    	*/
    var offsetBottom = 10;
    var offSetRight = 10;
    /**
     * FIXME: This is broken???
     */

    var rows = getElementsAsRows(nodes);

    if (rows[0] && rows[0].length > 1 && rows[1]) {
      var firstRowChild1 = rows[0][0];
      var firstRowChild2 = rows[0][1];
      var secondRowChild2 = rows[1][0];
      offSetRight = firstRowChild2.x - (firstRowChild1.x + firstRowChild1.w);
      offsetBottom = secondRowChild2.y - (firstRowChild1.y + firstRowChild1.h);
    } else {
      Logger$1.log(-1, "Falt2Tree.setOrderAndRelativePositons() > cannot guess offsets for Wrapper Container", parent.name);
    }

    parent.style.paddingTop = 0;
    parent.style.paddingBottom = 0;
    parent.style.paddingLeft = 0;
    parent.style.paddingRight = 0;
    nodes.forEach(function (n) {
      n.wrapOffSetBottom = offsetBottom;
      n.wrapOffSetRight = offSetRight;
      n.wrapOffSetY = 0;
      n.wrapOffSetX = 0;
    });
  } else {
    /**
     * We take as the position, the offset of the first element
     * Then we add half as padding and the rest a masgin for
     * the children
     */
    var firstNode = nodes[0];
    var offSetX = Math.round(firstNode.x / 2);
    var offSetY = Math.round(firstNode.y / 2);
    parent.style.paddingTop = offSetY;
    parent.style.paddingBottom = offSetY;
    parent.style.paddingLeft = offSetX;
    parent.style.paddingRight = offSetX;
    nodes.forEach(function (n) {
      n.wrapOffSetY = offSetY;
      n.wrapOffSetX = offSetX;
    });
  }
}

function setWidgetTypes(parent) {
  parent.qtype = getWidgetType(parent);

  if (parent.children) {
    parent.children.forEach(function (c) {
      setWidgetTypes(c);
    });
  }

  if (parent.fixedChildren) {
    parent.fixedChildren.forEach(function (c) {
      setWidgetTypes(c);
    });
  }

  if (parent.templates) {
    parent.templates.forEach(function (c) {
      setWidgetTypes(c);
    });
  }
}

function setCSSClassNames$1(parent, screenName) {
  return setCSSClassNames(parent, screenName);
}

function getWidgetType(element) {
  /**
   * We check here different component overrides
   */
  if (element.props.customComponent) {
    Logger$1.log(-1, "Falt2Tree.getWidgetType() > Use customComponent", element);
    return element.props.customComponent;
  }

  if (element.type === "ComponentSet") {
    return "qComponentSet";
  }

  if (element.type === "DynamicContainer") {
    return "qDynamicContainer";
  }

  if (element.children && element.children.length > 0) {
    if (element.type === "Repeater") {
      return "qRepeater";
    }

    if (element.type === "ChildrenToggle") {
      return "qChildrenToggle";
    }

    return "qContainer";
  } else {
    if (supportedWidgetTypes.indexOf(element.type) >= 0) {
      return "q".concat(element.type);
    }
    /**
     * There is a raw ase were fixed children might cause an issue
     */


    Logger$1.warn("Falt2Tree.getWidgetType() > Not supported widget type: " + element.type);
    return "qBox";
  }
}

function fixParents(parent) {
  if (parent.children) {
    parent.children.forEach(function (c) {
      c.parent = parent;
      fixParents(c);
    });
  }
}

function attachSingleLabelsInScreen(model, screen) {
  var allowedTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  Logger$1.log(3, "Falt2Tree.attachSingleLabelsInScreen()", allowedTypes);
  screen.children.forEach(function (child) {
    attachSingleLabelsInNodes(model, child, allowedTypes);
  });
  return screen;
}

function attachSingleLabelsInNodes(model, node, allowedTypes) {
  /**
   * If we have a box that has NO label props and contains
   * only one child of type label, we merge this in.
   */
  var type = node.type; //Logger.log(-7, "Falt2Tree.attachSingleLabelsInNodes()", node.name , node.children.length, allowedTypes.indexOf(type) >= 0, )

  if (!node.props.label && node.children.length === 1 && (allowedTypes === null || allowedTypes.indexOf(type) >= 0)) {
    var child = node.children[0];
    /**
     * TODO: We should check here if teh re is a link. What to do with the link?
     * Copy to aprent if it is different?
     */

    var lines = getLines(child, model);

    if (child.type === "Label" && lines.length === 0) {
      Logger$1.log(7, "Falt2Tree.attachSingleLabelsInNodes()", child.name, node.name);
      node.props.label = child.props.label;
      node.children = [];
      /**
       * For none input types set to Box
       */

      if (!isInputElement(node)) {
        node.type = "Box";
        node.qtype = "qBox";
      }

      textProperties.forEach(function (key) {
        if (child.style[key]) {
          node.style[key] = child.style[key];
        }
      });
      node.style.paddingTop = child.y;
      node.style.paddingBottom = node.h - child.h - child.y;
      node.style.paddingLeft = child.x;
      node.style.paddingRight = node.w - child.w - child.x;
      /**
       * If the parent is an auto layout, remove it.
       */

      if (isLayoutAuto(node)) {
        node.layout = {
          type: Layout.Row
        };
      }

      node.style = fixAutos(node.style, child);
      /**
       * Merge in the databinding of the child, if there is no data binding of the parent
       */

      if (child.props.databinding && !node.props.databinding) {
        Logger$1.log(-1, "Falt2Tree.attachSingleLabelsInNodes() copy data binding", child.name, node.name);
        node.props.databinding = child.props.databinding;
      } // remove grid??

    } else {
      /**
       * TODO: We have two conditions that can fail and require us to go deeper.
       * Therefore we need to call this recursive code again. We could have a better check,
       * to make teh code more beautifull
       */
      node.children.forEach(function (child) {
        attachSingleLabelsInNodes(model, child, allowedTypes);
      });
    }
  } else {
    node.children.forEach(function (child) {
      attachSingleLabelsInNodes(model, child, allowedTypes);
    });
  }
}
/**
 * Transforms and screen into a hiearchical presentation. return the root node.
 */


function transformScreenToTree(screen, model) {
  var result = clone$1(screen);
  delete result.children;
  delete result.has;
  result.children = [];
  result.fixedChildren = [];
  /**
   * Get widget in render order. This is important to derive the
   * parent child relations.
   */

  var widgets = getOrderedWidgets(getWidgets(screen, model));
  /**
   *  now build child parent relations
   */

  var parentWidgets = [];
  var elementsById = {};
  widgets.forEach(function (widget) {
    // console.debug('buildTree', widget.name, '    in ', parentWidgets.map(p => p.name).join(', '))
    var element = clone$1(widget);
    element._x = widget.x;
    element._y = widget.y;
    element.children = [];
    var group = getGroup(widget.id, model);
    element.group = group;
    /**
     * Check if the widget has a parent (= is contained) widget.
     * If so, calculate the relative position to the parent,
     * otherwise but the element under the screen.
     */

    var parentWidget = getParentWidget(parentWidgets, element, model);

    if (parentWidget && canBeChild(element, parentWidget)) {
      //  was Util.canHaveChildren(parentWidget)
      element.x = widget.x - parentWidget.x;
      element.y = widget.y - parentWidget.y;
      element.parent = parentWidget;
      elementsById[parentWidget.id].children.push(element);
    } else {
      element.x = widget.x - screen.x;
      element.y = widget.y - screen.y;
      element.parent = null;
      result.children.push(element);
      /**
       * If we have a widget directly under the screen, and we have a negative margin, crop
       * This might happen with figma
       */

      if (element.y < 0) {
        Logger$1.log(2, "Falt2Tree.transformScreenToTree() > fix negative margin", element.name);
        element.h += element.y;
        element.y = 0;
      }
    }
    /**
     * Save the widget, so we can check in the next
     * iteation if this is a parent or not! Only use
     * widgets that can have children
     */


    if (canHaveChildren(widget)) {
      parentWidgets.unshift(widget);
    }

    elementsById[element.id] = element;
  });
  /**
   * Padding messes with the grid :(
   */

  resetPadding(result);
  return result;
}

function setFixedChildren(screen, model) {
  if (screen.children) {
    setFixedChildrenInElement(screen, screen, model);
  }

  return screen;
}

function setFixedChildrenInElement(element, screen, model) {
  var fixBottomNodes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  /**
   * Attention. Fixed elements must be set in the model as fixed. Otherwise
   * the oder in the tree method is not correct and the will be wrongly nested!
   */
  if (element.children) {
    var children = [];
    element.children.forEach(function (child) {
      if (child.style.fixed === true) {
        child.x = child._x - screen.x;
        child.y = child._y - screen.y; // the first call if with the element being the screen

        if (element.id !== screen.id) {
          element.parent = screen;
        }

        setAllChildrenAsNotFixed(child);

        if (fixBottomNodes) {
          setFixedBottom(child, model, screen);
        }

        screen.fixedChildren.push(child);
      } else {
        setFixedChildrenInElement(child, screen, model);
        children.push(child);
      }
    });
    element.children = children;
  }
}

function setFixedBottom(element, model, screen) {
  /**
   * IF we have an pinned bottom
   */
  if (isPinnedDown(element)) {
    element.bottom = getDistanceFromScreenBottom(element, model, screen);
  }
}

function setAllChildrenAsNotFixed(element) {
  if (element.children) {
    element.children.forEach(function (child) {
      child.style.fixed = false;
      setAllChildrenAsNotFixed(child);
    });
  }
}

function resetPadding(element) {
  if (element.children) {
    element.children.forEach(function (child) {
      /**
       * If we have more than one child, we have to set the padding to 0.
       * Also, we have to create an label element
       */
      var labelToAdd = null;

      if (child.children && child.children.length > 0) {
        var style = child.style;

        if (child.props.label) {
          var _style = child.style;
          var paddingLeft = _style.paddingLeft ? _style.paddingLeft : 0;
          var paddingRight = _style.paddingRight ? _style.paddingRight : 0;
          var paddingBottom = _style.paddingBottom ? _style.paddingBottom : 0;
          var paddingTop = _style.paddingTop ? _style.paddingTop : 0; // Logger.warn('Falt2Tree.resetPadding() > inline label!', child)

          labelToAdd = {
            id: child.id + "-label",
            name: child.name + "-label",
            type: "Label",
            x: _style.paddingRight,
            y: _style.paddingTop,
            w: child.w - paddingLeft - paddingRight,
            h: child.h - paddingBottom - paddingTop,
            props: clone(child.props),
            style: {
              color: _style.color,
              textAlign: _style.textAlign,
              fontFamily: _style.fontFamily,
              fontSize: _style.fontSize,
              fontStyle: _style.fontStyle,
              fontWeight: _style.fontWeight,
              letterSpacing: _style.letterSpacing,
              lineHeight: _style.lineHeight,
              verticalAlign: _style.verticalAlign
            },
            children: []
          };
        }

        style.paddingBottom = 0;
        style.paddingLeft = 0;
        style.paddingRight = 0;
        style.paddingTop = 0;
        resetPadding(child);

        if (labelToAdd) {
          /**
           * Or add to fron?
           */
          child.children.push(labelToAdd);
        }
      }
    });
  }
}
/**
 * This method will try to find the parent widget. By default,
 * the parent child relation ship is defined as the visual hierachy. This must be done, to
 * get nice nested HTML also from drawing style.
 *
 * Figma, however, might have overflows. Thus we check, if there is no visual parent,
 * also the parentID.
 */


function getParentWidget(potentialParents, element, model) {
  /**
   * First see if the widget is nested in a widget that was rendered before
   */
  for (var p = 0; p < potentialParents.length; p++) {
    var parent = potentialParents[p];

    if (isContainedInBox(element, parent)) {
      return parent;
    }
  }
  /**
   * If not, check of the parent was defined otherwise, e.g. figma.
   */


  if (element.parentId) {
    var _parent = model.widgets[element.parentId];

    if (_parent) {
      return _parent;
    }
  }
}

function getWidgets(screen, model) {
  var widgets = [];

  for (var i = 0; i < screen.children.length; i++) {
    var id = screen.children[i];
    var widget = model.widgets[id];
    widgets.push(widget);
  }

  return widgets;
}

function clone$1(obj) {
  var clone = JSON.parse(JSON.stringify(obj));
  clone._id = cloneID++;
  return clone;
}

function transform$1(app, config) {
  Logger$1.log(3, "Quant2Flat.transform () > enter", config);
  var model = clone(app);
  var isForcePinnedLeft = config.css && config.css.pinnedLeft === true;
  var isForcePinnedRight = config.css && config.css.pinnedRight === true;
  var isForceFixedHorizontal = config.css && config.css.fixedHorizontal === true;
  /**
   * Before we start, we create an inherited model!
   */

  model = createInheritedModel(model);
  /**
   * Copy templates as _template into widgets so we can use the information later
   * in the CSSPostion.getCorrectedHeight!
   */

  model = copyTemplateStyles(model);
  /**
   * Set forced left and right pinned
   */

  model = addForcedResize(model, isForcePinnedLeft, isForcePinnedRight, isForceFixedHorizontal);
  /**
   * Set default data binding
   */

  if (config.addDefaultDatabinding) {
    model = addDefaultDataBinding(model);
  }
  /**
   * Set certain widgets horizontal fixed
   */


  model = fixHorizontal(model);
  /**
   * Make sure names are unique
   */

  model = fixNames(model);
  /**
   * Add links
   */

  model = addActions(model);
  /**
   * Make sure templates are inlined
   */

  setTemplateStyles(model);
  /**
   * Add here virtual elements for the groups
   */

  for (var screenID in model.screens) {
    var screen = model.screens[screenID];
    model = addGroupWrapper(screen, model);
  }

  return model;
}
/**
 * Set tenplates in widgets
 */

function setTemplateStyles(model) {
  if (model.templates) {
    Object.values(model.templates).forEach(function (t) {
      t.cssSelector = ".qux-template-".concat(t.name);
      t.cssClass = "qux-template-".concat(t.name);
      /**
       * TODO: Make faster with lookup map...
       */

      Object.values(model.widgets).forEach(function (widget) {
        if (widget.template === t.id) {
          if (!widget.sharedCssClasses) {
            widget.sharedCssClasses = [];
          }

          widget.sharedCssClasses.push(t.cssClass);
          /**
           * The vertical align is copied directly... This should be some how handled
           * by the css factory...
           */

          if (t.style && t.style.verticalAlign && !widget.style.verticalAlign) {
            widget.style.verticalAlign = t.style.verticalAlign;
          }
        }
      });
    });
  }
}

function addActions(model) {
  Object.values(model.widgets).forEach(function (w) {
    var lines = getLines(w, model);

    if (lines.length > 0) {
      w.lines = lines;
    }
  });
  Object.values(model.screens).forEach(function (s) {
    var lines = getLines(s, model);

    if (lines.length > 0) {
      s.lines = lines;
    }
  });
  return model;
}

function addForcedResize(model, isForcePinnedLeft, isForcePinnedRight, isForceFixedHorizontal) {
  if (isForcePinnedLeft || isForcePinnedRight || isForceFixedHorizontal) {
    Logger$1.log(2, "Quant2Flat.addForcedResize()", isForcePinnedLeft, isForcePinnedRight);
    Object.values(model.widgets).forEach(function (w) {
      if (!w.props.resize) {
        w.props.resize = {
          right: false,
          up: false,
          left: false,
          down: false,
          fixedHorizontal: false,
          fixedVertical: false
        };
      }

      if (isForcePinnedLeft) {
        w.props.resize.left = true;
      }

      if (isForceFixedHorizontal && !w.props.right) {
        w.props.resize.fixedHorizontal = true;
      }

      if (isForcePinnedRight && !w.props.fixedHorizontal) {
        w.props.resize.right = true;
      }
    });
  }

  return model;
}

function addDefaultDataBinding(model) {
  var _loop = function _loop(screenId) {
    var screen = model.screens[screenId];
    var children = screen.children;

    if (children) {
      children.forEach(function (widgetId) {
        var widget = model.widgets[widgetId];

        if (widget && widget.props) {
          if (!widget.props.databinding || Object.values(widget.props.databinding) === 0) {
            widget.props.databinding = {
              default: getDefaultDataBinding(screen, widget)
            };
            Logger$1.log(2, "Quant2Flat.addDefaultDataBinding() > ", widget.props.databinding);
          }
        }
      });
    }
  };

  for (var screenId in model.screens) {
    _loop(screenId);
  }

  return model;
}

function getDefaultDataBinding(screen, widget) {
  /**
   * RadioBoxes need some special handling. We create a binding for the group if specified
   */
  if (widget.type === "RadioBox2" && widget.props && widget.props.formGroup) {
    return escapeSpaces("".concat(screen.name, ".").concat(widget.props.formGroup));
  }

  return escapeSpaces("".concat(screen.name, ".").concat(widget.name));
}

function escapeSpaces(s) {
  return s.replace(/\s+/g, "_");
}

function fixHorizontal(model) {
  var fixed = ["Switch", "Stepper"];

  for (var widgetId in model.widgets) {
    var widget = model.widgets[widgetId];

    if (fixed.indexOf(widget.type) >= 0) {
      if (!widget.props.resize) {
        widget.props.resize = {};
      }

      widget.props.resize.fixedHorizontal = true;
    }
  }

  return model;
}

function fixNames(model) {
  var screens = Object.values(model.screens);
  screens.forEach(function (screen, j) {
    screen.name = fixElementName(screen.name);
    var otherScreensWithSameName = screens.filter(function (o) {
      return o.name === screen.name;
    });

    if (otherScreensWithSameName.length > 1) {
      Logger$1.log(3, "Quant2Flat.fixNames() > Fix double screen name:" + screen.name);
      screen.name += "_" + j;
    }

    var children = screen.children;

    if (children) {
      var widgets = children.map(function (widgetId) {
        return model.widgets[widgetId];
      });
      widgets.forEach(function (w, i) {
        w.name = fixElementName(w.name);
        var others = widgets.filter(function (o) {
          return o.name === w.name;
        });

        if (others.length > 1) {
          Logger$1.log(3, "Quant2Flat.fixNames() > Fix double widget name: " + w.name + " in screen " + screen.name);
          w.name += "_" + i;
        }
      });
    }
  });

  if (model.templates) {
    Object.values(model.templates).forEach(function (t) {
      t.name = fixElementName(t.name);
    });
  }
  /**
   * DEPREACTED SHOULD NEVER BE CALLED: We should fix doubles names. With mastre screens
   * we could have overwites! We could rename them, but this
   * would have to be consistant in all screens!
   */


  var _loop2 = function _loop2(screenID) {
    var screen = model.screens[screenID];
    var children = screen.children;
    var names = children.map(function (c) {
      return model.widgets[c].name;
    });
    var count = {};
    names.forEach(function (n) {
      if (count[n]) {
        Logger$1.error("Quant2Flat.fixNames() > Dubplicate name of element '".concat(n, "' in screen '").concat(screen.name, "'"));
      }

      count[n] = true;
    });
  };

  for (var screenID in model.screens) {
    _loop2(screenID);
  }

  return model;
}

function fixElementName(str) {
  return str.replace(/[^0-9a-z-]/gi, '');
}

function addGroupWrapper(screen, model) {
  Logger$1.log(4, "Quant2Flat.addGroupWrapper() > create ", screen.name);
  var widgets = getOrderedWidgets(getWidgets$1(screen, model));
  var createdGroups = {};
  var order = [];
  widgets.forEach(function (widget) {
    var group = getGroup(widget.id, model);

    if (group) {
      createGroupCntr(group, model, createdGroups, order, screen);
    }

    order.push(widget);
  });
  /**
   * Set new z to ensure that the groups are before the
   */

  order.forEach(function (widget, i) {
    widget.z = i;
  });
  return model;
}

function createGroupCntr(group, model, createdGroups, order, screen) {
  /**
   * Create new group container only if needed
   */
  if (!createdGroups[group.id]) {
    Logger$1.log(2, "Quant2Flat.createGroupCntr() > create ", group.name);
    /**
     * 1) check if we need to create parent group. If so we go up hierachy
     */

    var parentGroup = getParentGroup(group.id, model);

    if (parentGroup) {
      createGroupCntr(parentGroup, model, createdGroups, order, screen);
    }
    /**
     * 2) Now create the group cntr
     */


    var allGroupChildren = getAllGroupChildren(group, model);
    var boundingBox = getBoundingBoxByIds(allGroupChildren, model);
    var groupCntr = {
      id: "gc".concat(group.id),
      name: group.name,
      groupId: group.id,
      isGroup: true,
      type: "Box",
      x: boundingBox.x,
      y: boundingBox.y,
      w: boundingBox.w,
      h: boundingBox.h,
      style: group.style ? group.style : {},
      props: {
        resize: group.props && group.props.resize ? group.props.resize : {
          right: false,
          up: false,
          left: false,
          down: false,
          fixedHorizontal: false,
          fixedVertical: false
        }
      }
    };
    /**
     * For inhereted groups make sure that the inherited flag
     * is set, other wise the sortWidgets methods will put
     * it behind it's children and nesting does not work!
     */

    if (group.inherited) {
      groupCntr.inherited = group.inherited;
    }
    /**
     * Add it to the model and link stuff properly
     */


    model.widgets[groupCntr.id] = groupCntr;
    screen.children.push(groupCntr.id);
    createdGroups[group.id] = groupCntr;
    /**
     * Attention, this is imporant! We add the groupCntr here.
     * After this method, the widget will be added! By doing this,
     * we ensure the right order.
     */

    order.push(groupCntr);
  }
}

function getWidgets$1(screen, model) {
  var widgets = [];

  for (var i = 0; i < screen.children.length; i++) {
    var id = screen.children[i];
    var widget = model.widgets[id];
    widgets.push(widget);
  }

  return widgets;
}

// import * as Util from "../core/ExportUtil"
/**
 * Get a sub tree. This
 */

function transform$2(tree, selectedName, config) {
  var postFix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '-WrapperScreen';
  Logger$1.log(0, "Tree2Component.transform () > enter", selectedName, postFix);
  var componentTree = {
    id: tree.id,
    name: tree.name,
    templates: tree.templates,
    warnings: [],
    screens: []
  };
  var matches = findElementsByName(tree, selectedName);

  if (matches.length === 1) {
    var match = matches[0];
    /**
     * We create here a wrapping screen
     */

    var screen = {
      id: match.id + postFix,
      name: match.name + postFix,
      x: match.x,
      y: match.y,
      w: match.w,
      h: match.h,
      qType: 'qContainer',
      type: 'Screen',
      cssClass: match.cssClass + postFix,
      cssSelector: ".qux-screen.".concat(match.cssClass).concat(postFix),
      children: [match],
      fixedChildren: [],
      actions: [],
      props: {},
      style: {},
      isComponentScreen: true
    };
    componentTree.screens.push(screen);
    componentTree.id = match.id + '-' + componentTree.id;
    /**
     * We make a special rendering (100% height) in the CSSFactory. This
     * we force a grid, but what ever...
     */

    match.hasComponentScreenParent = true;
    /**
     * Do not forget to update the css Selectors
     */

    setCSSClassNames$1(match, match.name + postFix);
  } else if (matches.length > 1) {
    Logger$1.error('Tree2Component.transform() > ERROR: More than one component with name', selectedName);
  } else {
    Logger$1.error('Tree2Component.transform() > ERROR: No component with name', selectedName);
  }

  return componentTree;
}
function findElementsByName(tree, name) {
  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (tree.screens) {
    tree.screens.forEach(function (screen) {
      findElementsByNameInScreen(screen, name, result);
    });
  }

  return result;
}
function findElementsByNameInScreen(e, name) {
  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  if (e.children) {
    e.children.forEach(function (c) {
      if (c.name === name) {
        result.push(c);
      }

      findElementsByName(c, name, result);
    });
  }

  return result;
}

function transform$3(treeModel, config) {
  Logger$1.log(3, "Inline.transform () > enter", config);
  var elements = getTreeElements(treeModel);

  var _loop = function _loop(id) {
    var element = elements[id];

    if (element.type === 'DynamicContainer' && element.props.dynamicChildren) {
      Logger$1.log(4, "Inline.transform () > inline", element.name, element.figmaComponentId);
      /**
       * We have to set here the component class
       */

      if (element.props.dynamicParent && elements[element.props.dynamicParent]) {
        var parent = elements[element.props.dynamicParent];
        element.cssComponentClasses = [parent.cssScreen];
      }
      /**
       * Attention. We set here only references. This means the
       * parent and css selectors are per so not correct
       */


      element.children = [];
      element.props.dynamicChildren.forEach(function (childId) {
        var childElement = elements[childId];

        if (childElement) {
          element.children.push(childElement);
        }
      });
    }
  };

  for (var id in elements) {
    _loop(id);
  }

  return treeModel;
}

function getTreeElements(treeModel) {
  var result = {};
  treeModel.screens.forEach(function (screen) {
    getChildElements(screen, result);
  });
  return result;
}

function getChildElements(element, result) {
  result[element.id] = element;

  if (element.children) {
    element.children.forEach(function (child) {
      return getChildElements(child, result);
    });
  }
}

/**
 * This class transforms an absolute quant-ux model into an
 * kind of HTML model, where the elements have a real parent
 * child relation child
 */

var ModelTransformer = /*#__PURE__*/function () {
  function ModelTransformer(app) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var selected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, ModelTransformer);

    this.config = config;
    this.model = app;
    this.selected = selected;
  }

  _createClass(ModelTransformer, [{
    key: "transform",
    value: function transform$4() {
      Logger$1.log(0, 'ModelTransformer.transform() > selected: ', this.selected);
      var model = this.model; // 1) Make a flat model, e.g. merge in master screens

      var flatModel = transform$1(model, this.config); // 2) Build a tree and layout everything. This will also layout component sets!

      var treeModel = transform(flatModel, this.config); // 3) For dynamic widgets, inline all children.

      var inlineModel = transform$3(treeModel, this.config);

      if (this.selected) {
        inlineModel = transform$2(inlineModel, this.selected, this.config);
      }

      return inlineModel;
    }
  }]);

  return ModelTransformer;
}();

var CSSOptimizer = /*#__PURE__*/function () {
  function CSSOptimizer() {
    _classCallCheck(this, CSSOptimizer);

    /**
     *  Keep the order to collapsed Order: top-left | top-right | bottom-right | bottom-left
     */
    this.borderRadius = ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"];
    /**
    * Order: top, right, bottom, left
    */

    this.borderWidth = ["borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth"];
    this.borderStyle = ['borderTopStyle', 'borderRightStyle', 'borderBottomStyle', 'borderLeftStyle'];
    this.borderColor = ['borderTopColor', 'borderRightColor', 'borderBottomColor', 'borderLeftColor'];
    this.padding = ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'];
  }

  _createClass(CSSOptimizer, [{
    key: "runFlat",
    value: function runFlat(model) {
      model = clone(model);

      if (model.templates) {
        this.compressDict(model.templates);
      }

      this.compressDict(model.screens);
      this.compressDict(model.widgets);
      return model;
    }
  }, {
    key: "runTree",
    value: function runTree(model) {
      var _this = this;

      var replaceVerticalWithPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      /**
      * Generate the template styles
      */
      model.templates.forEach(function (template) {
        // template groups have no style...
        if (template.style) {
          template.style = _this.compress(template.style, template);
        }
      });
      /**
       * Generate styles for each screen. The templates styles
       * might here be reused!
       */

      model.screens.forEach(function (screen) {
        screen.style = _this.compress(screen.style, screen);
        screen.children.forEach(function (child) {
          _this.compressChildren(child, replaceVerticalWithPadding);
        });

        if (screen.fixedChildren) {
          screen.fixedChildren.forEach(function (child) {
            _this.compressChildren(child, replaceVerticalWithPadding);
          });
        }
      });
      return model;
    }
  }, {
    key: "compressChildren",
    value: function compressChildren(element, replaceVerticalWithPadding) {
      var _this2 = this;

      element.style = this.compress(element.style, element, replaceVerticalWithPadding);

      if (element.children) {
        element.children.forEach(function (child) {
          _this2.compressChildren(child, replaceVerticalWithPadding);
        });
      }
    }
  }, {
    key: "compressDict",
    value: function compressDict(dict) {
      var _this3 = this;

      Object.values(dict).forEach(function (item) {
        item.style = _this3.compress(item.style, item);
      });
    }
  }, {
    key: "compress",
    value: function compress(style, element) {
      var replaceVerticalWithPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      /**
       * Dynamic componets have children taht will be already compressed as part
       * of the component wrapper screen. We do not want this.
       */
      if (style._isCompressed) {
        return style;
      }

      style._isCompressed = true;

      if (replaceVerticalWithPadding) {
        style = this.removeVAlign(style, element);
      }

      this.compressAttribes(style, this.padding, 'padding', 'px', 0);
      /**
       * Compress and collapse border
       */

      this.compressAttribes(style, this.borderRadius, 'borderRadius', 'px', 0);
      var borderIsEqual = this.compressAttribes(style, this.borderColor, 'borderColor', false, 'transparent');
      var widthIsEqual = this.compressAttribes(style, this.borderWidth, 'borderWidth', 'px', 0);
      var styleIsEqual = this.compressAttribes(style, this.borderStyle, 'borderStyle', false, 'solid');
      /**
       * Merge borders of possible
       */

      if (borderIsEqual && widthIsEqual && styleIsEqual) {
        style.border = "".concat(style.borderWidth, " ").concat(style.borderStyle, " ").concat(style.borderColor);
        delete style.borderColor;
        delete style.borderWidth;
        delete style.borderStyle;
      }
      /**
       * Remove defaults for the all equal case
       */


      if (style.borderStyle === 'solid solid solid solid') {
        delete style.borderStyle;
      }

      if (style.borderStyle === 'solid') {
        delete style.borderStyle;
      } // if (style.border && style.border.indexOf('0px') === 0) {
      //    delete style.border
      //}


      if (style.padding === '0px') {
        delete style.padding;
      }

      if (style.borderRadius === '0px') {
        delete style.borderRadius;
      }

      return style;
    }
  }, {
    key: "removeVAlign",
    value: function removeVAlign(style, element) {
      if (style.verticalAlign === 'middle' && style.fontSize && style.fontSize !== 'auto') {
        Logger$1.log(3, 'CSSOptimizer.removeVAILN() > middle', element.name);
        delete style.verticalAlign;
        style.paddingTop = Math.round((element.h - style.fontSize) / 2);
        style.paddingBottom = element.h - style.fontSize - style.paddingTop;
      }

      if (style.verticalAlign === 'bottom' && style.fontSize && style.fontSize !== 'auto') {
        Logger$1.log(3, 'CSSOptimizer.removeVAILN() > bottom', element.name);
        delete style.verticalAlign;
        style.paddingTop = Math.round(element.h - style.fontSize);
        style.paddingBottom = 0;
      }

      return style;
    }
  }, {
    key: "resizeToBoxModel",
    value: function resizeToBoxModel(widget) {
      if (widget.style) {
        if (widget.style.paddingTop) {
          widget.h -= widget.style.paddingTop;
        }

        if (widget.style.paddingBottom) {
          widget.h -= widget.style.paddingBottom;
        }

        if (widget.style.paddingLeft) {
          widget.w -= widget.style.paddingLeft;
        }

        if (widget.style.paddingRight) {
          widget.w -= widget.style.paddingRight;
        }

        if (widget.style.borderTopWidth) {
          widget.h -= widget.style.borderTopWidth;
        }

        if (widget.style.borderBottomWidth) {
          widget.h -= widget.style.borderBottomWidth;
        }

        if (widget.style.borderLeftWidth) {
          widget.w -= widget.style.borderLeftWidth;
        }

        if (widget.style.borderRightWidth) {
          widget.w -= widget.style.borderRightWidth;
        }
      }

      return widget;
    }
  }, {
    key: "compressAttribes",
    value: function compressAttribes(style, keys, prop, unit, defaultValue) {
      /**
       * Check if we have all the same
       */
      var firstValue = style[keys[0]];

      if (keys.every(function (key) {
        return style[key] === firstValue;
      })) {
        if (firstValue === undefined || firstValue === null) {
          firstValue = defaultValue;
        }

        if (unit) {
          firstValue += unit;
        }

        keys.forEach(function (key) {
          /**
           * Remove but store a backup for CSSFactory to fix box height
           */
          style['_' + key] = style[key];
          delete style[key];
        });
        style[prop] = firstValue;
        return true;
      } else {
        var values = [];
        keys.forEach(function (key) {
          var value = style[key];

          if (value === undefined || value === null) {
            value = defaultValue;
          }

          if (unit) {
            value += unit;
          }

          values.push(value);
          style['_' + key] = style[key];
          delete style[key];
        });
        style[prop] = values.join(' ');
        return false;
      }
    }
  }]);

  return CSSOptimizer;
}();

function fromRgb(
/*String*/
color) {
  var m = color.toLowerCase().match(/^rgba?\(([\s\\.,0-9]+)\)/);
  return m && fromArray(m[1].split(/\s*,\s*/)); // Color
}
function fromHex(
/*String*/
color) {
  var result = {};
  var bits = color.length == 4 ? 4 : 8;
  var mask = (1 << bits) - 1;
  color = Number("0x" + color.substr(1));

  if (isNaN(color)) {
    return;
  }

  var rgb = ["b", "g", "r"];
  rgb.forEach(function (x) {
    var c = color & mask;
    color >>= bits;
    result[x] = bits == 4 ? 17 * c : c;
  });
  result.a = 1;
  return result;
}
function fromArray(
/** array */
a) {
  var result = {};
  var rgb = ["b", "g", "r"];
  rgb.forEach(function (x, i) {
    result[x] = a[i] * 1;
  });

  if (isNaN(result.a)) {
    result.a = 1;
  }

  return result;
}
function fromString(str) {
  if (str === 'transparent') {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 0
    };
  } else {
    return fromRgb(str) || fromHex(str);
  }
}
function toString(color) {
  return "rgba(".concat(color.r, ", ").concat(color.g, ", ").concat(color.b, ", ").concat(color.a, ")");
}

var PaginCSS = /*#__PURE__*/function () {
  function PaginCSS(cssFactory) {
    _classCallCheck(this, PaginCSS);

    Logger$1.log(5, 'PaginCSS.constructor()');
    this.cssFactory = cssFactory;
  }

  _createClass(PaginCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);

      switch (widget.props.justifyContent) {
        case 'left':
          result += "  justify-content: flex-start;\n";
          break;

        case 'right':
          result += "  justify-content: flex-end;\n";
          break;

        case 'center':
          result += "  justify-content: center;\n";
          break;

        default:
          result += "  justify-content: space-between;\n";
          break;
      }

      result += '}\n\n';
      result += selector + ' .qux-paging-item {\n';
      result += "  width:".concat(style.fontSize * 2, "px;\n");
      result += "  height: 100%;\n";
      result += "  background:".concat(style.background, ";\n");
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.textProperties);
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += '}\n\n';

      if (widget.hover) {
        var hover = widget.hover;
        result += selector + ' .qux-paging-item:hover {\n';
        result += "  background:".concat(hover.background, ";\n");
        result += this.cssFactory.getStyleByKey(hover, widget, this.cssFactory.textProperties);
        result += this.cssFactory.getStyleByKey(hover, widget, this.cssFactory.borderProperties);
        result += '}\n\n';
      }

      if (widget.active) {
        var active = widget.active;
        result += selector + ' .qux-paging-item.qux-paging-item-active {\n';
        result += "  background:".concat(active.background, ";\n");
        result += this.cssFactory.getStyleByKey(active, widget, this.cssFactory.textProperties);
        result += this.cssFactory.getStyleByKey(active, widget, this.cssFactory.borderProperties);
        result += '}\n\n';
      }

      return result;
    }
  }]);

  return PaginCSS;
}();

var TableCSS = /*#__PURE__*/function () {
  function TableCSS(cssFactory) {
    _classCallCheck(this, TableCSS);

    Logger$1.log(5, 'TableCSS.constructor()');
    this.cssFactory = cssFactory;
  }

  _createClass(TableCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      var borderStyle = this.getTableBorderStyle(widget);
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.textProperties);

      if (borderStyle === 'Out') {
        result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      }

      result += '}\n\n';
      result += selector + ' .qux-table-action,';
      result += selector + ' .qux-table-cell{\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.paddingProperties);
      result += '}\n\n';

      if (borderStyle === 'Cell') {
        result += selector + ' th,';
        result += selector + ' td{\n';
        result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
        result += '}\n\n';
      }

      if (borderStyle === 'VLines') {
        result += selector + ' th,';
        result += selector + ' td{\n';
        result += "  border-right-color:".concat(style._borderBottomColor, ";\n");
        result += "  border-right-width:".concat(style._borderBottomWidth, "px;\n");
        result += "  border-right-style:solid;\n";
        result += '}\n\n';
        result += selector + ' th:last-child,';
        result += selector + ' td:last-Child{\n';
        result += "  border:none;\n";
        result += '}\n\n';
      }

      if (borderStyle === 'HLines') {
        result += selector + ' th,';
        result += selector + ' td{\n';
        result += "  border-bottom-color:".concat(style._borderBottomColor, ";\n");
        result += "  border-bottom-width:".concat(style._borderBottomWidth, "px;\n");
        result += "  border-bottom-style:solid;\n";
        result += '}\n\n';
        result += selector + ' tr:last-child th,';
        result += selector + ' tr:last-Child td{\n';
        result += "  border:none;\n";
        result += '}\n\n';
      }

      result += selector + ' thead tr{\n';
      result += "  background:".concat(style.headerBackground, ";\n");
      result += "  color:".concat(style.headerColor, ";\n");

      if (style.headerFontStyle) {
        result += "  font-style:".concat(style.headerFontStyle, ";\n");
      }

      if (style.headerFontWeight) {
        result += "  font-weight:".concat(style.headerFontWeight, ";\n");
      }

      if (style.headerTextDecoration) {
        result += "  text-decoration:".concat(style.headerTextDecoration, ";\n");
      }

      result += '}\n\n';
      result += selector + ' tbody tr:nth-child(2){\n';
      result += "  background:".concat(style.evenRowBackground, ";\n");
      result += "  color:".concat(style.evenRowColor, ";\n");
      result += '}\n\n';
      result += selector + ' tbody tr:hover{\n';

      if (style.hoverBackground) {
        result += "  background:".concat(style.hoverBackground, ";\n");
      }

      if (style.hoverColor) {
        result += "  color:".concat(style.hoverColor, ";\n");
      }

      result += '}\n\n';

      if (widget.props.tableActions) {
        widget.props.tableActions.forEach(function (action, i) {
          result += selector + ' .qux-table-action-cntr .qux-table-action-' + i + '{\n';

          if (action.color) {
            result += "  color:".concat(action.color, ";\n");
          }

          result += '}\n\n';
        });
      }

      if (style.checkBox) {
        result += selector + ' .qux-checkbox-cntr{\n';
        var s = style.checkBoxSize ? style.checkBoxSize : style.fontSize;
        result += "  width:".concat(s, "px;\n");
        result += "  height:".concat(s, "px;\n");
        result += "  background:".concat(style.checkBoxBackground, ";\n");
        result += "  border-color:".concat(style.checkBoxBorderColor, ";\n");
        result += "  border-radius:".concat(style.checkBoxBorderRadius, "px;\n");
        result += "  border-width:".concat(style.borderWidth, "px;\n");
        result += '}\n\n';
        result += selector + ' .qux-checkbox-hook {\n';
        result += "  border-color:".concat(style.checkBoxHookColor, ";\n");
        result += '}\n\n';
      }

      var widths = this.getTableWidths(widget.props, style);
      widths.forEach(function (w, i) {
        result += selector + ' .qux-table-column-' + i + '{\n';
        result += "  width:".concat(Math.round(w * widget.w), "px;\n");
        result += '}\n\n';
      }); //widths.forEach((w,i) => {
      //  result += selector + ' td:nth-child(' + (i +1 ) + '){\n'
      //  result += `  width:${Math.round(w * widget.w)}px;\n`
      //  result += '}\n\n'
      //})

      return result;
    }
  }, {
    key: "getTableWidths",
    value: function getTableWidths(props, style) {
      var fontFactor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.6;
      var result = [];

      if (props.widths) {
        var widths = props.widths;
        var sum = 0;
        var padding = style._paddingLeft + style._paddingRight;

        if (style.checkBox) {
          var w = style.checkBoxSize ? style.checkBoxSize : style.fontSize;
          widths = [w + padding].concat(widths);
        }

        if (props.tableActions && props.tableActions.length > 0) {
          var text = props.tableActions.map(function (a) {
            return a.label;
          }).join();

          var _w = text.length * style.fontSize * fontFactor + padding * props.tableActions.length;

          widths = widths.concat(_w);
        }

        for (var i = 0; i < widths.length; i++) {
          sum += widths[i];
        }

        for (var _i = 0; _i < widths.length; _i++) {
          result[_i] = widths[_i] / sum;
        }
      }

      return result;
    }
  }, {
    key: "getTableBorderStyle",
    value: function getTableBorderStyle(model) {
      if (model.props.borderStyle) {
        return model.props.borderStyle;
      }

      return "Cell";
    }
  }]);

  return TableCSS;
}();

var ImageCSS = /*#__PURE__*/function () {
  function ImageCSS(cssFactory) {
    _classCallCheck(this, ImageCSS);

    Logger$1.log(5, 'ImageCSS.constructor()');
    this.cssFactory = cssFactory;
  }

  _createClass(ImageCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);

      if (widget.style.backgroundImage) {
        result += this.cssFactory.getRawStyle(widget.style, widget);
      } else {
        Logger$1.log(5, 'ImageCSS.run()', 'No background for image > ' + widget.name);
        result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
        result += "  background-image:".concat(this.getImagePlaceHolder(widget), ";\n");
        result += "  background-size: 100% 100%;\n";
        result += "  border: 1px solid #333;\n";
      }

      result += '}\n\n';
      return result;
    }
  }, {
    key: "getImagePlaceHolder",
    value: function getImagePlaceHolder(widget) {
      try {
        var w = widget.w * 2;
        var h = widget.h * 2;
        var c = document.createElement("canvas");
        var context = c.getContext("2d");
        c.width = w;
        c.height = h;
        h += 0.5;
        w += 0.5;
        var n = 0.5;
        context.moveTo(n, n);
        context.lineTo(w, h);
        context.moveTo(w, n);
        context.lineTo(n, h);
        context.strokeStyle = "#333";
        context.strokeWidth = 2;
        context.imageSmoothingEnabled = false;
        context.stroke();
        var url = 'url(' + c.toDataURL("image/png") + ')';
        return url;
      } catch (err) {
        /**
         * can happen in jest
         */
        Logger$1.log(5, 'ImageCSS.getImagePlaceHolder() error');
      }
    }
  }]);

  return ImageCSS;
}();

var ScreenCSS = /*#__PURE__*/function () {
  function ScreenCSS(cssFactory) {
    _classCallCheck(this, ScreenCSS);

    Logger$1.log(5, 'ScreenCSS.constructor()');
    this.cssFactory = cssFactory;
    this.imagePrefix = cssFactory.imagePrefix;
  }

  _createClass(ScreenCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);

      if (!isOverlay(widget) || hasOverlayBackground(widget)) {
        if (style.background) {
          if (style.background.colors) {
            var background = style.background;
            var gradient = "(" + background.direction + "deg";

            for (var i = 0; i < background.colors.length; i++) {
              var color = background.colors[i];
              gradient += "," + color.c + " " + color.p + "% ";
            }

            gradient += ")";
            result += "  background: linear-gradient".concat(gradient, ";\n");
          } else {
            result += "  background-color: ".concat(style.background, ";\n");
          }
        }

        if (style.backgroundColor) {
          result += "  background-color: ".concat(style.backgroundColor, ";\n");
        }

        if (style.backgroundImage && style.backgroundImage.url) {
          if (style.backgroundImage.url.indexOf('http') === 0) {
            result += "  background-image: url(".concat(style.backgroundImage.url, ");\n");
          } else {
            result += "  background-image: url(".concat(this.imagePrefix, "/").concat(style.backgroundImage.url, ");\n");
          }
        }
      }
      /**
       * Check if we have full screen (height = 100%) or fixed size, component
       */


      if (widget.isComponentScreen) {
        result += "  height:".concat(widget.h, "px;\n");
        result += "  width:".concat(widget.w, "px;\n");
        result += this.cssFactory.getStyleByKey(style, widget, ['boxShadow']);
        result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      } else {
        result += '  height:100%;\n';
      }

      result += '}\n\n';
      return result;
    }
  }]);

  return ScreenCSS;
}();

var RepeaterCSS = /*#__PURE__*/function () {
  function RepeaterCSS(cssFactory) {
    _classCallCheck(this, RepeaterCSS);

    Logger$1.log(5, 'RepeaterCSS.constructor()');
    this.cssFactory = cssFactory;
  }

  _createClass(RepeaterCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getRawStyle(style, widget);
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';

      if (isWrappedContainer(widget)) {
        Logger$1.warn('RepeaterCSS.run () > wrapped container not supported', widget);
      }
      /**
       * If we have just one child, we just take this to male sure we use teh min and max width
       */


      var boundingBox = widget.children.length === 1 ? widget.children[0] : getBoundingBoxByBoxes(widget.children);
      boundingBox.parent = widget;
      result += selector + ' .qux-repeater-child {\n';

      if (isLayoutAuto(widget)) {
        result += this.getChildrenAuto(selector, widget, boundingBox);
      } else if (isRepeaterGrid(widget)) {
        result += this.getChildrenGrid(selector, widget, boundingBox);
      } else {
        result += this.getChildrenRow(selector, widget, boundingBox);
      }

      result += '}\n\n';
      return result;
    }
  }, {
    key: "getChildrenAuto",
    value: function getChildrenAuto(selector, widget, boundingBox) {
      Logger$1.log(3, 'RepeaterCSS.getChildrenAuto () > ', widget, boundingBox);
      var result = '';
      var height = this.cssFactory.getFixedHeight(boundingBox);
      result += "  height: ".concat(height, ";\n");
      result += this.cssFactory.getWrappedWidth(boundingBox);
      return result;
    }
  }, {
    key: "getChildrenRow",
    value: function getChildrenRow(selector, widget, boundingBox) {
      Logger$1.log(3, 'RepeaterCSS.getChildrenRow () > ', widget);
      var result = '';
      result += this.cssFactory.getWrappedWidth(boundingBox);
      result += "  margin-bottom:".concat(widget.props.distanceY, "px;\n");

      if (boundingBox.x > 0) {
        result += "  margin-left:".concat(boundingBox.x, "px;\n");
      }

      if (boundingBox.y > 0) {
        result += "  margin-top:".concat(boundingBox.y, "px;\n");
      }

      return result;
    }
  }, {
    key: "getChildrenGrid",
    value: function getChildrenGrid(selector, widget, boundingBox) {
      Logger$1.log(5, 'RepeaterCSS.getChildrenGrid () > grid', widget);
      var result = '';
      result += '  display: inline-block;\n';
      result += this.cssFactory.getWrappedWidth(boundingBox);
      var height = this.cssFactory.getFixedHeight(boundingBox);
      result += "  height: ".concat(height, ";\n");

      if (!isRepeaterAuto(widget)) {
        result += "  margin-bottom:".concat(widget.props.distanceY, "px;\n");
        result += "  margin-right:".concat(widget.props.distanceX, "px;\n");
      } else {
        /**
         * The last elements should not have a margin...
         */
        var rows = Math.floor(widget.h / boundingBox.h);
        var distance = (widget.h - boundingBox.h * rows) / (rows - 1);
        result += "  margin-bottom:".concat(distance, "px;\n");
      }

      if (boundingBox.x > 0) {
        result += "  margin-left:".concat(boundingBox.x, "px;\n");
      }

      if (boundingBox.y > 0) {
        result += "  margin-top:".concat(boundingBox.y, "px;\n");
      }

      return result;
    }
  }]);

  return RepeaterCSS;
}();

var ChartCSS = /*#__PURE__*/function () {
  function ChartCSS(cssFactory) {
    _classCallCheck(this, ChartCSS);

    Logger$1.log(5, 'ChartCSS.constructor()');
    this.cssFactory = cssFactory;
  }

  _createClass(ChartCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += '}\n\n';
      return result;
    }
  }]);

  return ChartCSS;
}();

var VectorCSS = /*#__PURE__*/function () {
  function VectorCSS(cssFactory) {
    _classCallCheck(this, VectorCSS);

    Logger$1.log(5, 'VectorCSS()');
    this.cssFactory = cssFactory;
    this.imagePrefix = cssFactory.imagePrefix;
  }

  _createClass(VectorCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget); // FIXME: make this smarter?

      result += "  height:".concat(this.cssFactory.getCorrectedHeight(widget), ";\n");
      result += "  width:".concat(this.cssFactory.getCorrectedWidth(widget), ";\n");

      if (style.backgroundImage && style.backgroundImage.url) {
        if (style.backgroundImage.url.indexOf('http') === 0) {
          result += "  background-image: url(".concat(style.backgroundImage.url, ");\n");
        } else {
          result += "  background-image: url(".concat(this.imagePrefix, "/").concat(style.backgroundImage.url, ");\n");
        }
      }

      result += '}\n\n';
      return result;
    }
  }]);

  return VectorCSS;
}();

var VectorCSS$1 = /*#__PURE__*/function () {
  function VectorCSS(cssFactory) {
    _classCallCheck(this, VectorCSS);

    Logger$1.log(5, 'Timeline()');
    this.cssFactory = cssFactory;
    this.imagePrefix = cssFactory.imagePrefix;
  }

  _createClass(VectorCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);

      if (style.elementSpacing === -1) {
        result += "  display:flex;\n";
        result += "  flex-direction: column;\n";
        result += "  justify-content: space-around;\n";
      }

      result += '}\n\n';
      var circleSize = style.circleSize - style.circleBorderWidth;
      var left = (circleSize - style.lineWidth) / 2 + 1;
      result += selector + ' .qux-timeline-line{\n';
      result += "  background:".concat(style.lineBackground, ";\n");
      result += "  width:".concat(style.lineWidth, "px;\n");
      result += "  border-radius:".concat(Math.round(style.lineWidth / 2), "px;\n");
      result += "  left:".concat(Math.round(left), "px;\n");
      result += '}\n\n';

      if (style.elementSpacing > 0) {
        result += selector + ' .qux-timeline-element{\n';
        result += "  margin-top:".concat(style.elementSpacing, "px;\n");
        result += '}\n\n';
      }

      result += selector + ' .qux-timeline-element-selected .qux-timeline-circle{\n';
      result += "  background:".concat(style.cicleActiveBackground, ";\n");
      result += "  border-color:".concat(style.cicleActiveBorderColor, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-timeline-element-selected .qux-timeline-label{\n';
      result += "  color:".concat(style.cicleActiveTextColor, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-timeline-label{\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.textProperties);
      result += '}\n\n';
      result += selector + ' .qux-timeline-circle{\n';
      result += "  background:".concat(style.cicleBackground, ";\n");
      result += "  width:".concat(circleSize, "px;\n");
      result += "  height:".concat(circleSize, "px;\n");
      result += "  border-color:".concat(style.cicleBorderColor, ";\n");
      result += "  border-width:".concat(style.circleBorderWidth, "px;\n");
      result += '}\n\n';
      return result;
    }
  }]);

  return VectorCSS;
}();

var SegmentCSS = /*#__PURE__*/function () {
  function SegmentCSS(cssFactory) {
    _classCallCheck(this, SegmentCSS);

    Logger$1.log(5, 'SegmentCSS()');
    this.cssFactory = cssFactory;
    this.imagePrefix = cssFactory.imagePrefix;
  }

  _createClass(SegmentCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';
      result += selector + ' .qux-segment-item {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.textProperties);
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += this.cssFactory.getBackGround(style, widget);
      result += "  border-left: none;\n";
      result += "  border-radius: 0px;\n";
      result += '}\n\n';
      result += selector + ' .qux-segment-item:first-child {\n';
      result += "  border-left-color: ".concat(style._borderLeftColor, ";\n");
      var borderLeftStyle = style._borderLeftStyle ? style._borderLeftStyle : 'solid';
      result += "  border-left-style: ".concat(borderLeftStyle, ";\n");
      result += "  border-left-width: ".concat(style._borderLeftWidth, "px;\n");

      if (style._borderTopLeftRadius) {
        result += "  border-top-left-radius: ".concat(style._borderTopLeftRadius, "px;\n");
      }

      if (style._borderBottomLeftRadius) {
        result += "  border-bottom-left-radius: ".concat(style._borderBottomLeftRadius, "px;\n");
      }

      result += '}\n\n';
      result += selector + ' .qux-segment-item:last-child {\n';

      if (style._borderTopRightRadius) {
        result += "  border-top-right-radius: ".concat(style._borderTopRightRadius, "px;\n");
      }

      if (style._borderBottomRightRadius) {
        result += "  border-bottom-right-radius: ".concat(style._borderBottomRightRadius, "px;\n");
      }

      result += '}\n\n';

      if (widget.active) {
        var active = widget.active;
        result += selector + ' .qux-segment-item.qux-segment-item-selected{\n';
        result += "  background:".concat(active.background, ";\n");
        result += "  color:".concat(active.color, ";\n");
        result += this.cssFactory.getStyleByKey(active, widget, this.cssFactory.borderColorProperties);
        result += '}\n\n';
      }

      return result;
    }
  }]);

  return SegmentCSS;
}();

var UploadCSS = /*#__PURE__*/function () {
  function UploadCSS(cssFactory) {
    _classCallCheck(this, UploadCSS);

    Logger$1.log(5, 'UploadCSS()');
    this.cssFactory = cssFactory;
    this.imagePrefix = cssFactory.imagePrefix;
  }

  _createClass(UploadCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += this.cssFactory.getRawStyle(style, widget);
      result += '}\n\n';

      if (widget.hover) {
        var hover = widget.hover;
        result += selector + ':hover {\n';
        result += "  background:".concat(hover.background, ";\n");
        result += "  color:".concat(hover.color, ";\n");
        result += this.cssFactory.getStyleByKey(hover, widget, this.cssFactory.borderColorProperties);
        result += '}\n\n';
      }

      if (widget.active) {
        var active = widget.active;
        result += selector + '.qux-upload-has-files {\n';
        result += "  background:".concat(active.background, ";\n");
        result += "  color:".concat(active.color, ";\n");
        result += this.cssFactory.getStyleByKey(active, widget, this.cssFactory.borderColorProperties);
        result += '}\n\n';
      }

      return result;
    }
  }]);

  return UploadCSS;
}();

var CameraCSS = /*#__PURE__*/function () {
  function CameraCSS(cssFactory) {
    _classCallCheck(this, CameraCSS);

    Logger$1.log(5, 'CameraCSS()');
    this.cssFactory = cssFactory;
    this.imagePrefix = cssFactory.imagePrefix;
  }

  _createClass(CameraCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += this.cssFactory.getRawStyle(style, widget);
      result += '}\n\n';

      if (widget.hover) {
        var hover = widget.hover;
        result += selector + ':hover {\n';
        result += "  background:".concat(hover.background, ";\n");
        result += "  color:".concat(hover.color, ";\n");
        result += this.cssFactory.getStyleByKey(hover, widget, this.cssFactory.borderColorProperties);
        result += '}\n\n';
      }

      if (widget.active) {
        var active = widget.active;
        result += selector + '.qux-upload-has-files {\n';
        result += "  background:".concat(active.background, ";\n");
        result += "  color:".concat(active.color, ";\n");
        result += this.cssFactory.getStyleByKey(active, widget, this.cssFactory.borderColorProperties);
        result += '}\n\n';
      }

      result += selector + ' .qux-camera-icon {\n';
      result += "  font-size:".concat(Math.min(widget.w, widget.h) * 0.6, "px;\n");
      result += '}\n\n';
      return result;
    }
  }]);

  return CameraCSS;
}();

var UploadPreviewCSS = /*#__PURE__*/function () {
  function UploadPreviewCSS(cssFactory) {
    _classCallCheck(this, UploadPreviewCSS);

    Logger$1.log(5, 'UploadPreviewCSS.constructor()');
    this.cssFactory = cssFactory;
  }

  _createClass(UploadPreviewCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += '}\n\n';
      return result;
    }
  }]);

  return UploadPreviewCSS;
}();

var ComponentSetCSS = /*#__PURE__*/function () {
  function ComponentSetCSS(cssFactory) {
    _classCallCheck(this, ComponentSetCSS);

    Logger$1.log(5, 'ComponentSetCSS.constructor()');
    this.cssFactory = cssFactory;
  }

  _createClass(ComponentSetCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var _this = this;

      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';
      /**
       * We also layout the childrem here
       */

      widget.children.forEach(function (child) {
        result += child.cssSelector + ' {\n';

        if (isFixedHorizontal(child)) {
          result += "  width: ".concat(_this.cssFactory.getCorrectedWidth(child), ";\n");
        } else if (hasMinMaxWdith(child)) {
          result += _this.getMinMaxWidth(child, false);
        } else {
          result += "  min-width: ".concat(_this.cssFactory.getCorrectedWidth(child), ";\n");
        }

        if (isFixedVertical(child)) {
          result += "  height: ".concat(_this.cssFactory.getCorrectedHeight(child), ";\n");
        } else {
          result += "  min-height: ".concat(_this.cssFactory.getCorrectedHeight(child), ";\n");
        }

        result += '}\n\n';
      });
      return result;
    }
  }]);

  return ComponentSetCSS;
}();

var SpinnerCSS = /*#__PURE__*/function () {
  function SpinnerCSS(cssFactory) {
    _classCallCheck(this, SpinnerCSS);

    Logger$1.log(5, 'SpinnerCSS()');
    this.cssFactory = cssFactory;
    this.imagePrefix = cssFactory.imagePrefix;
  }

  _createClass(SpinnerCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.textProperties);
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += '}\n\n';

      if (widget.hover) {
        var hover = widget.hover;
        result += selector + ':hover {\n';
        result += "  color:".concat(hover.color, ";\n");
        result += '}\n\n';
      }

      result += selector + ' .qux-spinner-option-cntr {\n';
      result += "  height:".concat(Math.ceil(widget.h * 3), "px;\n");
      result += '}\n\n';
      result += selector + ' .qux-spinner-option {\n';
      result += "  height:".concat(Math.floor(widget.h / 3), "px;\n");
      result += '}\n\n';
      result += selector + ' .qux-spinner-border {\n';
      result += "  border-top-color:".concat(style.borderBoxColor, ";\n");
      result += "  border-bottom-color:".concat(style.borderBoxColor, ";\n");
      result += '}\n\n';
      return result;
    }
  }]);

  return SpinnerCSS;
}();

var DynamicContainerCSS = /*#__PURE__*/function () {
  function DynamicContainerCSS(cssFactory) {
    _classCallCheck(this, DynamicContainerCSS);

    Logger$1.log(5, 'DynamicContainerCSS.constructor()');
    this.cssFactory = cssFactory;
  }

  _createClass(DynamicContainerCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';
      return result;
    }
  }]);

  return DynamicContainerCSS;
}();

var RichTextCSS = /*#__PURE__*/function () {
  function RichTextCSS(cssFactory) {
    _classCallCheck(this, RichTextCSS);

    Logger$1.log(5, 'RichTextCSS()');
    this.cssFactory = cssFactory;
    this.imagePrefix = cssFactory.imagePrefix;
  }

  _createClass(RichTextCSS, [{
    key: "run",
    value: function run(selector, style, widget) {
      var _this = this;

      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += this.cssFactory.getRawStyle(style, widget);
      result += '}\n\n';

      if (widget.props && widget.props.richTextLabel) {
        var richText = widget.props.richTextLabel;
        richText.forEach(function (child, i) {
          if (child.style) {
            result += selector + " .qux-rich-text-child-".concat(i, " {\n");
            result += _this.cssFactory.getRawStyle(child.style, widget);
            result += '}\n\n';
          }
        });
      }

      return result;
    }
  }]);

  return RichTextCSS;
}();

var CSSWidgetFactory = /*#__PURE__*/function () {
  function CSSWidgetFactory(cssFactory) {
    _classCallCheck(this, CSSWidgetFactory);

    Logger$1.log(5, 'CSSWidgetFactory.constructor()');
    this.cssFactory = cssFactory;
    this.factories = {
      'Paging': new PaginCSS(cssFactory),
      'Table': new TableCSS(cssFactory),
      'Image': new ImageCSS(cssFactory),
      'Screen': new ScreenCSS(cssFactory),
      'Repeater': new RepeaterCSS(cssFactory),
      'BarChart': new ChartCSS(cssFactory),
      'Vector': new VectorCSS(cssFactory),
      'Timeline': new VectorCSS$1(cssFactory),
      'Segment': new SegmentCSS(cssFactory),
      'Upload': new UploadCSS(cssFactory),
      'Camera': new CameraCSS(cssFactory),
      'UploadPreview': new UploadPreviewCSS(cssFactory),
      'ComponentSet': new ComponentSetCSS(cssFactory),
      'Spinner': new SpinnerCSS(cssFactory),
      'DynamicContainer': new DynamicContainerCSS(cssFactory),
      'RichText': new RichTextCSS(cssFactory)
    };
  }

  _createClass(CSSWidgetFactory, [{
    key: "getCSS_RichText",
    value: function getCSS_RichText(selector, style, widget) {
      Logger$1.log(5, 'getCSS_RichText', widget);
      return this.factories.RichText.run(selector, style, widget);
    }
  }, {
    key: "getCSS_DynamicContainer",
    value: function getCSS_DynamicContainer(selector, style, widget) {
      Logger$1.log(5, 'getDynamicContainer', widget);
      return this.factories.DynamicContainer.run(selector, style, widget);
    }
  }, {
    key: "getCSS_Spinner",
    value: function getCSS_Spinner(selector, style, widget) {
      Logger$1.log(5, 'getSpinner', widget);
      return this.factories.Spinner.run(selector, style, widget);
    }
  }, {
    key: "getCSS_ComponentSet",
    value: function getCSS_ComponentSet(selector, style, widget) {
      Logger$1.log(5, 'getComponentSet', widget);
      return this.factories.ComponentSet.run(selector, style, widget);
    }
  }, {
    key: "getCSS_UploadPreview",
    value: function getCSS_UploadPreview(selector, style, widget) {
      Logger$1.log(5, 'getCSS_UploadPreview', widget);
      return this.factories.UploadPreview.run(selector, style, widget);
    }
  }, {
    key: "getCSS_Camera",
    value: function getCSS_Camera(selector, style, widget) {
      Logger$1.log(5, 'getCSS_Camera', widget);
      return this.factories.Camera.run(selector, style, widget);
    }
  }, {
    key: "getCSS_Upload",
    value: function getCSS_Upload(selector, style, widget) {
      Logger$1.log(5, 'getCSS_Upload', widget);
      return this.factories.Upload.run(selector, style, widget);
    }
  }, {
    key: "getCSS_BarChart",
    value: function getCSS_BarChart(selector, style, widget) {
      Logger$1.log(5, 'getCSS_BarChart', widget);
      return this.factories.BarChart.run(selector, style, widget);
    }
  }, {
    key: "getCSS_RingChart",
    value: function getCSS_RingChart(selector, style, widget) {
      Logger$1.log(5, 'getCSS_RingChart', widget);
      return this.factories.BarChart.run(selector, style, widget);
    }
  }, {
    key: "getCSS_SegmentButton",
    value: function getCSS_SegmentButton(selector, style, widget) {
      Logger$1.log(5, 'getCSS_SegmentButton', widget);
      return this.factories.Segment.run(selector, style, widget);
    }
  }, {
    key: "getCSS_Timeline",
    value: function getCSS_Timeline(selector, style, widget) {
      Logger$1.log(5, 'getCSS_Timeline', widget);
      return this.factories.Timeline.run(selector, style, widget);
    }
  }, {
    key: "getCSS_Vector",
    value: function getCSS_Vector(selector, style, widget) {
      Logger$1.log(5, 'getCSS_Vector', widget);
      return this.factories.Vector.run(selector, style, widget);
    }
  }, {
    key: "getCSS_PieChart",
    value: function getCSS_PieChart(selector, style, widget) {
      Logger$1.log(5, 'getCSS_PieChart', widget);
      return this.factories.BarChart.run(selector, style, widget);
    }
  }, {
    key: "getCSS_MultiRingChart",
    value: function getCSS_MultiRingChart(selector, style, widget) {
      Logger$1.log(5, 'getCSS_MultiRingChart', widget);
      return this.factories.BarChart.run(selector, style, widget);
    }
  }, {
    key: "getCSS_Screen",
    value: function getCSS_Screen(selector, style, widget) {
      Logger$1.log(5, 'getCSS_Screen', widget);
      return this.factories.Screen.run(selector, style, widget);
    }
  }, {
    key: "getCSS_Repeater",
    value: function getCSS_Repeater(selector, style, widget) {
      Logger$1.log(5, 'getCSS_Repeater', widget);
      return this.factories.Repeater.run(selector, style, widget);
    }
  }, {
    key: "getCSS_Icon",
    value: function getCSS_Icon(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getRawStyle(style, widget);
      result += this.cssFactory.getPosition(widget);
      result += "  font-size:".concat(widget.h, "px;\n");
      result += "  line-height:1;\n";
      result += '}\n\n';
      result += selector + ' .mdi:before {\n';
      result += "  font-size:".concat(widget.h, "px;\n");
      result += '}\n\n';
      return result;
    }
  }, {
    key: "getCSS_ChildrenToggle",
    value: function getCSS_ChildrenToggle(selector, style, widget) {
      /**
       * For now we assume this thingy has a fixed width...
       */
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getRawStyle(style, widget);
      result += this.cssFactory.getPosition(widget);
      result += "  width:".concat(widget.w, "px;\n");
      result += '}\n\n';

      if (widget.active) {
        result += selector + '.qux-active {\n';
        result += this.getRawStyle(widget.active, widget);
        result += '}\n\n';
      }
      /**
       * We should add here still some other stuff for children...
       */


      return result;
    }
  }, {
    key: "getCSS_RadioGroup",
    value: function getCSS_RadioGroup(selector, style, widget) {
      var result = '';
      var correctedHeight = this.cssFactory.getCorrectedHeight(widget, false, widget.style.boxHeight);
      var height = widget.style.boxHeight + 'px';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';
      result += selector + '.qux-radiobox {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += this.cssFactory.getBackGround(style, widget);
      result += "  height:".concat(height, ";\n");
      result += "  width:".concat(height, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-radiobox-cntr {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += this.cssFactory.getBackGround(style, widget);
      result += "  height:".concat(correctedHeight, ";\n");
      result += "  width:".concat(correctedHeight, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-radiobox-hook {\n';
      result += "  background: ".concat(style.colorButton, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-radiobox-label {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.fontProperties);
      result += '}\n\n';

      if (widget.checked) {
        result += selector + '.qux-radiobox-checked .qux-radiobox-cntr {\n';
        result += this.cssFactory.getStyleByKey(widget.checked, widget, this.cssFactory.borderColorProperties);
        result += '}\n\n';
      }

      return result;
    }
  }, {
    key: "getCSS_CheckBoxGroup",
    value: function getCSS_CheckBoxGroup(selector, style, widget) {
      var result = '';
      var correctedHeight = this.cssFactory.getCorrectedHeight(widget, false, widget.style.boxHeight);
      var height = widget.style.boxHeight + 'px';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';
      result += selector + '.qux-checkbox {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += this.cssFactory.getBackGround(style, widget);
      result += "  height:".concat(height, ";\n");
      result += "  width:".concat(height, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-checkbox-cntr {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += this.cssFactory.getBackGround(style, widget);
      result += "  height:".concat(correctedHeight, ";\n");
      result += "  width:".concat(correctedHeight, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-checkbox-hook {\n';
      result += "  border-color: ".concat(style.colorButton, ";\n");
      result += "  border-bottom-width: ".concat(Math.round(height / 10), "px;\n");
      result += "  border-right-width:  ".concat(Math.round(height / 10), "px;\n");
      result += '}\n\n';
      result += selector + ' .qux-checkbox-label {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.fontProperties);
      result += '}\n\n';

      if (widget.checked) {
        result += selector + '.qux-checkbox-checked .qux-checkbox-cntr {\n';
        result += this.cssFactory.getStyleByKey(widget.checked, widget, this.cssFactory.borderColorProperties);
        result += '}\n\n';
      }

      return result;
    }
  }, {
    key: "getCSS_RadioBox2",
    value: function getCSS_RadioBox2(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';
      result += selector + ' .qux-radiobox-cntr {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += this.cssFactory.getBackGround(style, widget);
      result += "  height:".concat(this.cssFactory.getCorrectedHeight(widget), ";\n");
      result += "  width:".concat(this.cssFactory.getCorrectedWidth(widget), ";\n");
      result += '}\n\n';
      result += selector + ' .qux-radiobox-hook {\n';
      result += "  background: ".concat(style.colorButton, ";\n");
      result += '}\n\n';

      if (widget.checked) {
        result += selector + '.qux-radiobox-checked .qux-radiobox-cntr {\n';
        result += this.cssFactory.getStyleByKey(widget.checked, widget, this.cssFactory.borderColorProperties);
        result += '}\n\n';
      }

      return result;
    }
  }, {
    key: "getCSS_CheckBox",
    value: function getCSS_CheckBox(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget); // FIXME: we set width and height twice

      result += "  height:".concat(widget.h, "px;\n");
      result += "  width:".concat(widget.w, "px;\n");
      result += '}\n\n';
      result += selector + ' .qux-checkbox-cntr {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += this.cssFactory.getBackGround(style, widget);
      result += "  height:".concat(this.cssFactory.getCorrectedHeight(widget), ";\n");
      result += "  width:".concat(this.cssFactory.getCorrectedWidth(widget), ";\n");
      result += '}\n\n';
      result += selector + ' .qux-checkbox-hook {\n';
      result += "  border-color: ".concat(style.colorButton, ";\n");
      result += "  border-bottom-width: ".concat(Math.round(widget.h / 10), "px;\n");
      result += "  border-right-width:  ".concat(Math.round(widget.h / 10), "px;\n");
      result += '}\n\n';

      if (widget.checked) {
        result += selector + '.qux-checkbox-checked .qux-checkbox-cntr {\n';
        result += this.cssFactory.getStyleByKey(widget.checked, widget, this.cssFactory.borderColorProperties);
        result += '}\n\n';
      }

      return result;
    }
  }, {
    key: "getCSS_Switch",
    value: function getCSS_Switch(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';
      var cntrHeight = this.cssFactory.getCorrectedHeight(widget, false, widget.h);
      var cntrWidth = this.cssFactory.getCorrectedWidth(widget, false, widget.w);

      if (style.cssClass === 'MatcWidgetTypeSwitchThin') {
        cntrHeight = '50%';
      }

      result += selector + ' .qux-switch-cntr {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += "  height:".concat(cntrHeight, ";\n");
      result += "  width:".concat(cntrWidth, ";\n");
      result += '}\n\n';
      var borderWidthButton = style.borderWidthButton ? style.borderWidthButton : 0;
      var borderColorButton = style.borderColorButton ? style.borderColorButton : 'rgba(0,0,0,0)';
      result += selector + ' .qux-switch-handle {\n';
      result += "  background:".concat(style.colorButton, ";\n");
      result += "  border-radius:".concat(style.borderRadius, ";\n");
      result += "  border-width:".concat(borderWidthButton, "px;\n");
      result += "  border-color:".concat(borderColorButton, ";\n");
      result += this.cssFactory.getStyleByKey(style, widget, ['boxShadow']);
      result += "  height: ".concat(widget.h, "px;\n");
      result += "  width: ".concat(widget.h, "px;\n");
      result += '}\n\n';
      result += selector + '.qux-active .qux-switch-handle {\n';
      result += "  left:calc(100% - ".concat(widget.h, "px);\n");
      result += '}\n\n';
      result += selector + ' .qux-switch-on {\n';
      result += "  background:".concat(style.background, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-switch-off {\n';
      result += "  background:".concat(style.colorForeGround, ";\n");
      result += '}\n\n';
      return result;
    }
  }, {
    key: "getCSS_MobileDropDown",
    value: function getCSS_MobileDropDown(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getRawStyle(style, widget);
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n'; // make sure we have always some focus

      result += this.addOpenZIndex(selector);
      result += this._addCaret(selector, widget, style);
      result += selector + ' .qux-dropdown-popup {\n';
      result += "  background:".concat(style.popupBackground, ";\n");
      result += "  color:".concat(style.popupColor, ";\n");
      result += '}\n\n';

      if (widget.focus) {
        result += selector + ':hover {\n';
        result += this.cssFactory.getRawStyle(widget.focus, widget);
        result += '}\n\n';
        result += this._addCaret(selector + ':hover', widget, widget.focus);
        result += selector + ':hover .qux-dropdown-popup {\n';
        result += this.cssFactory.getStyleByKey(widget.focus, widget, this.cssFactory.borderProperties);
        result += '}\n\n';
      }

      return result;
    }
  }, {
    key: "getCSS_DropDown",
    value: function getCSS_DropDown(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getRawStyle(style, widget);
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';
      result += this._addCaret(selector, widget, style); // make sure we have always some focus

      result += this.addOpenZIndex(selector);
      result += selector + ':not(.qux-dropdown-mobile) .qux-dropdown-popup {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);

      if (style.popupBorder) {
        result += "  border-color:".concat(style.popupBorder, ";\n");
      }

      result += '}\n\n';
      result += selector + ':not(.qux-dropdown-mobile) .qux-dropdown-item {\n';
      result += "  background:".concat(style.popupBackground ? style.popupBackground : style.backgroundColor, ";\n");
      result += "  color:".concat(style.popupColor ? style.popupColor : style.color, ";\n");
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.paddingProperties);
      result += '}\n\n';
      result += selector + ':not(.qux-dropdown-mobile) .qux-dropdown-item:hover {\n';
      result += "  background:".concat(style.selectedOptionBackground, ";\n");
      result += "  color:".concat(style.selectedOptionColor, ";\n");
      result += '}\n\n'; // in QUX we have focus

      if (widget.focus) {
        result += selector + ':hover {\n';
        result += this.cssFactory.getRawStyle(widget.focus, widget);
        result += '}\n\n';
        result += this._addCaret(selector + ':hover', widget, widget.focus);
        result += selector + ':hover .qux-dropdown-popup {\n';
        result += this.cssFactory.getStyleByKey(widget.focus, widget, this.cssFactory.borderProperties);
        result += '}\n\n';
      } // in Figma we have hover


      if (widget.hover) {
        result += selector + ':hover {\n';
        result += this.cssFactory.getRawStyle(widget.hover, widget);
        result += '}\n\n';
        result += this._addCaret(selector + ':hover', widget, widget.focus);
        result += selector + ':hover .qux-dropdown-popup {\n';
        result += this.cssFactory.getStyleByKey(widget.hover, widget, this.cssFactory.borderProperties);
        result += '}\n\n';
      }

      return result;
    }
  }, {
    key: "_addCaret",
    value: function _addCaret(selector, widget, style) {
      var result = '';

      if (widget.props && widget.props.caretBorderColor) {
        result += selector + ' .qux-dropdown-expend {\n';
        result += "  background:".concat(style._borderRightColor, ";\n");
        result += '}\n\n';
        result += selector + ' .qux-dropdown-carret {\n';
        result += "  color:".concat(style.background, ";\n");
        result += '}\n\n';
      }

      return result;
    }
  }, {
    key: "getCSS_Stepper",
    value: function getCSS_Stepper(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getRawStyle(style, widget);
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';

      if (widget.hover) {
        result += selector + ' .qux-stepper-btn:hover {\n';
        result += "  background:".concat(widget.hover.background, ";\n");
        result += "  color:".concat(widget.hover.color, ";\n");
        result += '}\n\n';
      }

      return result;
    }
  }, {
    key: "getCSS_HSlider",
    value: function getCSS_HSlider(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';
      result += selector + ' .qux-slider-track {\n';
      result += "  background:".concat(style.background, ";\n");
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += '}\n\n';
      result += selector + ' .qux-slider-progress {\n';
      result += "  background:".concat(style.barColor, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-slider-handle  {\n';
      result += "  background:".concat(style.handleColor, ";\n");
      result += "  border-radius:".concat(style.handleRadius, "%;\n");
      result += "  height:".concat(style.handleHeight * widget.h, "px;\n");
      result += "  width:".concat(style.handleWidth, "px;\n");
      result += '}\n\n';
      result += selector + ' .qux-slider-handle-cntr  {\n';
      result += "  margin-left: ".concat(style.handleWidth / 2, "px;\n");
      result += "  width: calc(100% - ".concat(style.handleWidth, "px);\n");
      result += '}\n\n';
      return result;
    }
  }, {
    key: "getCSS_Date",
    value: function getCSS_Date(selector, style, widget) {
      var isInPopup = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var result = '';

      if (!isInPopup) {
        result += selector + ' {\n';
        result += this.cssFactory.getRawStyle(style, widget);
        result += this.cssFactory.getPosition(widget);
        result += '}\n\n';
      }

      if (style.tableBorderWidth) {
        result += selector + ' table {\n';
        result += "  border-spacing:".concat(style.tableBorderWidth, "px;\n");
        result += "  border-collapse: separate;\n";
        result += '}\n\n';
      }

      result += selector + ' .qux-date-week-days {\n';
      result += "  background:".concat(style.tableHeaderBackground, ";\n");
      result += "  color:".concat(style.tableHeaderColor, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-date-header {\n';
      result += "  background:".concat(style.headerBackground, ";\n");
      result += "  color:".concat(style.headerColor, ";\n");
      result += '}\n\n';

      if (style.weekendBackground && style.weekendColor) {
        result += selector + ' .qux-date-weekend {\n';
        result += "  background:".concat(style.weekendBackground, ";\n");
        result += "  color:".concat(style.weekendColor, ";\n");
        result += '}\n\n';
      }

      if (style.weekdayBackground && style.weekdayColor) {
        result += selector + ' .qux-date-workday {\n';
        result += "  background:".concat(style.weekdayBackground, ";\n");
        result += "  color:".concat(style.weekdayColor, ";\n");
        result += '}\n\n';
      }

      if (widget.props.range) {
        result += selector + ' .qux-date-range-start {\n';
        result += "  background:".concat(style.selectedBackground, ";\n");
        result += "  color:".concat(style.selectedColor, ";\n");

        if (style.itemBorderRadius) {
          result += "  border-radius:".concat(style.itemBorderRadius, "%;\n");
        }

        result += '}\n\n';
        result += selector + ' .qux-date-range-end {\n';
        result += "  background:".concat(style.selectedBackground, ";\n");
        result += "  color:".concat(style.selectedColor, ";\n");

        if (style.itemBorderRadius) {
          result += "  border-radius:".concat(style.itemBorderRadius, "%;\n");
        }

        result += '}\n\n';
        result += selector + ' .qux-date-range-middle {\n';
        result += "  background:".concat(style.selectedInRangeBackground, ";\n");
        result += "  color:".concat(style.selectedInRangeColor, ";\n");

        if (style.itemBorderRadius) {
          result += "  border-radius:".concat(style.itemBorderRadius, "%;\n");
        }

        result += '}\n\n';
      } else {
        result += selector + ' .qux-date-selected {\n';
        result += "  background:".concat(style.selectedBackground, ";\n");
        result += "  color:".concat(style.selectedColor, ";\n");

        if (style.itemBorderRadius) {
          result += "  border-radius:".concat(style.itemBorderRadius, "%;\n");
        }

        result += '}\n\n';
      }

      return result;
    }
  }, {
    key: "getCSS_DateDropDown",
    value: function getCSS_DateDropDown(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getRawStyle(style, widget);
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n'; // make sure we have always some focus

      result += this.addOpenZIndex(selector);
      result += this._addCaret(selector, widget, style);
      result += selector + ' .qux-date-picker-popup {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += "  width:".concat(style.fontSize * 18, "px;\n");
      result += "  height:".concat(style.fontSize * 18, "px;\n");
      result += '}\n\n';
      result += this.getCSS_Date(selector + " .qux-date-picker-popup", style, widget, true);
      return result;
    }
  }, {
    key: "getCSS_Rating",
    value: function getCSS_Rating(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += "  color:".concat(style.color, ";\n");
      result += "  font-size:".concat(widget.h, "px;\n");
      result += '}\n\n';
      return result;
    }
  }, {
    key: "getCSS_LabeledIconToggle",
    value: function getCSS_LabeledIconToggle(selector, style, widget) {
      return this.getCSS_IconToggle(selector, style, widget);
    }
  }, {
    key: "getCSS_IconToggle",
    value: function getCSS_IconToggle(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.textProperties);
      result += "  color:".concat(style.passiveColor, ";\n");
      result += "  font-size:".concat(style.fontSize, "px;\n");
      result += '}\n\n';
      result += selector + '.qux-icon-toggle-selected {\n';
      result += "  color:".concat(style.activeColor, ";\n");
      result += '}\n\n';
      result += selector + ' .qux-icon {\n';
      result += "  font-size:".concat(widget.h, "px;\n");
      result += '}\n\n';
      return result;
    }
  }, {
    key: "getCSS_TypeAheadTextBox",
    value: function getCSS_TypeAheadTextBox(selector, style, widget) {
      var result = '';
      result += selector + ' {\n';
      result += this.cssFactory.getPosition(widget);
      result += '}\n\n';
      result += selector + ' .qux-combo-input {\n';
      result += this.cssFactory.getRawStyle(style, widget);
      var paddingH = style._paddingLeft + style._paddingRight;
      var paddingV = style._paddingTop + style._paddingBottom;
      result += "  width:calc(100% - ".concat(paddingH, "px);\n");
      result += "  height:calc(100% - ".concat(paddingV, "px);\n");
      result += '}\n\n'; // make sure we have always some focus

      result += this.addOpenZIndex(selector);
      result += selector + ' .qux-combo-popup {\n';
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.borderProperties);
      result += '}\n\n';
      result += selector + ' .qux-combo-item {\n';
      result += "  background:".concat(style.background, ";\n");
      result += "  color:".concat(style.color, ";\n");
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.paddingProperties);
      result += '}\n\n';
      result += selector + ' .qux-combo-item:hover,\n';
      result += selector + ' .qux-combo-item-selected {\n';
      result += "  background:".concat(style.selectedOptionBackground, ";\n");
      result += this.cssFactory.getStyleByKey(style, widget, this.cssFactory.paddingProperties);
      result += "  color:".concat(style.selectedOptionColor, ";\n");
      result += '}\n\n'; // FIXME: make here a default style for mobile?

      if (widget.focus) {
        result += selector + ':hover {\n';
        result += this.cssFactory.getRawStyle(widget.focus, widget);
        result += '}\n\n';
        result += this._addCaret(selector + ':hover', widget, widget.focus); //result += selector + ':hover .qux-combo-popup {\n'
        //result += this.cssFactory.getStyleByKey(widget.focus, widget, this.cssFactory.borderProperties)
        //result += '}\n\n'
      }

      return result;
    }
  }, {
    key: "getCSS_Image",
    value: function getCSS_Image(selector, style, widget) {
      return this.factories.Image.run(selector, style, widget);
    }
  }, {
    key: "getCSS_Paging",
    value: function getCSS_Paging(selector, style, widget) {
      return this.factories.Paging.run(selector, style, widget);
    }
  }, {
    key: "getCSS_Table",
    value: function getCSS_Table(selector, style, widget) {
      return this.factories.Table.run(selector, style, widget);
    }
  }, {
    key: "addOpenZIndex",
    value: function addOpenZIndex(selector) {
      var result = '';
      result += selector + '.qux-open {\n';
      result += "  z-index: 1000;\n";
      result += '}\n\n';
      return result;
    }
  }]);

  return CSSWidgetFactory;
}();

var CSSPosition = /*#__PURE__*/function () {
  function CSSPosition(config, f) {
    _classCallCheck(this, CSSPosition);

    this.cssFacotory = f;
    this.gridAutoErrorThreshold = 5;
    this.huggedCanResize = false;

    if (config.css) {
      this.isForceGrid = config.css.grid;
      this.huggedCanResize = config.css.huggedCanResize;
      this.justifyContentInWrapper = config.css.justifyContentInWrapper;
      this.prefix = config.css.prefix ? config.css.prefix : '';
      this.gridAutoErrorThreshold = config.css.gridAutoErrorThreshold ? config.css.gridAutoErrorThreshold : 5;
    }

    if (config.responsive) {
      this.responsive = config.responsive;
    }

    this.ignoreCorrectWidthAndHeigth = ['CheckBox', 'RadioBox', 'RadioBox2', 'Switch', 'Stepper', 'TypeAheadTextBox', 'Paging', 'Camera'];
    this.heightProperties = ['paddingTop', '_paddingTop', 'paddingBottom', '_paddingBottom', 'borderTopWidth', '_borderTopWidth', 'borderBottomWidth', '_borderBottomWidth'];
    this.widthProperties = ['paddingLeft', '_paddingLeft', 'paddingRight', '_paddingRight', 'borderLeftWidth', '_borderLeftWidth', 'borderRightWidth', '_borderRightWidth'];
  }

  _createClass(CSSPosition, [{
    key: "getPostion",
    value: function getPostion(widget) {
      Logger$1.log(3, "CSSPostion.getPostion()" + widget.name, widget.layout);
      /**
       * Special handling for design systems and fixed stuff
       */

      if (isDesignSystemRoot(widget)) {
        return this.getDesignSystemPosition(widget);
      }

      if (hasComponentScreenParent(widget)) {
        return this.getComponentScreenPosition(widget);
      }
      /**
       * Normal layout:
       * 1) Position in parent
       * 2) Set position of childnre
       */


      var result = '';
      var parent = widget.parent;
      result += this.getParentPosition(parent, widget);
      result += this.getChildPosition(widget);
      return result;
    }
  }, {
    key: "getParentPosition",
    value: function getParentPosition(parent, widget) {
      if (!parent) {
        return this.getParentDefault(widget);
      }

      if (isFixedPosition(widget)) {
        return this.getParentFixed(widget);
      }

      if (isRepeater(parent)) {
        return this.getParentRepeater(widget);
      }

      if (isLayoutWrap(parent)) {
        return this.getParentWrap(widget);
      }

      if (isLayoutAutoHorizontal(parent)) {
        return this.getParentAutoHorizontal(widget);
      }

      if (isLayoutAutovertical(parent)) {
        return this.getParentAutoVertical(widget);
      }

      if (isLayoutRow(parent)) {
        return this.getParentRow(widget);
      }

      if (isLayoutGrid(parent)) {
        return this.getParentGrid(widget);
      }

      return '';
    }
  }, {
    key: "getChildPosition",
    value: function getChildPosition(widget) {
      if (!hasChildren(widget)) {
        return '/* no children */';
      }

      if (isRepeater(widget)) {
        return this.setChildrenRepeater(widget);
      }

      if (isLayoutWrap(widget)) {
        return this.getChildrenWrap(widget);
      }

      if (isLayoutAutoHorizontal(widget)) {
        return this.getChildrenAutoHorizontal(widget);
      }

      if (isLayoutAutovertical(widget)) {
        return this.getChildrenAutoVertical(widget);
      }

      if (isLayoutRow(widget)) {
        return this.getChildrenRow(widget);
      }

      if (isLayoutGrid(widget)) {
        return this.getChildrenGrid(widget);
      }

      return '';
    }
  }, {
    key: "getParentDefault",
    value: function getParentDefault(widget) {
      Logger$1.log(5, "CSSPosition.getParentDefault() >" + widget.name);
      var result = '';

      if (this.isForceGrid && isScreen(widget)) {
        result += "  min-height: ".concat(widget.h, "px;\n");
      } else {
        /**
         * This has caused issues with templates and fixed in combination.
         * Thus we do not call getPostion for templates anymore.
         */
        result += "  min-height: 100%;\n";
      }

      return result;
    }
    /*********************************************************************
     * Auto
     *********************************************************************/

  }, {
    key: "getChildrenAutoHorizontal",
    value: function getChildrenAutoHorizontal(widget) {
      Logger$1.log(5, "CSSPosition.getChildrenAutoHorizontal() >" + widget.name);
      var result = '';
      var l = widget.layout;
      result += "  display: flex;\n";
      result += "  flex-direction: row;\n";
      result += "  align-items: ".concat(l.alignItems, ";\n");
      result += "  justify-content: ".concat(l.justifyContent, ";\n");

      if (isWrappedContainer(widget)) {
        result += "  flex-wrap: wrap;\n";
      }

      if (!isAutoLayoutSpaceBetween(widget)) {
        var gap = l.itemSpacing ? l.itemSpacing : 0;
        result += "  gap: ".concat(gap, "px;\n");
      }

      result += "  padding-left: ".concat(l.paddingLeft, "px;\n");
      result += "  padding-right: ".concat(l.paddingRight, "px;\n");
      result += "  padding-top: ".concat(l.paddingTop, "px;\n");
      result += "  padding-bottom: ".concat(l.paddingBottom, "px;\n");
      return result;
    }
  }, {
    key: "getParentAutoHorizontal",
    value: function getParentAutoHorizontal(widget) {
      Logger$1.log(5, "CSSPosition.getParentAutoHorizontal() > " + widget.name);
      var result = '';

      if (isFixedVertical(widget)) {
        result += "  height: ".concat(this.getCorrectedHeight(widget, true), ";\n");
      } else {
        result += "  min-height: ".concat(this.getCorrectedHeight(widget, true), ";\n");
      }

      if (hasMinMaxWdith(widget)) {
        result += this.getMinMaxWidth(widget, false);
        result += "  flex-grow: 1;\n";
      } else if (isFixedHorizontal(widget)) {
        if (isHugHorizontal(widget)) ; else {
          result += "  width: ".concat(this.getFixedWidth(widget), ";\n");
        }
      } else {
        if (isLayoutGrow(widget)) {
          result += "  flex-basis: ".concat(this.getFixedWidth(widget), "; \n");
          result += "  flex-grow: 1;\n";
        } else {
          result += "  width: ".concat(this.getResponsiveWidth(widget), ";\n");
        }
      }

      return result;
    }
  }, {
    key: "getChildrenAutoVertical",
    value: function getChildrenAutoVertical(widget) {
      Logger$1.log(3, "CSSPosition.getChildrenAutoVertical()" + widget.name);
      var result = '';
      var l = widget.layout;
      result += "  display: flex;\n";
      result += "  flex-direction: column;\n";
      result += "  align-items: ".concat(l.alignItems, ";\n");
      result += "  justify-content: ".concat(l.justifyContent, ";\n");
      var gap = l.itemSpacing ? l.itemSpacing : 0;
      result += "  gap: ".concat(gap, "px;\n");
      result += "  padding-left: ".concat(l.paddingLeft, "px;\n");
      result += "  padding-right: ".concat(l.paddingRight, "px;\n");
      result += "  padding-top: ".concat(l.paddingTop, "px;\n");
      result += "  padding-bottom: ".concat(l.paddingBottom, "px;\n");
      return result;
    }
  }, {
    key: "getParentAutoVertical",
    value: function getParentAutoVertical(widget) {
      Logger$1.log(3, "CSSPosition.getParentAutovertical()" + widget.name);
      var result = '';

      if (isLayoutGrow(widget)) {
        result += "  min-height: ".concat(this.getCorrectedHeight(widget, true), ";\n");
        result += "  flex-grow: 1;\n";
      } else {
        result += "  height: ".concat(this.getCorrectedHeight(widget, true), ";\n");
      }
      /**
       * In a vertical layout we might have a strech property. This translates to width 100%
       */


      if (isFixedHorizontal(widget)) {
        result += "  width: ".concat(this.getFixedWidth(widget), ";\n");
      } else {
        /**
         * If we have an auto alout, we use calc.
         */
        if (widget.layout && widget.layout.paddingLeft >= 0 && widget.layout.paddingRight >= 0) {
          var l = widget.layout;
          var paddingHorizontal = l.paddingLeft + l.paddingRight;
          result += "  width: calc(100% - ".concat(paddingHorizontal, "px);\n");
        } else {
          result += "  width: 100%;\n"; // result += `  box-sizing: border-box;\n` //  FIXME: this can also have some effect rows
        }
      }

      return result;
    }
    /*********************************************************************
     * Grid
     *********************************************************************/

  }, {
    key: "getChildrenGrid",
    value: function getChildrenGrid(widget) {
      Logger$1.log(3, "CSSPosition.getChildrenGrid()" + widget.name);
      var result = '';
      result += "  display: grid;\n";
      result += "  grid-template-columns: " + this.getGridColumnTracks(widget.w, widget.grid.columns, widget) + ";\n";
      result += "  grid-template-rows: " + this.getGridRowTracks(widget.h, widget.grid.rows, widget, true) + ";\n";
      return result;
    }
  }, {
    key: "getParentGrid",
    value: function getParentGrid(widget) {
      Logger$1.log(3, "CSSPosition.getParentGrid()" + widget.name);
      var result = '';
      result += "  grid-column-start: ".concat(widget.gridColumnStart + 1, ";\n");
      result += "  grid-column-end: ".concat(widget.gridColumnEnd + 1, ";\n");
      result += "  grid-row-start: ".concat(widget.gridRowStart + 1, ";\n");
      result += "  grid-row-end: ".concat(widget.gridRowEnd + 1, ";\n");

      if (widget.z) {
        result += "  z-index: ".concat(widget.z, ";\n");
      }

      return result;
    }
    /**
     * Returns the tracks for the grid. It makes sure the biggest element
     * is auto, so the grid is responsive... we could also use minmax()
     */

  }, {
    key: "getGridColumnTracks",
    value: function getGridColumnTracks(total, list) {
      var _this = this;

      Logger$1.log(6, "CSSPosition.getGridColumnTracks() > ", list);

      if (list) {
        /**
         * We get the max not fixed. Still we would
         * need to make sure we get the fixed stuff
         */
        var notFixed = list.filter(function (i) {
          return !i.fixed;
        });

        if (notFixed.length === 0) {
          notFixed = list;
        }

        var max = Math.max.apply(Math, _toConsumableArray(notFixed.map(function (i) {
          return i.l;
        })));
        return list.map(function (i) {
          /**
           * Fixed has priority. For rows we have always fixed...
           */
          if (i.fixed) {
            return i.l + "px";
          }
          /**
           * We might want several autos. This is very sensitive
           * to small changes in the editor. Therefore we give a
           * small error margin. Use minmax to prevent blowout
           * https://css-tricks.com/preventing-a-grid-blowout/
           */


          if (Math.abs(max - i.l) <= _this.gridAutoErrorThreshold) {
            // max === i.l

            /**
             * FIXME: If we have a min max , we use max-content, but only of there
             * is more than one column! Otherwise the resizing will not work
             * correctly!
             */
            // if (i.hasMinMax && list.length > 1) {
            // 	return "minmax(0,max-content)" //'1fr'
            // } else {
            //	return "minmax(0,1fr)" //'1fr'
            // }
            return "minmax(0,1fr)";
          }

          return Math.round(i.l * 1000 / total) / 10 + "%";
        }).join(" ");
      }
    }
  }, {
    key: "getGridRowTracks",
    value: function getGridRowTracks(total, rows) {
      Logger$1.log(6, "CSSPosition.getGridRowTracks() > ", rows);

      if (rows) {
        return rows.map(function (row, index) {
          /**
           * The last row will be free space, if it is
           * not fixed
           */
          if (!row.fixed && index === rows.length - 1) {
            return "1fr";
          }
          /**
           * Fixed rows or spacer (no element starts here, or first)
           * rows have a fixed size. Everything else is minmax
           */


          if (row.fixed || row.start.length === 0 || index === 0) {
            return Math.round(row.l) + "px";
          }

          return "minmax(".concat(Math.round(row.l), "px, auto)");
        }).join(" ");
      }
    }
    /*********************************************************************
     * Fixed Position
     *********************************************************************/

  }, {
    key: "getParentFixed",
    value: function getParentFixed(widget) {
      var result = "  position: fixed;\n";

      if (this.isFixedHorizontal(widget)) {
        result += "  width: ".concat(this.getFixedWidth(widget), ";\n");
      } else {
        result += "  width: ".concat(this.getResponsiveWidth(widget), ";\n");
      }

      if (isPinnedLeft(widget)) {
        result += "  left: ".concat(this.getPinnedLeft(widget), ";\n");
      } else if (isPinnedRight(widget)) {
        result += "  right: ".concat(this.getPinnedRight(widget), ";\n");
      } else {
        result += "  left: ".concat(this.getResponsiveLeft(widget), ";\n");
      }

      if (isPinnedDown(widget) && isPinnedUp(widget)) {
        result += "  bottom: ".concat(widget.bottom, "px;\n");
        result += "  top: ".concat(widget.y, "px;\n");
      } else if (isPinnedDown(widget)) {
        result += "  bottom: ".concat(widget.bottom, "px;\n");
        result += "  height: ".concat(this.getCorrectedHeight(widget), ";\n");
      } else {
        result += "  top: ".concat(widget.y, "px;\n");
        result += "  height: ".concat(this.getCorrectedHeight(widget), ";\n");
      }

      return result;
    }
    /*********************************************************************
     * Wrapped
     *********************************************************************/

  }, {
    key: "getParentWrap",
    value: function getParentWrap(widget) {
      Logger$1.log(3, "CSSPosition.getParentWrap()" + widget.name);
      var result = "";
      /**
       * For wrapped we just add margins
       */

      result += "  min-height: ".concat(this.getWrappedHeight(widget), ";\n");
      result += this.getWrappedWidth(widget);

      if (widget.wrapOffSetBottom && widget.wrapOffSetRight && !this.justifyContentInWrapper) {
        result += "  margin-bottom: ".concat(widget.wrapOffSetBottom, "px ;\n");
        result += "  margin-right: ".concat(widget.wrapOffSetRight, "px ;\n");
      } else {
        result += "  margin: ".concat(widget.wrapOffSetY, "px ").concat(widget.wrapOffSetX, "px;\n");
      }

      return result;
    }
  }, {
    key: "getChildrenWrap",
    value: function getChildrenWrap(widget) {
      Logger$1.log(4, "CSSPosition.getChildrenWrap() " + widget.name);
      var result = "";
      result += "  display: flex;\n";
      result += "  flex-direction: row;\n";
      result += "  flex-wrap: wrap;\n";
      result += "  align-items: flex-start;\n";
      result += "  align-content: flex-start;\n";
      /**
       * FIXME:This hsould be configured in the UI
       */

      if (this.justifyContentInWrapper) {
        result += "  justify-content: space-between;\n";
      }

      return result;
    }
  }, {
    key: "getWrappedHeight",
    value: function getWrappedHeight(widget) {
      return this.getCorrectedHeight(widget);
    }
  }, {
    key: "getWrappedWidth",
    value: function getWrappedWidth(widget) {
      Logger$1.log(5, "CSSPosition.getWrappedWidth() " + widget.name, hasMinMaxWdith(widget));

      if (hasMinMaxWdith(widget)) {
        return this.getMinMaxWidth(widget, true);
      }

      if (this.isFixedHorizontal(widget)) {
        return "  width: ".concat(this.getFixedWidth(widget), ";\n");
      }

      return "  width: ".concat(this.getResponsiveWidth(widget), ";\n");
    }
    /*********************************************************************
     * Repeater
     *********************************************************************/

  }, {
    key: "getParentRepeater",
    value: function getParentRepeater(widget) {
      Logger$1.log(5, "CSSPosition.getParentRepeater() " + widget.name);
      var result = "";

      if (isFixedVertical(widget)) {
        result += "  height: ".concat(this.getCorrectedHeight(widget, true), ";\n");
      } else {
        result += "  min-height: ".concat(this.getCorrectedHeight(widget, true), ";\n");
        result += "  height: 100%;\n";
      } // Take the border of the child out!


      result += "  width: calc(100% - ".concat(this.getLeftRightBorder(widget), "px);\n");
      return result;
    }
  }, {
    key: "getLeftRightBorder",
    value: function getLeftRightBorder(widget) {
      var result = 0;

      if (widget.style) {
        this.widthProperties.forEach(function (key) {
          if (widget.style[key]) {
            result += widget.style[key];
          }
        });
      }

      return result;
    }
  }, {
    key: "setChildrenRepeater",
    value: function setChildrenRepeater(widget) {
      Logger$1.log(5, "CSSPosition.setChildrenRepeater() " + widget.name);
      /**
       * First check of we have an auto layout
       */

      if (isLayoutAutoHorizontal(widget)) {
        return this.getChildrenAutoHorizontal(widget);
      }

      if (isLayoutAutovertical(widget)) {
        return this.getChildrenAutoVertical(widget);
      }
      /**
       * Otherwise return standard grid or row style
       */


      var result = "";

      if (isRepeaterGrid(widget)) {
        result += "  display: flex;\n";
        result += "  flex-direction: row;\n";
        result += "  flex-wrap: wrap;\n";
        result += "  align-items: flex-start;\n";
        result += "  align-content: flex-start;\n";

        if (isRepeaterAuto(widget)) {
          result += "  justify-content: space-between;\n";
        }
      } else {
        result += "  display: flex;\n";
        result += "  flex-direction: column;\n";
      }

      return result;
    }
    /*********************************************************************
     * Rows
     *********************************************************************/

  }, {
    key: "getChildrenRow",
    value: function getChildrenRow() {
      var result = "";
      result += "  display: flex;\n";
      result += "  flex-direction: column;\n";
      return result;
    }
  }, {
    key: "getParentRow",
    value: function getParentRow(widget) {
      Logger$1.log(5, "CSSPosition.getParentRow() " + widget.name, widget.props);
      var result = "";
      result += this.getParentRowHorizontal(widget);
      result += this.getParentRowVertical(widget);
      return result;
    }
  }, {
    key: "getParentRowVertical",
    value: function getParentRowVertical(widget) {
      var result = "";

      if (isFixedVertical(widget)) {
        result += "  height: ".concat(this.getCorrectedHeight(widget, true), ";\n");
      } else {
        result += "  min-height: ".concat(this.getCorrectedHeight(widget, true), ";\n");
      }

      result += "  margin-top: ".concat(this.getPinnedTop(widget), ";\n");
      return result;
    }
  }, {
    key: "getParentRowHorizontal",
    value: function getParentRowHorizontal(widget) {
      /**
       * Stronged constraint is left and right pinned!
       */
      if (this.isPinnedLeft(widget) && this.isPinnedRight(widget)) {
        return this.getParentRowPinnedBoth(widget);
      }
      /**
       * Second constraint is centered!
       */


      if (isCentered(widget)) {
        return this.getParentRowCenter(widget);
      }

      if (this.isPinnedLeft(widget)) {
        return this.getParentRowPinnedLeft(widget);
      }

      if (this.isPinnedRight(widget)) {
        return this.getParentRowPinneRight(widget);
      }
      /**
       * Default is more or less quant-ux standard
       */


      return this.getParentRowPinnedNone(widget);
    }
  }, {
    key: "getParentRowCenter",
    value: function getParentRowCenter(widget) {
      var result = '';

      if (hasMinMaxWdith(widget)) {
        result += this.getMinMaxWidth(widget, true);
      } else if (isFixedHorizontal(widget)) {
        result += "  width: ".concat(this.getFixedWidth(widget), ";\n");
      } else {
        result += "  width: ".concat(this.getResponsiveWidth(widget), ";\n");
      }

      result += "  margin-left: auto;\n";
      result += "  margin-right: auto;\n";
      return result;
    }
  }, {
    key: "getParentRowPinnedBoth",
    value: function getParentRowPinnedBoth(widget) {
      var result = "";
      result += "  margin-left: ".concat(this.getPinnedLeft(widget), ";\n");
      result += "  margin-right: ".concat(this.getPinnedRight(widget), ";\n");
      return result;
    }
  }, {
    key: "getParentRowPinnedLeft",
    value: function getParentRowPinnedLeft(widget) {
      var result = "";

      if (this.isFixedHorizontal(widget)) {
        result += "  width: ".concat(this.getFixedWidth(widget), ";\n");
        result += "  margin-left: ".concat(this.getPinnedLeft(widget), ";\n");
      } else {
        result += "  margin-right: ".concat(this.getResponsiveRight(widget), ";\n");
        result += "  margin-left: ".concat(this.getPinnedLeft(widget), ";\n");
      }

      return result;
    }
  }, {
    key: "getParentRowPinneRight",
    value: function getParentRowPinneRight(widget) {
      var result = "";
      /**
       * This is a tricky one.
       */

      if (this.isFixedHorizontal(widget)) {
        result += "  width: ".concat(this.getFixedWidth(widget), ";\n");
        result += "  margin-left: ".concat(this.getCalcLeft(widget), ";\n");
      } else {
        /**
         * TODO: can we use somehow a reposnive calculated left?
         */
        result += "  margin-left: ".concat(this.getResponsiveLeft(widget), ";\n");
        result += "  margin-right: ".concat(this.getPinnedRight(widget), ";\n");
      }

      return result;
    }
  }, {
    key: "getParentRowPinnedNone",
    value: function getParentRowPinnedNone(widget) {
      var result = "";
      /**
       * Nothing is pinned.
       * We are in a rowGrid, this means the widget is alone. Therefore
       * we can set the margin left and right and not the width.
       */

      if (this.isFixedHorizontal(widget)) {
        /**
         * FIXME: This branch should be dead. We catch this before!
         */
        if (isCentered(widget)) {
          result += "  width: ".concat(this.getFixedWidth(widget), ";\n");
          result += "  margin-left: auto;\n";
          result += "  margin-right: auto;\n";
        } else {
          result += "  width: ".concat(this.getFixedWidth(widget), ";\n");
          result += "  margin-left: ".concat(this.getResponsiveLeft(widget), ";\n");
        }
      } else if (hasMinMaxWdith(widget) && isCentered(widget)) {
        /**
         * If we have min max and center we will use minmax with relative width
         */
        result += this.getMinMaxWidth(widget, true);
        result += "  margin-left: auto;\n";
        result += "  margin-right: auto;\n";
      } else {
        result += "  margin-right: ".concat(this.getResponsiveRight(widget), ";\n");
        result += "  margin-left: ".concat(this.getResponsiveLeft(widget), ";\n");
      }

      return result;
    }
    /*********************************************************************
     * Design System
     *********************************************************************/

  }, {
    key: "getDesignSystemPosition",
    value: function getDesignSystemPosition(widget) {
      Logger$1.log(3, "CSSPosition.getDesignSystemPosition()" + widget.name, widget);
      var result = "";
      /**
       * ComponentSet are just placed as block or inline block. The child will
       * determine the size. This will happen the ComponenSetCSS.js file
       * TODO factor this out...
       */

      if (isComponentSet(widget)) {
        if (isBlock(widget)) {
          result += "  display:block;\n";
        } else {
          result += "  display:inline-block;\n";
        }
      } else {
        /**
         * For all other components we set (inline)grid or block,
         * with and height and a grid of needed-
         */
        if (this.isGrid(widget)) {
          if (isBlock(widget)) {
            result += "  display:grid;\n";
          } else {
            result += "  display:inline-grid;\n";
          }
        } else if (isBlock(widget)) {
          result += "  display:block;\n";
        } else {
          result += "  display:inline-block;\n";
        }
        /**
         * For wrapped we just add margins
         */


        if (isFixedHorizontal(widget)) {
          result += "  width: ".concat(this.getCorrectedWidth(widget), ";\n");
        } else if (hasMinMaxWdith(widget)) {
          result += this.getMinMaxWidth(widget, false);
        } else {
          result += "  width: auto;\n";
        }

        if (isFixedVertical(widget)) {
          result += "  height: ".concat(this.getCorrectedHeight(widget), ";\n");
        } else {
          result += "  min-height: ".concat(this.getCorrectedHeight(widget), ";\n");
        }

        if (hasChildren(widget)) {
          if (isLayoutGrid(widget)) {
            Logger$1.log(3, "CSSPosition.getComponentScreenPosition() > add grid" + widget.name);
            result += "  grid-template-columns: " + this.getGridColumnTracks(widget.w, widget.grid.columns, widget) + ";\n";
            result += "  grid-template-rows: " + this.getGridRowTracks(widget.h, widget.grid.rows, widget) + ";\n";
          } else {
            result += "  display: flex;\n";
            result += "  flex-direction: column;\n";
          }
        }
      }

      return result;
    }
  }, {
    key: "getMinMaxWidth",
    value: function getMinMaxWidth(widget) {
      var isWrapped = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var result = "";

      if (widget.style && widget.style.minWidth) {
        result += "  min-width: ".concat(widget.style.minWidth, "px;\n");
      }

      if (widget.style && widget.style.maxWidth) {
        result += "  max-width: ".concat(widget.style.maxWidth, "px;\n");
      }
      /**
       * We need to make sure that we also include the reponsive with,
       * to make it 'push' outwards
       */


      if (isWrapped) {
        result += "  width: ".concat(this.getResponsiveWidth(widget), ";\n");
      }

      return result;
    }
  }, {
    key: "isInlineBlock",
    value: function isInlineBlock(widget) {
      return widget.qtype !== 'qContainer';
    }
  }, {
    key: "isGrid",
    value: function isGrid(widget) {
      return isLayoutGrid(widget) && hasChildren(widget);
    }
    /*********************************************************************
     * Child of component screen
     *********************************************************************/

  }, {
    key: "getComponentScreenPosition",
    value: function getComponentScreenPosition(widget) {
      Logger$1.log(3, "CSSPosition.getComponentScreenPosition()" + widget.name);
      var result = "";
      /**
       * For wrapped we just add margins
       */

      result += "  height:100%;\n";
      result += "  width: 100%;\n";
      /**
       * FIXME: Add here check for
       */

      if (isLayoutGrid(widget)) {
        Logger$1.log(-1, "CSSPosition.getComponentScreenPosition() > add grid" + widget.name);
        result += "  display: grid;\n";
        result += "  grid-template-columns: " + this.getGridColumnTracks(widget.w, widget.grid.columns, widget) + ";\n";
        result += "  grid-template-rows: " + this.getGridRowTracks(widget.h, widget.grid.rows, widget) + ";\n";
      }

      return result;
    }
    /*********************************************************************
     * Position Helpers
     *********************************************************************/

  }, {
    key: "isPinnedLeft",
    value: function isPinnedLeft$1(widget) {
      return isPinnedLeft(widget);
    }
  }, {
    key: "isPinnedRight",
    value: function isPinnedRight$1(widget) {
      return isPinnedRight(widget);
    }
  }, {
    key: "getPinnedBottom",
    value: function getPinnedBottom(widget) {
      if (widget.parent) {
        var parent = widget.parent;
        var innerHeight = parent.children.map(function (c) {
          // grid has top
          if (c.top != undefined) {
            return c.h + c.top;
          }

          return c.h + c.y;
        }).reduce(function (a, b) {
          return a + b;
        }, 0);
        return Math.max(0, parent.h - innerHeight) + "px";
      }

      return "auto";
    }
  }, {
    key: "getFixedWidth",
    value: function getFixedWidth(widget) {
      if (isFullWidth(widget)) {
        return "100%";
      }

      return this.getCorrectedWidth(widget);
    }
  }, {
    key: "getFixedTop",
    value: function getFixedTop(widget) {
      return widget.y + "px";
    }
  }, {
    key: "getPinnedTop",
    value: function getPinnedTop(widget) {
      return widget.top + "px";
    }
  }, {
    key: "getCalcLeft",
    value: function getCalcLeft(widget) {
      if (widget.parent) {
        var right = widget.parent.w - (widget.x + widget.w);
        return "calc(100% - ".concat(widget.w + right, "px)");
      }

      return "0px";
    }
  }, {
    key: "getResponsiveLeft",
    value: function getResponsiveLeft(widget) {
      if (widget.parent) {
        return Math.round(widget.x * 100 / widget.parent.w) + "%";
      }

      return widget.x + "px";
    }
  }, {
    key: "getResponsiveRight",
    value: function getResponsiveRight(widget) {
      if (widget.parent) {
        var right = widget.parent.w - (widget.x + widget.w);
        return Math.round(right * 100 / widget.parent.w) + "%";
      }

      return widget.x + "px";
    }
  }, {
    key: "getPinnedLeft",
    value: function getPinnedLeft(widget) {
      return widget.x + "px";
    }
  }, {
    key: "getPinnedRight",
    value: function getPinnedRight(widget) {
      if (widget.parent) {
        if (widget.absX) {
          return widget.parent.w - (widget.absX + widget.w) + "px";
        } else {
          return widget.parent.w - (widget.x + widget.w) + "px";
        }
      }

      return "0px";
    }
  }, {
    key: "getResponsiveWidth",
    value: function getResponsiveWidth(widget) {
      if (widget.parent) {
        /**
         * What about border...
         */
        return Math.round(widget.w * 100 / widget.parent.w) + "%";
      }

      Logger$1.warn("CSSPosition.getResponsiveWidth() > No parent! " + widget.name);
      return "100%";
    }
  }, {
    key: "getFixedHeight",
    value: function getFixedHeight(widget) {
      return widget.h + "px";
    }
  }, {
    key: "getCorrectedHeight",
    value: function getCorrectedHeight(widget) {
      var isPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var h = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

      if (h < 0) {
        h = widget.h;
      }
      /**
       * when we are positioning, we only sustract
       * for certain widgets
       */


      if (isPosition && this.ignoreCorrectWidthAndHeigth.indexOf(widget.type) >= 0) {
        return h + "px";
      }

      this.heightProperties.forEach(function (key) {
        if (widget.style[key]) {
          h -= widget.style[key];
        }
      });
      /**
       * For auto layouts we have the padding in the layout
       */

      if (isLayoutAuto(widget)) {
        h -= widget.layout.paddingTop;
        h -= widget.layout.paddingBottom;
      }
      /**
       * For templated widgets, we need to also check for
       * template padings. Also check for '_padding' and so...
       */


      if (widget._template) {
        var template = widget._template;
        this.heightProperties.forEach(function (key) {
          if (template.style[key] && !widget.style[key] && !widget.style['_' + key]) {
            h -= template.style[key];
          }
        });
      }

      return h + "px";
    }
  }, {
    key: "getCorrectedWidth",
    value: function getCorrectedWidth(widget) {
      var isPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

      if (w < 0) {
        w = widget.w;
      }

      if (isPosition && this.ignoreCorrectWidthAndHeigth.indexOf(widget.type) >= 0) {
        return w + "px";
      }
      /**
       * For auto layouts we have the padding in the layout
       */


      if (isLayoutAuto(widget)) {
        w -= widget.layout.paddingLeft;
        w -= widget.layout.paddingRight;
      }

      this.widthProperties.forEach(function (key) {
        if (widget.style[key]) {
          w -= widget.style[key];
        }
      });
      return w + "px";
    }
  }, {
    key: "isFixedHorizontal",
    value: function isFixedHorizontal$1(widget) {
      return isFixedHorizontal(widget);
    }
  }, {
    key: "getSiblings",
    value: function getSiblings(widget) {
      if (widget.parent && widget.parent.children) {
        return widget.parent && widget.parent.children;
      }

      return [];
    }
  }]);

  return CSSPosition;
}();

var CSSFactory = /*#__PURE__*/function () {
  function CSSFactory() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var imagePrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    _classCallCheck(this, CSSFactory);

    Logger$1.log(4, 'CSSFactory.constructor() ', config);
    this.marginWhiteSpaceCorrect = 0;
    this.imagePrefix = imagePrefix;
    this.hoverEmbeddedLabel = false;
    this.responsive = {
      mobile: {
        min: 0,
        max: 400
      },
      tablet: {
        min: 401,
        max: 1000
      },
      desktop: {
        min: 1201,
        max: 1000000
      }
    };

    if (config.css) {
      this.prefix = config.css.prefix ? config.css.prefix : '';
    }

    if (config.responsive) {
      this.responsive = config.responsive;
    }

    if (config.css && config.css.hoverEmbeddedLabel) {
      this.hoverEmbeddedLabel = config.css.hoverEmbeddedLabel;
    }

    this.mapping = {
      "color": "color",
      "textAlign": "text-align",
      "fontFamily": "font-family",
      "fontSize": "font-size",
      "fontStyle": "font-style",
      "fontWeight": "font-weight",
      "letterSpacing": "letter-spacing",
      "lineHeight": "line-height",
      "lineHeightPX": "line-height",
      "textTransform": "text-transform",
      "border": "border",
      "borderWidth": "border-width",
      "borderStyle": "border-style",
      "borderColor": "border-color",
      "borderRadius": "border-radius",
      "borderLeft": "border-left",
      "borderRight": "border-right",
      "borderTop": "border-top",
      "borderBottom": "border-bottom",
      "borderBottomColor": "border-bottom-color",
      "borderTopColor": "border-top-color",
      "borderLeftColor": "border-left-color",
      "borderRightColor": "border-right-color",
      "borderBottomLeftRadius": "border-bottom-left-radius",
      "borderTopLeftRadius": "border-top-left-radius",
      "borderBottomRightRadius": "border-bottom-right-radius",
      "borderTopRightRadius": "border-top-right-radius",
      "borderBottomWidth": "border-bottom-width",
      "borderTopWidth": "border-top-width",
      "borderLeftWidth": "border-left-width",
      "borderRightWidth": "border-right-width",
      "borderTopStyle": "border-top-style",
      "borderBottomStyle": "border-bottom-style",
      "borderRightStyle": "border-left-style",
      "borderLeftStyle": "border-right-style",
      "paddingBottom": "padding-bottom",
      "paddingLeft": "padding-left",
      "paddingRight": "padding-right",
      "paddingTop": "padding-top",
      "padding": "padding",
      //"marginBottom" : "margin-bottom",
      //"marginLeft" : "margin-left",
      //"marginRight" : "margin-right",
      //"marginTop": "margin-top",
      "textDecoration": "text-decoration",
      "boxShadow": "box-shadow",
      "textShadow": "text-shadow",
      "opacity": "opacity",
      "cursor": "cursor"
    };
    this.paddingProperties = ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop", "padding"];
    this.borderProperties = ['borderWidth', 'border', 'borderRadius', 'boderColor', 'borderBottomColor', 'borderTopColor', 'borderLeftColor', 'borderRightColor', 'borderTopStyle', 'borderBottomStyle', 'borderRightStyle', 'borderLeftStyle', 'borderBottomWidth', 'borderTopWidth', 'borderLeftWidth', 'borderRightWidth', 'borderBottomLeftRadius', 'borderTopLeftRadius', 'borderBottomRightRadius', 'borderTopRightRadius'];
    this.borderColorProperties = ['borderBottomColor', 'borderTopColor', 'borderLeftColor', 'borderRightColor'];
    this.borderWidthProperties = ['borderBottomWidth', 'borderTopWidth', 'borderLeftWidth', 'borderRightWidth'];
    this.borderStyleProperties = ['borderTopStyle', 'borderBottomStyle', 'borderRightStyle', 'borderLeftStyle'];
    this.borderRadiusProperties = ['borderBottomLeftRadius', 'borderTopLeftRadius', 'borderBottomRightRadius', 'borderTopRightRadius'];
    this.textProperties = ['color', 'textDecoration', 'textAlign', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'lineHeightPX'];
    this.isPixel = {
      "borderBottomLeftRadius": true,
      "borderBottomRightRadius": true,
      "borderTopRightRadius": true,
      "borderTopLeftRadius": true,
      "borderBottomWidth": true,
      "borderLeftWidth": true,
      "borderTopWidth": true,
      "borderRightWidth": true,
      "paddingBottom": true,
      "paddingLeft": true,
      "paddingRight": true,
      "paddingTop": true,
      "fontSize": true,
      "letterSpacing": true,
      "lineHeightPX": true
    };
    this.easingMapping = {
      'easeInQuad': 'ease-in',
      'easeOutQuad': 'ease-out',
      'linear': 'linear',
      'easeInOutQuad': 'ease-in-out',
      'easeElasticIn': 'ease-in',
      'easeElasticOut': 'ease-out',
      'easeBounceIn': 'ease-in',
      'easeBounceOut': 'ease-out'
    };
    this.fontProperties = ['color', 'fontSize', 'fontWeight', 'textAlign', 'fontStyle', 'letterSpacing', 'lineHeight']; //this.isAlwaysFixedHorizontal = ['Switch', 'Stepper']

    this.widgetFactory = new CSSWidgetFactory(this);
    this.positionFactory = new CSSPosition(config, this);
  }

  _createClass(CSSFactory, [{
    key: "generate",
    value: function generate(model) {
      var _this = this;

      var start = new Date().getTime();
      var result = {};
      /**
       * Generate the template styles
       */

      model.templates.forEach(function (t) {
        if (t.style) {
          var style = {
            type: 'template',
            css: t.cssSelector,
            global: true,
            code: _this.getTemplateCSS(t, null, false)
          };
          result[t.id] = [style];
        }
      });
      /**
       * Generate styles for each screen. The templates styles
       * might here be reused!
       */

      model.screens.forEach(function (screen) {
        result[screen.id] = [];
        result[screen.id].push({
          type: 'screen',
          css: screen.cssSelector,
          global: false,
          code: _this.getCSS(screen)
        });
        screen.children.forEach(function (child) {
          _this.generateElement(child, result, screen);
        });
        screen.fixedChildren.forEach(function (child) {
          _this.generateElement(child, result, screen);
        });
      });
      /**
       * Add some normalizer styles
       */

      result['$NORMALIZE'] = [];
      result['$NORMALIZE'].push({
        type: 'screen',
        css: '',
        global: true,
        code: this.getGlobalStyles()
      });
      var end = new Date().getTime();
      Logger$1.log(1, 'CSSFactory.generate() > took ', end - start);
      return result;
    }
  }, {
    key: "getGlobalStyles",
    value: function getGlobalStyles() {
      var result = '';
      result += "body {\n  margin:0px;\n  font-family: 'Helvetica Neue', 'Helvetica', sans-serif;\n}\n\n";
      result += "div {\n  margin:0px;\n}\n\n";
      return result;
    }
  }, {
    key: "generateDesignSystemRoot",
    value: function generateDesignSystemRoot(node) {
      var _this2 = this;

      var result = {};
      var style = {
        type: 'template',
        css: node.cssSelector,
        global: true,
        code: this.getCSS(node, null, false)
      };
      result[node.id] = [style];

      if (node.children) {
        node.children.forEach(function (child) {
          _this2.generateElement(child, result, screen);
        });
      } // add something like inlibe block, and fexl with if no children
      // generate rest like usual


      return result;
    }
  }, {
    key: "generateElement",
    value: function generateElement(node, result, screen) {
      var _this3 = this;

      result[node.id] = [];
      result[node.id].push({
        type: 'widget',
        css: node.cssSelector,
        global: false,
        code: this.getCSS(node, screen),
        inherited: node.inherited,
        inheritedScreen: node.inheritedScreen
      });

      if (node.children) {
        node.children.forEach(function (child) {
          _this3.generateElement(child, result, screen);
        });
      }
    }
  }, {
    key: "getRaw",
    value: function getRaw(model, selectedWidgets) {
      var result = "";

      for (var i = 0; i < selectedWidgets.length; i++) {
        var id = selectedWidgets[i];
        var widget = model.widgets[id];

        if (widget) {
          result += this.getCSS(widget, null, false);
        } else {
          this.logger.warn("getRaw", "No widget with id > " + widget);
        }
      }

      return result;
    }
  }, {
    key: "getSelector",
    value: function getSelector(widget) {
      return widget.cssSelector;
    }
  }, {
    key: "getName",
    value: function getName(box) {
      var name = box.name.replace(/\s+/g, '_');

      if (box.inherited) {
        name += '_Master';
      }

      if (this.prefix) {
        name = "".concat(this.prefix, "_").concat(name);
      }

      return name;
    }
  }, {
    key: "getTemplateCSS",
    value: function getTemplateCSS(widget, screen) {
      var result = "";
      var style = widget.style;
      style = fixAutos(style, widget);
      var selector = this.getSelector(widget, screen);

      if (this.widgetFactory['getCSS_' + widget.type]) {
        result += this.widgetFactory['getCSS_' + widget.type](selector, widget.style, widget);
      } else {
        /**
         * Add normal css
         */
        result += selector + ' {\n';
        result += this.getRawStyle(style, widget);
        result += '}\n\n';

        if (widget.hover) {
          result += selector + ':hover {\n';
          result += '  transition: all 0.2s;\n';
          result += this.getRawStyle(widget.hover, widget);
          result += '}\n\n';
        }

        if (widget.focus) {
          result += selector + ':focus {\n';
          result += this.getRawStyle(widget.focus, widget);
          result += '}\n\n';
        }

        if (widget.error) {
          result += selector + ':invalid {\n';
          result += this.getRawStyle(widget.error, widget);
          result += '}\n\n';
        }

        if (widget.active) {
          result += selector + '.qux-active {\n';
          result += this.getRawStyle(widget.active, widget);
          result += '}\n\n';
        }

        if (isInputElement(widget)) {
          result += selector + '::placeholder {\n';
          result += "  color: ".concat(this.getPlaceHolderColor(style.color), ";\n");
          result += '}\n\n';
        }
      }

      return result;
    }
  }, {
    key: "getCSS",
    value: function getCSS(widget, screen) {
      var result = "";
      var style = widget.style;
      style = fixAutos(style, widget);
      var selector = this.getSelector(widget, screen);

      if (this.widgetFactory['getCSS_' + widget.type]) {
        result += this.widgetFactory['getCSS_' + widget.type](selector, widget.style, widget);
      } else if (widget.isCustomComponent) {
        /**
         * For custom components we just set the position!
         */
        result += selector + ' {\n';
        result += this.getPosition(widget);
        result += '}\n\n';
      } else {
        /**
         * Add normal css
         */
        result += selector + ' {\n';
        result += this.getRawStyle(style, widget);
        result += this.getPosition(widget);
        result += '}\n\n';

        if (widget.hover) {
          result += selector + ':hover {\n';
          result += '  transition: all 0.2s;\n';
          result += this.getRawStyle(widget.hover, widget);
          result += '}\n\n';
          /**
           * We want to functionality only for Figma
           */

          if (this.hoverEmbeddedLabel) {
            result += selector + ':hover .qux-common-label {\n';
            result += this.getStyleByKey(widget.hover, widget, this.textProperties);
            result += '}\n\n';
          }
        }

        if (widget.focus) {
          result += selector + ':focus {\n';
          result += this.getRawStyle(widget.focus, widget);
          result += '}\n\n';
        }

        if (widget.error) {
          result += selector + ':invalid {\n';
          result += this.getRawStyle(widget.error, widget);
          result += '}\n\n';
        }

        if (widget.active) {
          result += selector + '.qux-active {\n';
          result += this.getRawStyle(widget.active, widget);
          result += '}\n\n';
        }

        if (isInputElement(widget)) {
          result += selector + '::placeholder {\n';
          result += "  color: ".concat(this.getPlaceHolderColor(style.color), ";\n");
          result += '}\n\n';
        }
      }
      /**
       * Break points
       */


      result += this.getBreakpoints(selector, widget);
      /**
       * Animation
       */

      if (screen && screen.animation && screen.animation.ScreenLoaded) {
        var animation = screen.animation.ScreenLoaded;

        if (widget.id in animation.widgets) {
          var widgetAnimation = animation.widgets[widget.id];

          if (widgetAnimation) {
            result += this.getAnimation(widgetAnimation, selector, widget, screen);
          }
        }

        if (widget.isGroup && widget.groupId in animation.groups) {
          var groupAnimation = animation.groups[widget.groupId];

          if (groupAnimation) {
            result += this.getAnimation(groupAnimation, selector, widget, screen);
          }
        }
      }

      return result;
    }
  }, {
    key: "getBreakpoints",
    value: function getBreakpoints(selector, widget) {
      var result = '';

      if (widget.props.breakpoints) {
        Logger$1.log(-1, 'CSSFactory.getBreakpoints()', widget.name);
        var breakpoints = widget.props.breakpoints;
        /**
         * Assume at leats one is true
         */

        if (!breakpoints.mobile) {
          result += "@media only screen and (min-width: ".concat(this.responsive.mobile.min, "px) and (max-width: ").concat(this.responsive.mobile.max, "px) {\n");
          result += "  ".concat(selector, " {\n");
          result += '    display: none;\n';
          result += '  }\n';
          result += '}\n\n';
        }

        if (!breakpoints.tablet) {
          result += "@media only screen and (min-width: ".concat(this.responsive.tablet.min, "px) and (max-width: ").concat(this.responsive.tablet.max, "px) {\n");
          result += "  ".concat(selector, " {\n");
          result += '    display: none;\n';
          result += '  }\n';
          result += '}\n\n';
        }

        if (!breakpoints.desktop) {
          result += "@media only screen and (min-width: ".concat(this.responsive.desktop.min, "px) and (max-width: ").concat(this.responsive.desktop.max, "px) {\n");
          result += "  ".concat(selector, " {\n");
          result += '    display: none;\n';
          result += '  }\n';
          result += '}\n\n';
        }
      }

      return result;
    }
  }, {
    key: "getAnimation",
    value: function getAnimation(animation, selector, widget) {
      var result = '';
      var total = animation.delay + animation.duration;
      var delay = Math.round(animation.delay / total * 100);
      var animId = "".concat(widget.id, "-anim-load");
      var easing = animation.easing ? this.getEasing(animation.easing) : 'linear';

      if (animation.type === 'fadeIn') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { opacity:0; }\n';
        result += "  ".concat(delay, "% { opacity: 0;}\n");
        result += "  100% { opacity: 1;}\n";
        result += '}\n\n';
      }

      if (animation.type === 'fadeOut') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { opacity:1; }\n';
        result += "  ".concat(delay, "% { opacity: 1;}\n");
        result += "  100% { opacity: 0;}\n";
        result += '}\n\n';
      }

      if (animation.type === 'zoomIn') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { transform:scale(0, 0); transform-origin: 50% 50%;}\n';
        result += "  ".concat(delay, "% { transform:scale(0, 0); transform-origin: 50% 50%;}\n");
        result += "  100% { transform:scale(1, 1); transform-origin: 50% 50%;}\n";
        result += '}\n\n';
      }

      if (animation.type === 'fadeOut') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { opacity:1; }\n';
        result += "  ".concat(delay, "% {opacity: 1;}\n");
        result += "  100% {opacity: 0;}\n";
        result += '}\n\n';
      }

      if (animation.type === 'growRight') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { transform:scale(0, 1); transform-origin: top left;}\n';
        result += "  ".concat(delay, "% { transform:scale(0, 1); transform-origin: top left;}\n");
        result += "  100% { transform:scale(1, 1); transform-origin: top left;}\n";
        result += '}\n\n';
      }

      if (animation.type === 'growLeft') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { transform:scale(0, 1); transform-origin: top right;}\n';
        result += "  ".concat(delay, "% {transform:scale(0, 1); transform-origin: top right;}\n");
        result += "  100% { transform:scale(1, 1); transform-origin: top right;}\n";
        result += '}\n\n';
      }

      if (animation.type === 'growUp') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { transform:scale(1, 0); transform-origin: bottom right;}\n';
        result += "  ".concat(delay, "% {transform:scale(1, 0); transform-origin: bottom right;}\n");
        result += "  100% { transform:scale(1, 1); transform-origin: bottom right;}\n";
        result += '}\n\n';
      }

      if (animation.type === 'growDown') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { transform:scale(1, 0); transform-origin: top right;}\n';
        result += "  ".concat(delay, "% {transform:scale(1, 0); transform-origin: top right;}\n");
        result += "  100% { transform:scale(1, 1); transform-origin: top right;}\n";
        result += '}\n\n';
      }
      /**
       * Use calc(100vh) and so?
       */


      if (animation.type === 'slideRight') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { transform: translateX(-1000px) }\n';
        result += "  ".concat(delay, "% { transform: translateX(-1000px); }\n");
        result += "  100% { transform:translateX(0); }\n";
        result += '}\n\n';
      }

      if (animation.type === 'slideLeft') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { transform: translateX(1000px) }\n';
        result += "  ".concat(delay, "% { transform: translateX(1000px); }\n");
        result += "  100% {transform:translateX(0); }\n";
        result += '}\n\n';
      }

      if (animation.type === 'slideDown') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { transform: translateY(-1000px) }\n';
        result += "  ".concat(delay, "% { transform: translateY(-1000px); }\n");
        result += "  100% {transform:translateY(0); }\n";
        result += '}\n\n';
      }

      if (animation.type === 'slideUp') {
        result += "@keyframes ".concat(animId, "{\n");
        result += '  0% { transform: translateY(1000px) }\n';
        result += "  ".concat(delay, "% { transform: translateY(1000px); }\n");
        result += "  100% {transform:translateY(0); }\n";
        result += '}\n\n';
      }

      result += selector + ' {\n';
      result += "  animation-fill-mode: forwards;\n";
      result += "  animation-name:".concat(animId, ";\n");
      result += "  animation-duration:".concat(total, "ms;\n");
      result += "  animation-timing-function:".concat(easing, ";\n");
      result += '}\n\n';
      return result;
    }
  }, {
    key: "getEasing",
    value: function getEasing(easing) {
      return this.easingMapping[easing];
    }
    /*********************************************************************
     * Position
     *********************************************************************/

  }, {
    key: "getPosition",
    value: function getPosition(widget) {
      /**
       * Default is grid, bit it will also do the row stuff.
       */
      return this.positionFactory.getPostion(widget);
    }
  }, {
    key: "getStyleByKey",
    value: function getStyleByKey(style, widget, keys) {
      var _this4 = this;

      var result = '';
      keys.forEach(function (key) {
        if (style[key] !== undefined && style[key] !== null) {
          var value = style[key];
          result += '  ' + _this4.getKey(key) + ': ' + _this4.getValue(key, value) + ';\n';
        }
      });
      return result;
    }
  }, {
    key: "getRawStyle",
    value: function getRawStyle(style, widget) {
      var result = this.getStyleByKey(style, widget, Object.keys(this.mapping));
      result += this.getBackGround(style, widget);
      return result;
    }
  }, {
    key: "getPlaceHolderColor",
    value: function getPlaceHolderColor(color) {
      if (color) {
        var c = fromString(color);
        c.a = 0.5;
        return toString(c);
      }

      return 'rgba(0, 0, 0, 0.5)';
    }
  }, {
    key: "getBackGround",
    value: function getBackGround(style, widget) {
      var result = '';

      if (style.background && style.overlay !== true) {
        if (style.background.colors) {
          if (style.background.radial) {
            var background = style.background;
            var gradient = background.colors.map(function (color) {
              return color.c + ' ' + color.p + '%';
            }).join(', ');
            result += "  background: radial-gradient(circle, ".concat(gradient, ");\n");
          } else {
            var _background = style.background;

            var _gradient = "(" + _background.direction + "deg";

            for (var i = 0; i < _background.colors.length; i++) {
              var color = _background.colors[i];
              _gradient += "," + color.c + " " + color.p + "% ";
            }

            _gradient += ")";
            result += "  background: linear-gradient".concat(_gradient, ";\n");
          }
        } else {
          result += "  background-color: ".concat(style.background, ";\n");
        }
      }

      if (style.backgroundColor) {
        result += "  background-color: ".concat(style.backgroundColor, ";\n");
      }

      if (style.backgroundImage && style.backgroundImage.url) {
        if (style.backgroundImage.url.indexOf('http') === 0) {
          result += "  background-image: url(".concat(style.backgroundImage.url, ");\n");
        } else {
          result += "  background-image: url(".concat(this.imagePrefix, "/").concat(style.backgroundImage.url, ");\n");
        }

        if (style.backgroundSize) {
          result += "  background-size: ".concat(style.backgroundSize, "%;\n");
        } else {
          result += "  background-size: 100%;\n";
        }

        if (style.backgroundPosition) {
          var pos = style.backgroundPosition;
          var w = Math.round(pos.left * widget.w);
          var h = Math.round(pos.top * widget.h);
          result += "  background-position: ".concat(w, "px ").concat(h, "px;\n");
        } else {
          result += "  background-position: 0px 0px;\n";
        }

        result += "  background-repeat: no-repeat;\n";
      }

      return result;
    }
  }, {
    key: "getKey",
    value: function getKey(key) {
      return this.mapping[key];
    }
  }, {
    key: "getValue",
    value: function getValue(key, value) {
      var result = '';

      if (key === 'fontFamily') {
        result += this.escapeFontFamily(value);
      } else if (this.isPixel[key]) {
        result += value + 'px';
      } else if (key === "boxShadow") {
        result = value.h + "px " + value.v + "px " + value.b + "px " + value.s + "px " + value.c;

        if (value.i) {
          result += 'inset';
        }
      } else if (key === 'textShadow') {
        result = value.h + "px " + value.v + "px " + value.b + "px " + value.c;
      } else {
        result += value;
      }

      return result;
    }
  }, {
    key: "escapeFontFamily",
    value: function escapeFontFamily(value) {
      return value.split(',').map(function (f) {
        if (f.indexOf(' ') >= 0) {
          return '"' + f + '"';
        }

        return f;
      }).join(', ');
    }
  }, {
    key: "clone",
    value: function clone(obj) {
      if (!obj) {
        return null;
      }

      var _s = JSON.stringify(obj);

      return JSON.parse(_s);
    }
  }, {
    key: "getFixedHeight",
    value: function getFixedHeight(widget) {
      return this.positionFactory.getFixedHeight(widget);
    }
  }, {
    key: "getWrappedWidth",
    value: function getWrappedWidth(widget) {
      return this.positionFactory.getWrappedWidth(widget);
    }
  }, {
    key: "getCorrectedHeight",
    value: function getCorrectedHeight(widget) {
      var isPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var h = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      return this.positionFactory.getCorrectedHeight(widget, isPosition, h);
    }
  }, {
    key: "getCorrectedWidth",
    value: function getCorrectedWidth(widget) {
      var isPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var w = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      return this.positionFactory.getCorrectedWidth(widget, isPosition, w);
    }
  }, {
    key: "hasAllwaysFixedHeight",
    value: function hasAllwaysFixedHeight(widget) {
      return widget.type === 'Icon';
    }
  }]);

  return CSSFactory;
}();

var CSSWriter = /*#__PURE__*/function () {
  function CSSWriter() {
    _classCallCheck(this, CSSWriter);

    this.styleElement = {};
  }

  _createClass(CSSWriter, [{
    key: "write",
    value: function write(css) {
      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
      var head = document.head || document.getElementsByTagName('head')[0];

      if (this.styleElement[id]) {
        /**
         * This can lead to errors when the hash is changed.
         * This is edge case for development (I hope)
         */
        Logger$1.log(5, 'CSSWriter.write() > Clean up old');
        head.removeChild(this.styleElement[id]);
      }

      var style = document.createElement('style');
      style.type = 'text/css';
      style.qux = true;
      style.setAttribute('qux', id);
      style.appendChild(document.createTextNode(css));
      head.appendChild(style);
      this.styleElement[id] = style;
    }
  }]);

  return CSSWriter;
}();

var CSSWriter$1 = new CSSWriter();

/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString$1 (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: process.env.NODE_ENV !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: process.env.NODE_ENV !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (process.env.NODE_ENV !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (process.env.NODE_ENV !== 'production' && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (process.env.NODE_ENV !== 'production' && customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (process.env.NODE_ENV !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (process.env.NODE_ENV !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (process.env.NODE_ENV !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      process.env.NODE_ENV !== 'production' && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    process.env.NODE_ENV !== 'production' && assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (process.env.NODE_ENV !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && process.env.NODE_ENV !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (process.env.NODE_ENV !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (process.env.NODE_ENV !== 'production') {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (process.env.NODE_ENV !== 'production') {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (process.env.NODE_ENV !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (
    process.env.NODE_ENV !== 'production' &&
    // skip validation for weex recycle-list child component props
    !(false)
  ) {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (process.env.NODE_ENV !== 'production' && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i], vm);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  var haveExpectedTypes = expectedTypes.some(function (t) { return t; });
  if (!valid && haveExpectedTypes) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;

function assertType (value, type, vm) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    try {
      valid = value instanceof type;
    } catch (e) {
      warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
      valid = false;
    }
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

var functionTypeCheckRE = /^\s*function (\w+)/;

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(functionTypeCheckRE);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  // check if we need to specify expected value
  if (
    expectedTypes.length === 1 &&
    isExplicable(expectedType) &&
    isExplicable(typeof value) &&
    !isBoolean(expectedType, receivedType)
  ) {
    message += " with value " + (styleValue(value, expectedType));
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + (styleValue(value, receivedType)) + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

var EXPLICABLE_TYPES = ['string', 'number', 'boolean'];
function isExplicable (value) {
  return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (process.env.NODE_ENV !== 'production') {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (process.env.NODE_ENV !== 'production') {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals. ' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

if (process.env.NODE_ENV !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      process.env.NODE_ENV !== 'production' && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (process.env.NODE_ENV !== 'production') {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (process.env.NODE_ENV !== 'production') {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    var vnode = res && res[0];
    return res && (
      !vnode ||
      (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) // #9658, #10391
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallbackRender,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) {
    // scoped slot
    props = props || {};
    if (bindObject) {
      if (process.env.NODE_ENV !== 'production' && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes =
      scopedSlotFn(props) ||
      (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  } else {
    nodes =
      this.$slots[name] ||
      (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
  return eventKeyCode === undefined
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      process.env.NODE_ENV !== 'production' && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (process.env.NODE_ENV !== 'production' && key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString$1;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (process.env.NODE_ENV !== 'production') {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (process.env.NODE_ENV !== 'production') {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  // we know it's MountedComponentVNode but flow doesn't
  vnode,
  // activeInstance in lifecycle state
  parent
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    process.env.NODE_ENV !== 'production' && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (process.env.NODE_ENV !== 'production' &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if (process.env.NODE_ENV !== 'production' && isDef(data) && isDef(data.nativeOn) && data.tag !== 'component') {
        warn(
          ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
          context
        );
      }
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      process.env.NODE_ENV !== 'production' && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                process.env.NODE_ENV !== 'production'
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (process.env.NODE_ENV !== 'production') {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||
    (!newScopedSlots && vm.$scopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (process.env.NODE_ENV !== 'production') {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (process.env.NODE_ENV !== 'production' && !config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = process.env.NODE_ENV !== 'production'
    ? expOrFn.toString()
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      process.env.NODE_ENV !== 'production' && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        var info = "callback for watcher \"" + (this.expression) + "\"";
        invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {
      defineReactive$$1(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    process.env.NODE_ENV !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (process.env.NODE_ENV !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      process.env.NODE_ENV !== 'production' && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (process.env.NODE_ENV !== 'production' && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (process.env.NODE_ENV !== 'production') {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      } else if (vm.$options.methods && key in vm.$options.methods) {
        warn(("The computed property \"" + key + "\" is already defined as a method."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (process.env.NODE_ENV !== 'production' &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (process.env.NODE_ENV !== 'production') {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (process.env.NODE_ENV !== 'production') {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      var info = "callback for immediate watcher \"" + (watcher.expression) + "\"";
      pushTarget();
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
      popTarget();
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (process.env.NODE_ENV !== 'production' &&
    !(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (process.env.NODE_ENV !== 'production' && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (process.env.NODE_ENV !== 'production' && type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */





function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var entry = cache[key];
    if (entry) {
      var name = entry.name;
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var entry = cache[key];
  if (entry && (!current || entry.tag !== current.tag)) {
    entry.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  methods: {
    cacheVNode: function cacheVNode() {
      var ref = this;
      var cache = ref.cache;
      var keys = ref.keys;
      var vnodeToCache = ref.vnodeToCache;
      var keyToCache = ref.keyToCache;
      if (vnodeToCache) {
        var tag = vnodeToCache.tag;
        var componentInstance = vnodeToCache.componentInstance;
        var componentOptions = vnodeToCache.componentOptions;
        cache[keyToCache] = {
          name: getComponentName(componentOptions),
          tag: tag,
          componentInstance: componentInstance,
        };
        keys.push(keyToCache);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
        this.vnodeToCache = null;
      }
    }
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.cacheVNode();
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  updated: function updated () {
    this.cacheVNode();
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        // delay setting the cache until update
        this.vnodeToCache = vnode;
        this.keyToCache = key;
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (process.env.NODE_ENV !== 'production') {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.14';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      process.env.NODE_ENV !== 'production' && warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key &&
    a.asyncFactory === b.asyncFactory && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (process.env.NODE_ENV !== 'production') {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (process.env.NODE_ENV !== 'production' && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (process.env.NODE_ENV !== 'production') {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    if (process.env.NODE_ENV !== 'production') {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (process.env.NODE_ENV !== 'production') {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    if (process.env.NODE_ENV !== 'production') {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (process.env.NODE_ENV !== 'production' &&
                typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (process.env.NODE_ENV !== 'production' &&
                typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (process.env.NODE_ENV !== 'production') {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur, vnode.data.pre);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value, isInPre) {
  if (isInPre || el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

/*  */

/*  */

/*  */

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecessary `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    process.env.NODE_ENV !== 'production' && warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (process.env.NODE_ENV !== 'production' && children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (process.env.NODE_ENV !== 'production' &&
      mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (process.env.NODE_ENV !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (
        process.env.NODE_ENV !== 'production' &&
        process.env.NODE_ENV !== 'test'
      ) {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (process.env.NODE_ENV !== 'production' &&
      process.env.NODE_ENV !== 'test' &&
      config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

var JSONPath = /*#__PURE__*/function () {
  function JSONPath() {
    _classCallCheck(this, JSONPath);
  }

  _createClass(JSONPath, [{
    key: "get",
    value: function get(data, path) {
      if (data != null && data != undefined) {
        if (data[path] !== null && data[path] !== undefined) {
          return data[path];
        }

        if (path.indexOf('.') >= 0 || path.indexOf('[') >= 0) {
          var elements = this.getJsonPath(path);
          var current = elements.shift();
          var value = data[current];

          while (current != null && current != undefined && value !== null && value != undefined && elements.length > 0) {
            current = elements.shift();
            value = value[current];
          }

          return value;
        }
      }
    }
  }, {
    key: "set",
    value: function set(data, path, value) {
      //console.debug('JSONPath.set()', path, '>' + value + '<')
      var elements = this.getJsonPath(path);
      var current = elements.shift();
      var node = data;
      var i = 0;

      while (current !== null && current !== undefined && i < 100) {
        i++;

        if (elements.length > 0) {
          if (!node[current]) {
            // FIXME: This looks like a bug! This should be always true?? But be careful because of
            // the repeater...
            if (elements[0].toLowerCase) {
              this._set(node, current, {});
            } else {
              this._set(node, current, []);
            }
          }

          node = node[current];
          current = elements.shift();
        } else {
          this._set(node, current, value);
        }
      }

      return data;
    }
  }, {
    key: "_set",
    value: function _set(node, key, value) {
      /**
       * Not sure how this works for new props. Maybe we have to use VUE here
       */
      //node[key] =value
      Vue.set(node, key, value);
    }
  }, {
    key: "getJsonPath",
    value: function getJsonPath(path) {
      return path.split('.').flatMap(function (p) {
        if (p.indexOf('[') >= 0) {
          var parts = p.split('[');

          if (parts.length == 2) {
            var key = parts[0];
            var index = parts[1].substring(0, parts[1].length - 1) * 1;
            return [key, index];
          }

          return p.substring(1, p.length - 1) * 1;
        }

        return p;
      });
    }
  }, {
    key: "has",
    value: function has(data, path) {
      //console.debug('JSONPath.has()', path, data)
      if (data != null && data != undefined) {
        if (data[path] != null && data[path] != null) {
          return true;
        }

        if (path.indexOf('.') >= 0 || path.indexOf('[') >= 0) {
          var elements = this.getJsonPath(path);
          var current = elements.shift();
          var value = data[current];

          while (current != null && current != undefined && value !== null && value != undefined && elements.length > 0) {
            current = elements.shift();
            value = value[current];
          }

          return value !== undefined && value !== null;
        }

        return false;
      }

      return false;
    }
  }]);

  return JSONPath;
}();

var JSONPath$1 = new JSONPath();

var AbstractAction = /*#__PURE__*/function () {
  function AbstractAction() {
    _classCallCheck(this, AbstractAction);
  }

  _createClass(AbstractAction, [{
    key: "_get",
    value: function _get(url) {
      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return new Promise(function (resolve, reject) {
        fetch(url, {
          method: 'get',
          headers: headers
        }).then(function (res) {
          if (res.status === 200) {
            res.json().then(function (j) {
              Logger$1.log(6, '_get', 'exit ');
              resolve(j);
            });
          } else {
            reject(res);
          }
        }).catch(function (err) {
          reject(err);
        });
      });
    }
  }, {
    key: "_post",
    value: function _post(url, data) {
      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return new Promise(function (resolve, reject) {
        fetch(url, {
          method: 'post',
          body: JSON.stringify(data),
          headers: headers
        }).then(function (res) {
          if (res.status === 200) {
            res.json().then(function (j) {
              Logger$1.log(6, 'post', 'exit ');
              resolve(j);
            });
          } else {
            reject(res);
          }
        }).catch(function (err) {
          reject(err);
        });
      });
    }
  }]);

  return AbstractAction;
}();

var Mail = /*#__PURE__*/function (_AbstractAction) {
  _inherits(Mail, _AbstractAction);

  var _super = _createSuper(Mail);

  function Mail() {
    var _this;

    _classCallCheck(this, Mail);

    _this = _super.call(this);
    _this.luisaUrl = 'https://api.luisa.cloud';
    return _this;
  }

  _createClass(Mail, [{
    key: "execute",
    value: async function execute(step, viewModel) {
      Logger$1.log(-1, 'Mail.execute() > enter ', step);
      var config = step.config;

      try {
        var data = viewModel;

        if (config.inputVariable) {
          Logger$1.log(-1, 'ActionEngine.execute() > crop view model ', config.inputVariable);
          data = JSONPath$1.get(viewModel, config.inputVariable);
        }

        var response = await this._post("".concat(this.luisaUrl, "/api/actions/").concat(config.appId, "/mail2team"), {
          body: config.body,
          subject: config.subject,
          data: data
        }, {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        });

        if (response) {
          Logger$1.log(-1, 'ActionEngine.execute() > exit ', response);
        }
      } catch (err) {
        Logger$1.warn('ActionEngine.execute() > Error ', err);
      }
    }
  }]);

  return Mail;
}(AbstractAction);

var defaultInline = function defaultInline(type, node) {
  return "<span>type: ".concat(type, " id: ").concat(node.data.target.sys.id, "</span>");
};

var ContentFul = /*#__PURE__*/function (_AbstractAction) {
  _inherits(ContentFul, _AbstractAction);

  var _super = _createSuper(ContentFul);

  function ContentFul() {
    var _this$renderMark, _this$renderNode;

    var _this;

    _classCallCheck(this, ContentFul);

    _this = _super.call(this);
    _this.contentfulUrl = 'https://cdn.contentful.com';
    _this.renderMark = (_this$renderMark = {}, _defineProperty(_this$renderMark, 'bold', function bold(text) {
      return "<b>".concat(text, "</b>");
    }), _defineProperty(_this$renderMark, 'italic', function italic(text) {
      return "<i>".concat(text, "</i>");
    }), _defineProperty(_this$renderMark, 'underline', function underline(text) {
      return "<u>".concat(text, "</u>");
    }), _defineProperty(_this$renderMark, 'code', function code(text) {
      return "<code>".concat(text, "</code>");
    }), _this$renderMark);
    _this.renderNode = (_this$renderNode = {}, _defineProperty(_this$renderNode, 'paragraph', function paragraph(node, next) {
      return "<p>".concat(next(node.content), "</p>");
    }), _defineProperty(_this$renderNode, 'heading-1', function heading1(node, next) {
      return "<h1>".concat(next(node.content), "</h1>");
    }), _defineProperty(_this$renderNode, 'heading-2', function heading2(node, next) {
      return "<h2>".concat(next(node.content), "</h2>");
    }), _defineProperty(_this$renderNode, 'heading-3', function heading3(node, next) {
      return "<h3>".concat(next(node.content), "</h3>");
    }), _defineProperty(_this$renderNode, 'heading-4', function heading4(node, next) {
      return "<h4>".concat(next(node.content), "</h4>");
    }), _defineProperty(_this$renderNode, 'heading-5', function heading5(node, next) {
      return "<h5>".concat(next(node.content), "</h5>");
    }), _defineProperty(_this$renderNode, 'heading-6', function heading6(node, next) {
      return "<h6>".concat(next(node.content), "</h6>");
    }), _defineProperty(_this$renderNode, 'embedded-entry-block', function embeddedEntryBlock(node, next) {
      return "<div>".concat(next(node.content), "</div>");
    }), _defineProperty(_this$renderNode, 'unordered-list', function unorderedList(node, next) {
      return "<ul>".concat(next(node.content), "</ul>");
    }), _defineProperty(_this$renderNode, 'ordered-list', function orderedList(node, next) {
      return "<ol>".concat(next(node.content), "</ol>");
    }), _defineProperty(_this$renderNode, 'list-item', function listItem(node, next) {
      return "<li>".concat(next(node.content), "</li>");
    }), _defineProperty(_this$renderNode, 'blockquote', function blockquote(node, next) {
      return "<blockquote>".concat(next(node.content), "</blockquote>");
    }), _defineProperty(_this$renderNode, 'hr', function hr() {
      return '<hr/>';
    }), _defineProperty(_this$renderNode, 'asset-hyperlink', function assetHyperlink(node) {
      return defaultInline('asset-hyperlink', node);
    }), _defineProperty(_this$renderNode, 'entry-hyperlink', function entryHyperlink(node) {
      return defaultInline('entry-hyperlink', node);
    }), _defineProperty(_this$renderNode, 'embedded-entry-inline', function embeddedEntryInline(node) {
      return defaultInline('embedded-entry-inline', node);
    }), _defineProperty(_this$renderNode, 'hyperlink', function hyperlink(node, next) {
      return "<a href=\"".concat(node.data.uri, "\">").concat(next(node.content), "</a>");
    }), _this$renderNode);
    return _this;
  }

  _createClass(ContentFul, [{
    key: "execute",
    value: async function execute(step, viewModel) {
      var _this2 = this;

      Logger$1.log(-1, 'ContentFul.execute() > enter ');
      var config = step.config;

      if (config.outputVariable) {
        try {
          var documents = await this._get("".concat(this.contentfulUrl, "/spaces/").concat(config.spaceId, "/environments/").concat(config.envId, "/entries?access_token=").concat(config.apiToken));

          if (documents) {
            var assets = await this._get("".concat(this.contentfulUrl, "/spaces/").concat(config.spaceId, "/environments/").concat(config.envId, "/assets?access_token=").concat(config.apiToken));
            var items = documents.items.map(function (i) {
              return _this2.mapContentFul(i, assets);
            });
            JSONPath$1.set(viewModel, config.outputVariable, items);
            Logger$1.log(-1, 'ContentFul.execute() > exit ', items);
          }
        } catch (err) {
          Logger$1.warn('ContentFul.execute() > Error ', err);
        }
      }
    }
  }, {
    key: "mapContentFul",
    value: function mapContentFul(item, assets) {
      var fields = item.fields;
      var result = {};

      for (var key in fields) {
        var value = fields[key];

        if (value.nodeType === 'document') {
          result[key] = {
            type: 'richtext',
            value: this.documentToHtmlString(value) // get rid of dependency

          };
        } else if (value.sys && value.sys.linkType === 'Asset') {
          (function () {
            var assetId = value.sys.id;
            var asset = assets.items.find(function (a) {
              return a.sys.id === assetId;
            });

            if (asset.fields.file) {
              result[key] = {
                url: 'https:' + asset.fields.file.url
              };
            }
          })();
        } else {
          result[key] = value;
        }
      }

      if (!result.id) {
        result.id = item.sys.id;
      }

      return result;
    }
    /**
     * Serialize a Contentful Rich Text `document` to an html string.
     */

  }, {
    key: "documentToHtmlString",
    value: function documentToHtmlString(richTextDocument) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!richTextDocument || !richTextDocument.content) {
        return '';
      }

      return this.nodeListToHtmlString(richTextDocument.content, {
        renderNode: Object.assign({}, this.defaultNodeRenderers, options.renderNode),
        renderMark: Object.assign({}, this.defaultMarkRenderers, options.renderMark)
      });
    }
  }, {
    key: "nodeListToHtmlString",
    value: function nodeListToHtmlString(nodes) {
      var _this3 = this;

      return nodes.map(function (node) {
        return _this3.nodeToHtmlString(node);
      }).join('');
    }
  }, {
    key: "nodeToHtmlString",
    value: function nodeToHtmlString(node) {
      var _this4 = this;

      if (this.isText(node)) {
        var nodeValue = this.escape(node.value);

        if (node.marks.length > 0) {
          return node.marks.reduce(function (value, mark) {
            if (!_this4.renderMark[mark.type]) {
              return value;
            }

            return _this4.renderMark[mark.type](value);
          }, nodeValue);
        }

        return nodeValue;
      } else {
        var nextNode = function nextNode(nodes) {
          return _this4.nodeListToHtmlString(nodes);
        };

        if (!node.nodeType || !this.renderNode[node.nodeType]) {
          return '';
        }

        return this.renderNode[node.nodeType](node, nextNode);
      }
    }
  }, {
    key: "isText",
    value: function isText(node) {
      return node.nodeType === 'text';
    }
  }, {
    key: "escape",
    value: function escape(s) {
      return s;
    }
  }]);

  return ContentFul;
}(AbstractAction);

var ActionEngine = /*#__PURE__*/function () {
  function ActionEngine(actions) {
    _classCallCheck(this, ActionEngine);

    Logger$1.log(-1, 'ActionEngine()', actions);
    this.actions = actions;
    this.engines = {
      'mail': new Mail(),
      'contentful': new ContentFul()
    };
  }

  _createClass(ActionEngine, [{
    key: "hasAction",
    value: function hasAction(actionName) {
      var filter = this.actions.filter(function (a) {
        return a.id === actionName;
      });
      return filter.length === 1;
    }
  }, {
    key: "executeAction",
    value: async function executeAction(app, actionName, viewModel) {
      var _this = this;

      Logger$1.log(-1, 'ActionEngine.executeAction()', actionName, viewModel);

      try {
        var action = this.actions.find(function (a) {
          return a.id === actionName;
        });

        if (action && action.steps) {
          action.steps.forEach(async function (step) {
            await _this.executeStep(step, viewModel, actionName);
          });
        } else {
          Logger$1.warn('ActionEngine.executeAction() > No action with id', actionName);
        }
      } catch (err) {
        Logger$1.error('ActionEngine.executeAction() > Error during execution', err);
      }
    }
  }, {
    key: "executeStep",
    value: async function executeStep(step, viewModel, actionName) {
      if (this.engines[step.type]) {
        await this.engines[step.type].execute(step, viewModel);
      } else {
        Logger$1.error('ActionEngine.executeStep() > No method for step', 'execute_' + step.type, actionName);
      }
    }
  }]);

  return ActionEngine;
}();

var FontWriter = /*#__PURE__*/function () {
  function FontWriter() {
    _classCallCheck(this, FontWriter);

    this.fontElement = {};
    this.defaultFontFamilies = {
      'Helvetica Neue,Helvetica,Arial,sans-serif': true,
      'Arial, sans-serif': true,
      'Comic Sans MS, cursive, sans-serif': true,
      'Impact, Charcoal, sans-serif': true,
      'Times New Roman, Times, serif': true,
      'Courier New, Courier, monospace': true,
      '"Palatino Linotype", "Book Antiqua", Palatino, serif': true,
      'Georgia, serif': true,
      'Roboto': true
    };
  }
  /**
   * https://developers.google.com/fonts/docs/getting_started
   */


  _createClass(FontWriter, [{
    key: "write",
    value: function write(model, config) {
      Logger$1.log(1, 'FontWriter.write() > enter');
      var fonts = this.getCustomFonts(model);

      if (config.loadFonts) {
        this.writeImportStatements(fonts);
      } else {
        this.showImportWarning(fonts);
      }
    }
  }, {
    key: "showImportWarning",
    value: function showImportWarning(fonts) {
      if (Object.keys(fonts).length > 0) {
        Logger$1.warn('Vue-Low-Code: Please add the following font imports:');
      }

      for (var font in fonts) {
        var name = font.replace(', sans-serif', "");
        name = font.replace(/\s+/g, "+");
        Logger$1.warn("   <style>@import url('https://fonts.googleapis.com/css2?family=".concat(name, "&display=swap');</style>"));
      }
    }
  }, {
    key: "writeImportStatements",
    value: function writeImportStatements(fonts) {
      var head = document.head || document.getElementsByTagName('head')[0];

      for (var font in fonts) {
        /**
         * We make here a request for each font, because if one font fails, it would crash
         * the entire request...
         */
        if (this.fontElement[font]) {
          Logger$1.log(5, 'FontWriter.write() > Clean up old');
          head.removeChild(this.fontElement[font]);
        }

        var name = font.replace(', sans-serif', "");
        name = name.replace(/\s+/g, "+");
        var css = "@import url('https://fonts.googleapis.com/css2?family=".concat(name, "&display=swap');");
        var style = document.createElement('style');
        style.type = 'text/css';
        style.appendChild(document.createTextNode(css));
        head.appendChild(style);
        this.fontElement[font] = style;
      }
    }
  }, {
    key: "getFontImportStatement",
    value: function getFontImportStatement(fonts) {
      var imports = [];

      for (var font in fonts) {
        var name = font.replace(/\s+/g, "+"); //let weight = fonts[font].map(w => `0,${w}`).join(';')

        imports.push("family=".concat(name));
      }

      return "@import url('https://fonts.googleapis.com/css2?".concat(imports.join('&'), "&display=swap');");
    }
  }, {
    key: "getCustomFonts",
    value: function getCustomFonts(model) {
      var _this = this;

      Logger$1.log(3, 'FontWriter.getCustomFonts() > enter');
      var fonts = {};
      Object.values(model.widgets).forEach(function (w) {
        if (w.style.fontFamily) {
          var family = w.style.fontFamily;

          if (!_this.defaultFontFamilies[family]) {
            if (!fonts[family]) {
              fonts[family] = [];
            }

            fonts[family].push(w.style.fontWeight);
          }
        }
      });
      return fonts;
    }
  }]);

  return FontWriter;
}();

var FontWriter$1 = new FontWriter();

var FigmaService = /*#__PURE__*/function () {
  function FigmaService(key) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, FigmaService);

    this.setAccessKey(key);
    this.baseURL = 'https://api.figma.com/v1/';
    this.vectorTypes = ['LINE', 'ELLIPSE', 'VECTOR'];
    this.buttonTypes = ['RECTANGLE', 'TEXT', 'FRAME', 'GROUP', 'INSTANCE', 'COMPONENT', 'VARIANT_COMPONENT', 'COMPONENT_SET'];
    this.ignoredTypes = []; // ['GROUP', 'INSTANCE']

    this.allAsVecor = false;
    this.max_ids = 50;
    this.pluginId = '858477504263032980';
    this.downloadVectors = true;
    this.imageScaleFactor = 2;
    this.throttleRequestThreshold = 10;
    this.throttleRequestTimeout = 1000;
    this.pinnRight = false;
    this.errors = [];
    this.autoLineHeightAsNormal = true;
    this.defaultFontFamily = 'Helvetica Neue,Helvetica,Arial,sans-serif';

    if (config.figma) {
      if (config.figma.throttleRequestThreshold) {
        this.throttleRequestThreshold = config.figma.throttleRequestThreshold;
      }

      if (config.figma.throttleRequestTimeout) {
        this.throttleRequestTimeout = config.figma.throttleRequestTimeout;
      }

      if (config.figma.throttleBatchSize) {
        this.max_ids = config.figma.throttleBatchSize;
      }

      if (config.figma.pinnRight) {
        this.pinnRight = config.figma.pinnRight;
      }

      if (config.figma.downloadVectors === false) {
        this.downloadVectors = false;
      }

      if (config.figma.defaultFontFamily !== '') {
        this.defaultFontFamily = config.figma.defaultFontFamily;
      }
    }

    if (config.css && config.css.autoLineHeightAsNormal === false) {
      Logger$1.log(-1, 'FigmaService.constructor () > Auto Line === 150%');
      this.autoLineHeightAsNormal = false;
    }

    this.figmaAlignMapping = {
      MIN: 'flex-start',
      CENTER: 'center',
      MAX: 'flex-end',
      SPACE_BETWEEN: 'space-between'
    }; // https://www.figma.com/plugin-docs/api/Trigger/

    this.figmaAnimationTypeMapping = {
      'ON_CLICK': 'click',
      'ON_HOVER': 'hover',
      'MOUSE_LEAVE': 'mouseleave',
      'MOUSE_ENTER': 'mouseenter',
      "MOUSE_UP": 'mouseup',
      "MOUSE_DOWN": "mousedown"
    };
    this.figmaAnimationEasingMapping = {};
  }

  _createClass(FigmaService, [{
    key: "setImageScaleFactor",
    value: function setImageScaleFactor(factor) {
      this.imageScaleFactor = factor;
      return this;
    }
  }, {
    key: "setAccessKey",
    value: function setAccessKey(key) {
      this.key = key;
      return this;
    }
  }, {
    key: "setDownloadVectors",
    value: function setDownloadVectors(value) {
      this.downloadVectors = value;
      return this;
    }
  }, {
    key: "setBackgroundImages",
    value: function setBackgroundImages(app) {
      var _this = this;

      Logger$1.log('FigmaService.setBackgroundImages()');
      Object.values(app.screens).forEach(function (screen) {
        return _this.setBackgroundImage(screen);
      });
      Object.values(app.widgets).forEach(function (widget) {
        return _this.setBackgroundImage(widget);
      });
      return app;
    }
  }, {
    key: "setBackgroundImage",
    value: function setBackgroundImage(element) {
      if (element.props.figmaImage) {
        element.style.backgroundImage = {
          url: element.props.figmaImage
        };
      }
    }
  }, {
    key: "_createDefaultHeader",
    value: function _createDefaultHeader() {
      var headers = new Headers({
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-Figma-Token': this.key
      });
      return headers;
    }
  }, {
    key: "getRaw",
    value: async function getRaw(key) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        var url = _this2.baseURL + 'files/' + key + '?geometry=paths&plugin_data=' + _this2.pluginId;
        fetch(url, {
          method: 'get',
          credentials: "same-origin",
          headers: _this2._createDefaultHeader()
        }).then(function (resp) {
          resp.json().then(function (json) {
            try {
              resolve(json);
            } catch (e) {
              Logger$1.error('FigmaService.getRaw() > Error', e);
              resolve(null);
            }
          });
        }, function (err) {
          reject(err);
        });
      });
    }
  }, {
    key: "getPages",
    value: function getPages(fModel) {
      Logger$1.log(-1, 'getPages() > enter');
      var pages = [];
      var fDoc = fModel.document;

      if (fDoc.children) {
        fDoc.children.forEach(function (page) {
          pages.push({
            id: page.id,
            value: page.id,
            label: page.name
          });
        });
      }

      Logger$1.log(-1, 'getPages() > exit', pages);
      return pages;
    }
  }, {
    key: "get",
    value: async function get(key) {
      var _this3 = this;

      var importChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var allAsVecor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var selectedPages = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      this.allAsVecor = allAsVecor;
      return new Promise(function (resolve, reject) {
        var url = _this3.baseURL + 'files/' + key + '?geometry=paths&plugin_data=' + _this3.pluginId;
        fetch(url, {
          method: 'get',
          credentials: "same-origin",
          headers: _this3._createDefaultHeader()
        }).then(function (resp) {
          resp.json().then(function (json) {
            try {
              var app = _this3.parse(key, json, importChildren, selectedPages);

              resolve(app);
            } catch (e) {
              Logger$1.error('FigmaService.get() > Error', e);
              resolve(null);
            }
          });
        }, function (err) {
          reject(err);
        });
      });
    }
  }, {
    key: "getImages",
    value: function getImages(key, ids) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        /**
         * Get in double resolution
         */
        var url = _this4.baseURL + 'images/' + key + "?format=png&scale=".concat(_this4.imageScaleFactor, "&ids=") + ids;
        fetch(url, {
          method: 'get',
          credentials: "same-origin",
          headers: _this4._createDefaultHeader()
        }).then(function (resp) {
          resp.json().then(function (json) {
            try {
              resolve(json);
            } catch (err) {
              Logger$1.error('FigmaService.getImages() > Error', err);
              reject(err);
            }
          });
        }, function (err) {
          reject(err);
        });
      });
    }
  }, {
    key: "parse",
    value: async function parse(id, fModel) {
      var _this5 = this;

      var importChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var selectedPages = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      Logger$1.log(3, 'FigmaService.parse() > enter importChildren:' + importChildren, fModel);
      this.errors = [];
      var model = this.createApp(id, fModel);
      var fDoc = fModel.document; // add some lookup maps for speedy lookups later

      fModel._elementsById = {};
      fModel._elementsToWidgets = {};

      if (fDoc.children) {
        fDoc.children.forEach(function (page) {
          if (selectedPages.length === 0 || selectedPages.indexOf(page.name) >= 0) {
            Logger$1.log(-1, 'FigmaService.parse() > parse page:' + page.name);

            if (page.children) {
              page.children.forEach(function (child) {
                if (!_this5.isInvisible(child)) {
                  if (_this5.isFrame(child)) {
                    _this5.parseScreen(child, model, fModel, importChildren, page);
                  }

                  if (_this5.isComponet(child) || _this5.isComponentSet(child)) {
                    _this5.parseComponent(child, model, fModel, importChildren, page);
                  }
                }
              });
            }
          }
        });
      }
      /**
       * Set varients for designlets
       */


      this.setVarientComponents(model, fModel);
      /**
       * Fix the lines that are until now with figma ids
       */

      this.setLineTos(model, fModel);
      /**
       * now find the dynamic components
       */

      this.setDynamicComponents(model, fModel);
      /**
       * Get download images for all
       */

      await this.addBackgroundImages(id, model, importChildren);
      /**
       * TODO Add groups?
       */

      return model;
    }
  }, {
    key: "setDynamicComponents",
    value: function setDynamicComponents(qModel, fModel) {
      var _this6 = this;

      Logger$1.log(2, 'FigmaService.setDynamicComponents() > enter');
      /**
       * 1) Check all component lines
       *
       * 2) Take the source
       *
       * 3) Check of teh target is a componnt
       *
       * 5) Find out of the target is in a componentSet
       *
       * 5) If so, make it a dynamic component, including references of the
       */

      Object.values(qModel.widgets).forEach(function (qWidget) {
        if (qWidget.fimgaTransitionNodeID && qWidget.figmaType === 'INSTANCE') {
          var target = fModel._elementsById[qWidget.fimgaTransitionNodeID];

          if (target && target._parent) {
            var parent = target._parent;

            if (parent.type === 'COMPONENT_SET' && parent.children) {
              qWidget.type = _this6.getDynamicType(parent);
              qWidget.props.dynamicChildren = [];
              qWidget.props.dynamicLines = [];
              var parentWidgetId = fModel._elementsToWidgets[parent.id];
              qWidget.props.dynamicParent = parentWidgetId;
              /**
               * Check if the children are all the same, so we can set the animation type to transform...
               */

              parent.children.forEach(function (fChild) {
                var childId = fModel._elementsToWidgets[fChild.id];

                if (childId) {
                  var qChild = qModel.widgets[childId];
                  qWidget.props.dynamicChildren.push(childId);

                  if (fChild.id === qWidget.figmaComponentId) {
                    qWidget.props.dynamicStart = childId;
                  }

                  var figmaLines = _this6.parseFigmaAnitions(qChild.props.figmaAnimation);

                  if (figmaLines && figmaLines.length > 0) {
                    figmaLines.forEach(function (fLine) {
                      var targetId = fModel._elementsToWidgets[fLine.figmaTo];

                      if (targetId) {
                        console.debug('dynamic line', fLine.event, fLine.animation);
                        qWidget.props.dynamicLines.push({
                          from: childId,
                          to: targetId,
                          duration: fLine.duration,
                          animation: fLine.animation,
                          event: fLine.event
                        });
                      }
                    });
                  } else if (fChild.transitionNodeID) {
                    var targetId = fModel._elementsToWidgets[fChild.transitionNodeID];
                    qWidget.props.dynamicLines.push({
                      from: childId,
                      to: targetId,
                      duration: fChild.transitionDuration,
                      animation: 'none',
                      event: 'click'
                    });
                  }
                }
              });
              Logger$1.log(3, 'FigmaService.setDynamicComponents() > ' + qWidget.name, qWidget.props.dynamicStart, qWidget.props.dynamicChildren);
              Logger$1.log(3, 'FigmaService.setDynamicComponents() > ' + qWidget.name, qWidget.props.dynamicLines, qWidget.props.dynamicParent);
            }
          }
        }
      });
    }
  }, {
    key: "parseFigmaAnitions",
    value: function parseFigmaAnitions(figmaAnimations) {
      var _this7 = this;

      if (figmaAnimations) {
        var lines = figmaAnimations.map(function (anim) {
          var line = {};
          line.animation = 'none';
          line.duration = 200;

          if (anim.trigger && anim.action) {
            var trigger = anim.trigger.type;
            var action = anim.action;

            if (_this7.figmaAnimationTypeMapping[trigger]) {
              line.event = _this7.figmaAnimationTypeMapping[trigger];
            }

            line.figmaTo = action.destinationId;
            line.figmaFrom = '';

            if (action.transition) {
              var transition = action.transition;

              if (transition.type === 'SMART_ANIMATE') {
                line.animation = 'transform';
              }

              if (transition.easing && _this7.figmaAnimationEasingMapping[transition.easing]) {
                line.easing = _this7.figmaAnimationEasingMapping[transition.easing];
              }

              line.duration = Math.round(transition.duration * 1000);
            } //console.debug(JSON.stringify(anim), JSON.stringify(line))


            return line;
          }
        });
        return lines;
      }

      return null;
    }
  }, {
    key: "getDynamicType",
    value: function getDynamicType(fComponentSet) {
      Logger$1.log(3, 'FigmaService.getDynamicType()', fComponentSet.name);
      return 'DynamicContainer';
    }
    /**
     * Set for each instance the id to the parent. Why??
     */

  }, {
    key: "setVarientComponents",
    value: function setVarientComponents(qModel) {
      var _this8 = this;

      // console.debug('setInstanceComponents')

      /**
       * Mark all elements of a variant as a component for the
       * design lets
       */
      var varientComponents = {};
      Object.values(qModel.widgets).forEach(function (widget) {
        var parent = qModel.widgets[widget.parentId];

        if (parent && parent.figmaType === 'COMPONENT_SET') {
          widget.props.isComponet = true;
          widget.props.isVaraint = true;
          widget.variant = _this8.parseVariant(widget.name);

          if (!varientComponents[widget.parentId]) {
            varientComponents[widget.parentId] = [];
          }

          varientComponents[widget.parentId].push(widget);
          /**
           * Give a better na,e other wise css will fail
           */

          widget.name = parent.name + '-' + Object.values(widget.variant).join('-');
        }
      });
    }
  }, {
    key: "parseVariant",
    value: function parseVariant(str) {
      var result = {};
      /**
       * Figma somehpw changed the name of the varient...
       */

      if (str.indexOf('-') >= 0) {
        str.split('-').map(function (s) {
          return s.split('=');
        }).filter(function (pair) {
          return pair.length > 1;
        }).forEach(function (pair) {
          return result[pair[0].trim()] = pair[1].trim();
        });
      } else {
        str.split(',').map(function (s) {
          return s.split('=');
        }).filter(function (pair) {
          return pair.length > 1;
        }).forEach(function (pair) {
          return result[pair[0].trim()] = pair[1].trim();
        });
      }

      Logger$1.log(2, 'FigmaService.addBackgroundImages() > parseVariant', str, result);
      return result;
    }
  }, {
    key: "getParentVarientComponent",
    value: function getParentVarientComponent(widget, widgetsByFigmaID, qModel) {
      var parent = widgetsByFigmaID[widget.figmaComponentId];

      while (parent && parent.figmaType !== 'VARIANT_COMPONENT') {
        parent = qModel.widgets[parent.parentId];
      }

      return parent;
    }
  }, {
    key: "setLineTos",
    value: function setLineTos(model) {
      var widgetMapping = {};
      Object.values(model.widgets).forEach(function (w) {
        widgetMapping[w.figmaId] = w.id;
      });
      var screenMapping = {};
      Object.values(model.screens).forEach(function (s) {
        screenMapping[s.figmaId] = s.id;
      });
      Object.values(model.lines).forEach(function (line) {
        line.from = widgetMapping[line.figmaFrom];

        if (screenMapping[line.figmaTo]) {
          line.to = screenMapping[line.figmaTo];
        }

        if (widgetMapping[line.figmaTo]) {
          line.to = widgetMapping[line.figmaTo];
          line.isComponentLine = true;
        }
      });
    }
  }, {
    key: "addBackgroundImages",
    value: async function addBackgroundImages(id, model, importChildren) {
      var _this9 = this;

      Logger$1.log(1, 'FigmaService.addBackgroundImages() > importChildren', importChildren);

      if (this.downloadVectors) {
        var vectorWidgets = this.getElementsWithBackgroundIMage(model, importChildren);

        if (vectorWidgets.length > 0) {
          Logger$1.log(-1, 'FigmaService.addBackgroundImages() > vectors', vectorWidgets.length);
          var batches = this.getChunks(vectorWidgets, this.max_ids);
          var promisses = batches.map(function (batch, i) {
            return _this9.addBackgroundImagesBatch(id, batch, i, batches.length);
          });
          await Promise.all(promisses);
        }
      } else {
        Logger$1.log(3, 'FigmaService.addBackgroundImages() > Skip');
      }

      Logger$1.log(3, 'FigmaService.addBackgroundImages() > exit');
    }
  }, {
    key: "getElementsWithBackgroundIMage",
    value: function getElementsWithBackgroundIMage(model, importChildren) {
      if (importChildren) {
        return Object.values(model.widgets).filter(function (widget) {
          return widget.props.isVector || widget.hasBackgroundImage;
        });
      } else {
        return Object.values(model.screens);
      }
    }
  }, {
    key: "addBackgroundImagesBatch",
    value: async function addBackgroundImagesBatch(id, batch, i, totalNumberOfBatches) {
      var _this10 = this;

      Logger$1.log(1, 'FigmaService.addBackgroundImagesBatch() > start', i);
      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          var vectorWidgetIds = batch.map(function (w) {
            return w.figmaId;
          }).join(',');

          _this10.getImages(id, vectorWidgetIds).then(function (imageResponse) {
            if (imageResponse.err === null) {
              Logger$1.log(3, 'FigmaService.addBackgroundImagesBatch () > end', i);
              var images = imageResponse.images;
              batch.forEach(function (w) {
                var image = images[w.figmaId];

                if (image) {
                  w.props.figmaImage = image;
                } else {
                  Logger$1.error('FigmaService.addBackgroundImagesBatch() > Cannot get image for ', w);

                  _this10.errors.push({
                    type: 'ImageGetError',
                    data: w
                  });
                }

                resolve(batch);
              });
            } else {
              Logger$1.error('FigmaService.addBackgroundImagesBatch () > Could not get images', imageResponse);
              reject(imageResponse.err);
            }
          }, function (err) {
            Logger$1.error('FigmaService.addBackgroundImagesBatch() > Could not get images', err);
            reject(err);
          });
        }, _this10.getImageTimeout(i, totalNumberOfBatches));
      });
    }
  }, {
    key: "getImageTimeout",
    value: function getImageTimeout(i, totalNumberOfBatches) {
      if (totalNumberOfBatches > this.throttleRequestThreshold) {
        Logger$1.warn("igmaService.getImageTimeout () > Throttle requests. Delay request ".concat(i, " by ").concat(i * this.throttleRequestTimeout, " ms"));
        return i * this.throttleRequestTimeout;
      }

      return 0;
    }
  }, {
    key: "getChunks",
    value: function getChunks(array, size) {
      var result = [];

      for (var i = 0; i < array.length; i += size) {
        var chunk = array.slice(i, i + size);
        result.push(chunk);
      }

      return result;
    }
  }, {
    key: "parseComponent",
    value: function parseComponent(fElement, qModel, fModel, importChildren, page) {
      Logger$1.log(3, 'FigmaService.parseComponent()', fElement.name);
      /**
       * We create a wrapper screen!
       */

      var pos = this.getPosition(fElement);
      var qScreen = {
        id: 's' + this.getUUID(qModel),
        figmaId: fElement.id,
        pageName: page.name,
        name: fElement.name + 'Wrapper',
        isComponentScreen: true,
        type: 'Screen',
        x: pos.x,
        y: pos.y,
        w: pos.w,
        h: pos.h,
        props: {},
        children: [],
        style: {
          background: 'transparent'
        }
      };
      qModel.screens[qScreen.id] = qScreen;
      this.getPluginData(fElement, qScreen, fModel);
      this.parseElement(fElement, qScreen, fElement, qModel, fModel, qScreen.id);
    }
  }, {
    key: "parseScreen",
    value: function parseScreen(fScreen, model, fModel, importChildren, page) {
      var _this11 = this;

      Logger$1.log(3, 'FigmaService.parseScreen()', fScreen.name);
      var pos = this.getPosition(fScreen);
      var qScreen = {
        id: 's' + this.getUUID(model),
        figmaId: fScreen.id,
        pageName: page.name,
        name: fScreen.name,
        type: 'Screen',
        x: pos.x,
        y: pos.y,
        w: pos.w,
        h: pos.h,
        props: {},
        children: [],
        layout: {},
        style: this.getStyle(fScreen)
      };
      qScreen = this.getLayout(fScreen, qScreen);
      this.getPluginData(fScreen, qScreen, fModel);

      if (fScreen.children) {
        fScreen.children.forEach(function (child) {
          child._parent = fScreen;

          _this11.parseElement(child, qScreen, fScreen, model, fModel, qScreen.id);
        });
      }
      /**
       * Or check prototypeDevice
       */


      model.screenSize.w = model.screenSize.w === -1 ? pos.w : Math.max(model.screenSize.w, pos.w);
      model.screenSize.h = model.screenSize.h === -1 ? pos.h : Math.max(model.screenSize.h, pos.h);
      model.screens[qScreen.id] = qScreen;
      Logger$1.log(4, 'FigmaService.parseScreen() exit ', fScreen.name, qScreen.id);
      return qScreen;
    }
  }, {
    key: "parseElement",
    value: function parseElement(element, qScreen, fScreen, model, fModel, qParentId) {
      var _this12 = this;

      Logger$1.log(5, 'FigmaService.parseElement() > enter: ' + element.name, element.type);
      var widget = null;

      if (!this.isIgnored(element) && !this.isInvisible(element)) {
        var pos = this.getPosition(element);
        var qID = 'w' + this.getUUID(model);
        widget = {
          id: qID,
          parentId: qParentId,
          name: this.getFigmaName(element, qID),
          type: this.getType(element),
          figmaId: element.id,
          figmaType: element.type,
          figmaComponentId: this.getFigmaComponentId(element),
          fimgaTransitionNodeID: element.transitionNodeID,
          x: pos.x,
          y: pos.y,
          w: pos.w,
          h: pos.h,
          layout: {},
          z: this.getZ(element, model)
        };
        widget.style = this.getStyle(element, widget);
        widget.props = this.getProps(element, widget);
        widget.has = this.getHas(element, widget);
        widget = this.getPluginData(element, widget, fModel);
        widget = this.getLayout(element, widget);
        fModel._elementsById[element.id] = element;
        fModel._elementsToWidgets[element.id] = qID;
        model.widgets[widget.id] = widget;
        qScreen.children.push(widget.id);
        /**
         * Update the parent id, so we can have the correct hierachy
         */

        qParentId = widget.id;
      } else {
        Logger$1.log(4, 'FigmaService.parseElement() >Ignore: ' + element.name, element.type);
        /**
         * What if we have defined the callbacks and on a compomemt?
         */
      }
      /**
       * Go down recursive...
       */


      if (element.children) {
        /**
         * We do not go down on vector elements and hidden elements.
         */
        if (!this.isVector(element) && !this.isInvisible(element) && !this.isCustomVector(element)) {
          element.children.forEach(function (child) {
            if (child.visible !== false) {
              child._parent = element;
              Logger$1.log(3, 'FigmaService.parseElement() > go recursive', element);

              _this12.parseElement(child, qScreen, fScreen, model, fModel, qParentId);
            }
          });
        } else {
          Logger$1.log(6, 'FigmaService.parseElement() > No recursive: ' + element.name, element.type);
        }
      }

      this.addTempLine(element, model, widget);
      return widget;
    }
  }, {
    key: "getFigmaComponentId",
    value: function getFigmaComponentId(fElement) {
      if (fElement.type === 'INSTANCE') {
        return fElement.componentId;
      }

      if (fElement.id.indexOf('I') === 0) {
        var parts = fElement.id.split(';');

        if (parts.length === 2) {
          return parts[1];
        }
      }
    }
  }, {
    key: "getFigmaName",
    value: function getFigmaName(element, qID) {
      /**
       * FIXME: Check if teh name is tool long or has spaces or shit...
       */
      var name = element.name;

      if (name.length > 50) {
        name = qID;
      }

      return name.replace(/#/g, '').replace(/\//g, '-').replace(/&/g, '').replace(/,/g, '-');
    }
  }, {
    key: "addTempLine",
    value: function addTempLine(fElement, model, widget) {
      Logger$1.log(4, 'FigmaService.addLine() > enter', fElement.name, 'transition :' + fElement.transitionNodeID, fElement);

      if (fElement.transitionNodeID) {
        var clickChild = this.getFirstNoIgnoredChild(fElement);
        Logger$1.log(6, 'addLine() >  : ', fElement.name, clickChild);
        var line = {
          id: 'l' + this.getUUID(model),
          from: null,
          to: null,
          figmaFrom: clickChild.id,
          figmaTo: fElement.transitionNodeID,
          points: [],
          event: "click",
          animation: "",
          duration: fElement.transitionDuration
        };

        if (widget && widget.props.figmaAnimation) ;

        model.lines[line.id] = line;
      }
    }
  }, {
    key: "getFirstNoIgnoredChild",
    value: function getFirstNoIgnoredChild(element) {
      /**
       * We do not render instance wrappers, so we take the first child.
       */
      if (this.isIgnored(element) && element.children.length > 0) {
        Logger$1.log(5, 'FigmaService.getFirstNoIgnoredChild() >  take child ', element.name);
        return this.getFirstNoIgnoredChild(element.children[0]);
      }

      return element;
    }
  }, {
    key: "getPluginData",
    value: function getPluginData(element, widget) {
      if (element.pluginData && element.pluginData[this.pluginId]) {
        var pluginData = element.pluginData[this.pluginId];

        if (pluginData.quxType) {
          Logger$1.log(-1, 'FigmaService.getPluginData() > quxType : ', pluginData.quxType, element.name);
          widget.type = pluginData.quxType;
          widget.props.placeholder = true;
          /**
           * SmartContainer has a subType
           */

          if (pluginData.quxType === 'SmartContainer' && pluginData.quxSmartContainerType) {
            Logger$1.log(2, 'FigmaService.getPluginData() > quxSmartContainerType : ', pluginData.quxSmartContainerType, element.name);
            widget.type = pluginData.quxSmartContainerType;
            widget.smartContainerType = pluginData.quxSmartContainerType;
          }

          if (pluginData.quxType === 'Image' && pluginData.quxDataBindingDefault) {
            widget.type = 'UploadPreview';
          }

          if (pluginData.quxType === 'Vector') {
            widget.props.isVector = true;
          }
        }

        if (pluginData.quxDataValue) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxDataValue: ', pluginData.quxDataValue, element.name);
          widget.props.dataValue = pluginData.quxDataValue;
        }

        if (pluginData.quxLinkUrl) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxLinkUrl: ', pluginData.quxLinkUrl, element.name);
          widget.props.url = pluginData.quxLinkUrl;
        }

        if (pluginData.quxTypeCustom) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxTypeCustom: ', pluginData.quxOnChangeCallback, element.name);
          widget.props.customComponent = pluginData.quxTypeCustom;
        }

        if (pluginData.quxAnimationProps) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxAnimationProps: ', pluginData.quxAnimationProps, element.name);

          try {
            widget.props.figmaAnimation = JSON.parse(pluginData.quxAnimationProps);
          } catch (err) {
            Logger$1.error('FigmaService.getPluginData() > quxAnimationProps Could not parse ', pluginData.quxAnimationProps);
          }
        }

        if (pluginData.quxDataBindingDefault) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxDataBindingDefault : ', pluginData.quxDataBindingDefault, element.name);

          if (!widget.props.databinding) {
            widget.props.databinding = {};
          }

          widget.props.databinding['default'] = pluginData.quxDataBindingDefault;
        }

        if (pluginData.quxDataBindingOutput) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxDataBindingOutput : ', pluginData.quxDataBindingOutput, element.name);

          if (!widget.props.databinding) {
            widget.props.databinding = {};
          }

          widget.props.databinding['output'] = pluginData.quxDataBindingOutput;
        }

        if (pluginData.quxDataBindingOptions) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxDataBindingOptions : ', pluginData.quxDataBindingOptions, element.name);

          if (!widget.props.databinding) {
            widget.props.databinding = {};
          }

          widget.props.databinding['options'] = pluginData.quxDataBindingOptions;
        }

        if (pluginData.quxOnClickCallback) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxOnClickCallback: ', pluginData.quxOnClickCallback, element.name);

          if (!widget.props.callbacks) {
            widget.props.callbacks = {};
          }

          widget.props.callbacks.click = pluginData.quxOnClickCallback;
        }

        if (pluginData.quxOnLoadCallback) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxOnLoadCallback: ', pluginData.quxOnLoadCallback, element.name);

          if (!widget.props.callbacks) {
            widget.props.callbacks = {};
          }

          widget.props.callbacks.load = pluginData.quxOnLoadCallback;
        }

        if (pluginData.quxOnChangeCallback) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxOnChangeCallback: ', pluginData.quxOnChangeCallback, element.name);

          if (!widget.props.callbacks) {
            widget.props.callbacks = {};
          }

          widget.props.callbacks.change = pluginData.quxOnChangeCallback;
        }

        if (pluginData.quxOptions) {
          Logger$1.log(3, 'FigmaService.getPluginData() > quxOptions: ', pluginData.quxOptions, element.name);
          widget.props.options = pluginData.quxOptions.split(';');
        }
        /**
         * Hover
         */


        if (pluginData.quxStyleHoverBackground) {
          this.addDynamicStyle(widget, 'hover', 'background', pluginData.quxStyleHoverBackground);
        }

        if (pluginData.quxStyleHoverBorder) {
          this.addDynamicStyle(widget, 'hover', 'borderColor', pluginData.quxStyleHoverBorder);
        }

        if (pluginData.quxStyleHoverColor) {
          this.addDynamicStyle(widget, 'hover', 'color', pluginData.quxStyleHoverColor);
        }
        /**
         * DropDown
         */


        if (pluginData.quxStyleDropDownColor) {
          this.addDynamicStyle(widget, 'style', 'popupColor', pluginData.quxStyleDropDownColor);
        }

        if (pluginData.quxStyleDropDownBackground) {
          this.addDynamicStyle(widget, 'style', 'popupBackground', pluginData.quxStyleDropDownBackground);
        }

        if (pluginData.quxStyleDropDownBorder) {
          this.addDynamicStyle(widget, 'style', 'popupBorder', pluginData.quxStyleDropDownBorder);
        }
        /**
         * Focus
         */


        if (pluginData.quxStyleFocusBackground) {
          this.addDynamicStyle(widget, 'focus', 'background', pluginData.quxStyleFocusBackground);
        }

        if (pluginData.quxStyleFocusBorder) {
          this.addDynamicStyle(widget, 'focus', 'borderColor', pluginData.quxStyleFocusBorder);
        }

        if (pluginData.quxStyleFocusColor) {
          this.addDynamicStyle(widget, 'focus', 'color', pluginData.quxStyleFocusColor);
        }
        /**
         * Style stuff
         */


        if (pluginData.quxFixedHorizontal === 'true') {
          Logger$1.warn('FigmaService.getPluginData() > DEPRECTAED quxFixedHorizontal: ', pluginData.quxFixedHorizontal, element.name); //this.setFixedHozontal(widget, true)
        }

        if (pluginData.quxFixedVertical === 'true') {
          Logger$1.log('FigmaService.getPluginData() > DEPRECTAED quxFixedVertical: ', pluginData.quxFixedVertical, element.name); // this.setFixedVertical(widget)
        }
        /**
         * Screen stuff
         */


        if (pluginData.quxStartScreen === 'true') {
          Logger$1.log(1, 'FigmaService.getPluginData() > quxStartScreen: ', pluginData.quxStartScreen, element.name);
          widget.props.start = true;
        }

        if (pluginData.quxOverlayScreen === 'true') {
          Logger$1.log(4, 'FigmaService.getPluginData() > quxOverlayScreen: ', pluginData.quxOverlayScreen, element.name);
          widget.style.overlay = true;
        }

        if (pluginData.quxHasOverlayBackground === 'true') {
          Logger$1.log(4, 'FigmaService.getPluginData() > quxHasOverlayBackground: ', pluginData.quxHasOverlayBackground, element.name);
          widget.style.hasBackground = true;
        }
        /**
         * Breakpoints
         */


        if (pluginData.quxBreakpointMobile === 'true') {
          if (!widget.props.breakpoints) {
            widget.props.breakpoints = {};
          }

          Logger$1.log(4, 'FigmaService.getPluginData() > quxBreakpointMobile: ', pluginData.quxBreakpointMobile, element.name);
          widget.props.breakpoints.mobile = true;
        }

        if (pluginData.quxBreakpointTablet === 'true') {
          if (!widget.props.breakpoints) {
            widget.props.breakpoints = {};
          }

          Logger$1.log(4, 'FigmaService.getPluginData() > quxBreakpointTablet: ', pluginData.quxBreakpointTablet, element.name);
          widget.props.breakpoints.tablet = true;
        }

        if (pluginData.quxBreakpointDesktop === 'true') {
          if (!widget.props.breakpoints) {
            widget.props.breakpoints = {};
          }

          Logger$1.log(4, 'FigmaService.getPluginData() > quxBreakpointDesktop: ', pluginData.quxBreakpointDesktop, element.name);
          widget.props.breakpoints.desktop = true;
        }

        if (pluginData.quxStyleDisplay) {
          Logger$1.log(4, 'FigmaService.getPluginData() > quxStyleDisplay: ', pluginData.quxStyleDisplay, element.name);
          widget.style.display = pluginData.quxStyleDisplay;
        }

        if (pluginData.quxStyleCursor) {
          Logger$1.log(4, 'FigmaService.getPluginData() > quxStyleCursor: ', pluginData.quxStyleCursor, element.name);
          widget.style.cursor = pluginData.quxStyleCursor;
        }

        if (pluginData.quxStyleMaxWidth) {
          Logger$1.log(4, 'FigmaService.getPluginData() > quxStyleMaxWidth: ', pluginData.quxStyleMaxWidth, element.name);
          widget.style.maxWidth = pluginData.quxStyleMaxWidth;
        }

        if (pluginData.quxStyleMinWidth) {
          Logger$1.log(4, 'FigmaService.getPluginData() > quxStyleMinWidth: ', pluginData.quxStyleMinWidth, element.name);
          widget.style.minWidth = pluginData.quxStyleMinWidth;
        }

        if (pluginData.quxWrapContent) {
          Logger$1.log(-1, 'FigmaService.getPluginData() > quxWrapContent: ', pluginData.quxWrapContent, element.name);
          widget.style.layout = 'Wrap';
        }
      }

      return widget;
    }
  }, {
    key: "setFixedHozontal",
    value: function setFixedHozontal(widget) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (!widget.props.resize) {
        widget.props.resize = {};
      }

      widget.props.resize.fixedHorizontal = value;
    }
  }, {
    key: "setHugHozontal",
    value: function setHugHozontal(widget) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (!widget.props.resize) {
        widget.props.resize = {};
      }

      widget.props.resize.hugHorizontal = value;
    }
  }, {
    key: "setFixedVertical",
    value: function setFixedVertical(widget) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (!widget.props.resize) {
        widget.props.resize = {};
      }

      widget.props.resize.fixedVertical = value;
    }
  }, {
    key: "setHugVertical",
    value: function setHugVertical(widget) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (!widget.props.resize) {
        widget.props.resize = {};
      }

      widget.props.resize.hugVertical = value;
    }
  }, {
    key: "addDynamicStyle",
    value: function addDynamicStyle(widget, type, key, value) {
      if (!widget[type]) {
        widget[type] = {};
      }

      widget[type][key] = value;
    }
  }, {
    key: "getProps",
    value: function getProps(element, widget) {
      var props = {};

      if (this.isVector(element)) {
        //console.debug('FigmaService.getProps() > make vector', element)
        props.paths = element.strokeGeometry;
        props.relativeTransform = element.relativeTransform;
        props.isVector = true;
      }

      if (this.isLabel(widget)) {
        if (element.characters) {
          props.label = element.characters;
        } else {
          props.label = element.name;
        }
      }

      if (widget.type === 'RichText') {
        props.richTextLabel = this.getRichText(element, props.label);
      }
      /**
       * Add here constraints.
       * Since 0.5 keep the normaal figma constraints and make elements fixed and not pinned right
       */


      if (this.pinnRight) {
        props.resize = {
          right: true,
          left: true,
          up: false,
          down: false,
          fixedHorizontal: false,
          fixedVertical: false
        };
      } else {
        props.resize = {
          right: false,
          left: true,
          up: false,
          down: false,
          fixedHorizontal: true,
          fixedVertical: false
        };
      }
      /**
       * FIXME: Should come only after plugin data...
       */


      this.setContraints(element, props);
      return props;
    }
  }, {
    key: "getRichText",
    value: function getRichText(fElement, label) {
      Logger$1.log(2, 'FigmaService.getRichText() >', fElement.name, label);
      var children = [];
      var characterStyleOverrides = fElement.characterStyleOverrides;
      var currentChild = {};
      var lastOverride = -1;

      for (var i = 0; i < label.length; i++) {
        // ending zeros are not added
        var override = characterStyleOverrides[i] !== undefined ? characterStyleOverrides[i] : 0 + '';

        if (override !== lastOverride) {
          currentChild = {
            label: '',
            style: this.getRichTextStyle(fElement.styleOverrideTable[override])
          };
          children.push(currentChild);
        }

        currentChild.label += label[i];
        lastOverride = override;
      }

      return children;
    }
  }, {
    key: "getRichTextStyle",
    value: function getRichTextStyle(fStyle) {
      if (fStyle) {
        var result = {};

        if (fStyle.fills) {
          if (fStyle.fills.length === 1) {
            var fill = fStyle.fills[0];

            if (fill.type === 'SOLID') {
              result.color = this.getColor(fill.color, fill);
            }
          }
        }

        this.setTextStyle(fStyle, result);
        return result;
      }

      return undefined;
    }
  }, {
    key: "getLayout",
    value: function getLayout(fElement, qElement) {
      if (fElement.layoutMode === 'HORIZONTAL') {
        qElement.layout.type = Layout.AutoHorizontal;
        qElement.layout.justifyContent = this.mapAlign(fElement.primaryAxisAlignItems);
        qElement.layout.alignItems = this.mapAlign(fElement.counterAxisAlignItems);
      }

      if (fElement.layoutMode === 'VERTICAL') {
        qElement.layout.type = Layout.AutoVertical;
        qElement.layout.justifyContent = this.mapAlign(fElement.primaryAxisAlignItems);
        qElement.layout.alignItems = this.mapAlign(fElement.counterAxisAlignItems);
      }

      if (fElement.itemSpacing !== undefined) {
        qElement.layout.itemSpacing = fElement.itemSpacing;
      }
      /**
       * FXIME: This fucks up the reponsive ness
       */


      if (fElement.layoutGrow === 0.0) {
        this.setFixedHozontal(qElement, true);
      }

      if (fElement.layoutGrow === 1) {
        this.setFixedHozontal(qElement, false);
      }
      /**
       * We set also hug, as the absense of FIXED in a auto layout parent
       */


      if (fElement._parent) {
        if (fElement._parent.layoutMode === 'HORIZONTAL') {
          if (fElement.primaryAxisSizingMode !== "FIXED" && fElement.layoutGrow === 0) {
            this.setHugHozontal(qElement, true);
          }
        }

        if (fElement._parent.layoutMode === 'VERTICAL') {
          if (fElement.primaryAxisSizingMode !== "FIXED" && fElement.layoutGrow === 0) {
            this.setHugVertical(qElement, true);
          }
        }
      }

      if (fElement.layoutAlign !== undefined) {
        if (fElement.layoutAlign === 'STRETCH') {
          // FIXME: here is some werid figma behavior fElement.layoutGrow === 0.0
          this.setFixedHozontal(qElement, false);
        }

        qElement.layout.align = fElement.layoutAlign;
      }
      /** 
       * I am not sure what this means
      if (fElement.primaryAxisSizingMode === "FIXED") {
        this.setFixedHozontal(qElement, true)
      }
      */


      qElement.layout.grow = fElement.layoutGrow;
      /**
       * We have to substract borders, because of the outer border of Figma
       */

      qElement.layout.paddingLeft = this.mapPadding(fElement.paddingLeft, qElement.style.borderLeftWidth);
      qElement.layout.paddingRight = this.mapPadding(fElement.paddingRight, qElement.style.borderRightWidth);
      qElement.layout.paddingTop = this.mapPadding(fElement.paddingTop, qElement.style.borderTopWidth);
      qElement.layout.paddingBottom = this.mapPadding(fElement.paddingBottom, qElement.style.borderBottomWidth);
      return qElement;
    }
  }, {
    key: "mapPadding",
    value: function mapPadding(padding, border) {
      var p = padding ? padding : 0;
      var b = border ? border : 0;
      return p - b;
    }
  }, {
    key: "mapAlign",
    value: function mapAlign(v) {
      if (this.figmaAlignMapping[v]) {
        return this.figmaAlignMapping[v];
      } // default is start


      return 'flex-start';
    }
  }, {
    key: "setContraints",
    value: function setContraints(element, props) {
      if (element.constraints) {
        var horizontal = element.constraints.horizontal;

        switch (horizontal) {
          case 'RIGHT':
            props.resize.left = false;
            props.resize.right = true;
            props.resize.fixedHorizontal = false;
            break;

          case 'LEFT_RIGHT':
            Logger$1.log(2, 'FigmaService.setContraints() > LEFT_RIGHT', element.name);
            props.resize.left = true;
            props.resize.right = true;
            props.resize.fixedHorizontal = false;
            break;
        }

        var vertical = element.constraints.vertical;

        switch (vertical) {
          case 'TOP_BOTTOM':
            Logger$1.log(2, 'FigmaService.setContraints() > TOP_BOTTOM', element.name);
            props.resize.up = true;
            props.resize.down = true;
            props.resize.fixedVertical = false;
            break;

          case 'BOTTOM':
            Logger$1.log(2, 'FigmaService.setContraints() > BOTTOM', element.name);
            props.resize.up = false;
            props.resize.down = true;
            break;
        }
      }
    }
  }, {
    key: "isIgnored",
    value: function isIgnored(element) {
      // FIXME: check for empty frames
      return this.ignoredTypes.indexOf(element.type) >= 0;
    }
  }, {
    key: "isInvisible",
    value: function isInvisible(element) {
      if (element.visible === false) {
        Logger$1.log(5, 'FigmaService.isInvisible() > exit (visible): ' + element.name, element.type);
        return true;
      }

      if (element.opacity <= 0) {
        Logger$1.log(5, 'FigmaService.isInvisible() > exit (opacity): ' + element.name, element.type);
        return true;
      }

      return false;
    }
  }, {
    key: "isFrame",
    value: function isFrame(element) {
      return element.type === 'FRAME';
    }
  }, {
    key: "isComponet",
    value: function isComponet(element) {
      return element.type === 'COMPONENT';
    }
  }, {
    key: "isComponentSet",
    value: function isComponentSet(element) {
      return element.type === 'COMPONENT_SET';
    }
  }, {
    key: "isVector",
    value: function isVector(element) {
      return this.allAsVecor || !this.isButton(element);
    }
  }, {
    key: "isCustomVector",
    value: function isCustomVector(fElement) {
      if (fElement.pluginData) {
        var pluginData = fElement.pluginData[this.pluginId];

        if (pluginData && pluginData.quxType === 'Vector') {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "isLabel",
    value: function isLabel(widget) {
      return widget && (widget.type === 'Label' || widget.type === 'RichText');
    }
    /**
     * We map to a button / box iff it is not rectangle kind of
     * element (as defined in buttonTypes) and the style is not too
     * complex
     */

  }, {
    key: "isButton",
    value: function isButton(element) {
      if (this.buttonTypes.indexOf(element.type) >= 0) {
        return !this.isTooComplexStyle(element);
      }

      return false;
    }
  }, {
    key: "isVariantContainer",
    value: function isVariantContainer(fElement) {
      return fElement.type === 'VARIANT_COMPONENT';
    }
  }, {
    key: "isTooComplexStyle",
    value: function isTooComplexStyle(element) {
      if (element.fills && element.fills.length > 1) {
        return true;
      }

      if (element.fills && element.fills.length === 1) {
        /**
         * FIXME: Some times elements have iamge fills. They should be containers,
         * but for now there is a weird layout bug
         */
        var fill = element.fills[0];
        return fill.type !== 'SOLID' && fill.type !== 'GRADIENT_LINEAR' && fill.type !== 'GRADIENT_RADIAL'; // && fill.type !== 'IMAGE'
      }

      if (element.effects && element.effects.length > 1) {
        return true;
      }

      if (element.strokes && element.strokes.length > 1) {
        return true;
      }

      return false;
    }
  }, {
    key: "getHas",
    value: function getHas(element, widget) {
      if (widget.type === 'Label') {
        return {
          label: true,
          padding: true,
          advancedText: true
        };
      }

      if (widget.type === 'Button') {
        return {
          label: true,
          backgroundColor: true,
          border: true,
          onclick: true,
          padding: true
        };
      }

      return {};
    }
  }, {
    key: "getStyle",
    value: function getStyle(element, widget) {
      var _this13 = this;

      var style = {
        fontFamily: this.defaultFontFamily,
        borderBottomWidth: 0,
        borderTopWidth: 0,
        borderLeftWidth: 0,
        borderRightWidth: 0
      };
      /**
       * How is this rendered. Which has priority
       */

      if (element.backgroundColor) {
        style.backgroundColor = this.getColor(element.backgroundColor, element);
      }

      if (element.isFixed) {
        style.fixed = true;
        this.setAllChildrenFixed(element);
      }

      if (element.fills) {
        if (element.fills.length === 1) {
          var fill = element.fills[0];

          if (fill.type === 'SOLID') {
            if (this.isLabel(widget)) {
              style.color = this.getColor(fill.color, fill);
              style.backgroundColor = 'transparent';
            } else {
              style.backgroundColor = this.getColor(fill.color, fill);
            }
          }

          if (fill.type === 'GRADIENT_LINEAR') {
            if (!this.isLabel(widget)) {
              style.background = this.getLinearGradient(fill);
            } else {
              Logger$1.log(1, 'getStyle() > gradients not supported fotr labels...');
            }
          }

          if (fill.type === 'GRADIENT_RADIAL') {
            if (!this.isLabel(widget)) {
              style.background = this.getRadialGradient(fill);
            } else {
              Logger$1.log(1, 'getStyle() > gradients not supported for labels...');
            }
          }

          if (fill.type === 'IMAGE') ;
        }
      }

      if (element.cornerRadius) {
        style.borderBottomLeftRadius = element.cornerRadius;
        style.borderTopLeftRadius = element.cornerRadius;
        style.borderBottomRightRadius = element.cornerRadius;
        style.borderTopRightRadius = element.cornerRadius;
      }

      if (element.rectangleCornerRadii) {
        style.borderTopLeftRadius = element.rectangleCornerRadii[0];
        style.borderTopRightRadius = element.rectangleCornerRadii[1];
        style.borderBottomRightRadius = element.rectangleCornerRadii[2];
        style.borderBottomLeftRadius = element.rectangleCornerRadii[3];
      }
      /**
       * The border stuff we just do for rects and text
       */


      if (!this.isVector(element)) {
        if (element.strokes && element.strokes.length > 0) {
          var stroke = element.strokes[0];

          if (stroke.color) {
            style.borderBottomColor = this.getColor(stroke.color, element);
            style.borderTopColor = this.getColor(stroke.color, element);
            style.borderLeftColor = this.getColor(stroke.color, element);
            style.borderRightColor = this.getColor(stroke.color, element);
          }

          if (element.strokeWeight) {
            style.borderBottomWidth = element.strokeWeight;
            style.borderTopWidth = element.strokeWeight;
            style.borderLeftWidth = element.strokeWeight;
            style.borderRightWidth = element.strokeWeight;
          }

          if (element.strokeAlign !== 'INSIDE' && element.strokeWeight) {
            widget.x -= element.strokeWeight;
            widget.w += element.strokeWeight * 2;
            widget.y -= element.strokeWeight;
            widget.h += element.strokeWeight * 2;
          }
        }

        if (element.effects) {
          element.effects.forEach(function (effect) {
            if (effect.type === 'DROP_SHADOW') {
              style.boxShadow = {
                v: effect.offset.y,
                h: effect.offset.x,
                b: effect.radius,
                s: 0,
                i: false,
                c: _this13.getColor(effect.color, element)
              };
            }

            if (effect.type === 'INNER_SHADOW') {
              style.boxShadow = {
                v: effect.offset.y,
                h: effect.offset.x,
                b: effect.radius,
                s: 0,
                i: true,
                c: _this13.getColor(effect.color, element)
              };
            }
          });
        }

        if (element.style) {
          this.setTextStyle(element.style, style);
        }
      }
      /**
       * Labels with constraints can be vertical middle
       */


      if (this.isLabel(widget) && style.verticalAlign !== 'bottom') {
        if (element.constraints) {
          var constraints = element.constraints;

          if (constraints.vertical === 'TOP_BOTTOM') {
            style.verticalAlign = 'middle';
          }
        }
      }

      return style;
    }
  }, {
    key: "setTextStyle",
    value: function setTextStyle(fStyle, style) {
      style.fontFamily = fStyle.fontFamily;
      style.fontSize = fStyle.fontSize;
      style.fontWeight = fStyle.fontWeight;
      this.setLineHeight(style, fStyle);
      style.letterSpacing = fStyle.letterSpacing;

      if (fStyle.textCase === 'UPPER') {
        style.textTransform = 'uppercase';
      }

      if (fStyle.textCase === 'LOWER') {
        style.textTransform = 'lowercase';
      }

      if (fStyle.textCase === 'TITLE') {
        style.textTransform = 'capitalize';
      }

      if (fStyle.textAlignHorizontal) {
        style.textAlign = fStyle.textAlignHorizontal.toLowerCase();
      }

      if (fStyle.textAlignVertical) {
        var textAlignVertical = fStyle.textAlignVertical;

        switch (textAlignVertical) {
          case 'CENTER':
            style.verticalAlign = 'middle';
            break;

          case 'TOP':
            style.verticalAlign = 'top';
            break;

          case 'BOTTOM':
            style.verticalAlign = 'bottom';
            break;
        }
      }
    }
  }, {
    key: "setLineHeight",
    value: function setLineHeight(style, fStyle) {
      /**
       * If we have pixel line height, everything is easy.
       */
      if (fStyle.lineHeightUnit === 'PIXELS') {
        style.lineHeightPX = fStyle.lineHeightPx;
        return;
      }
      /**
       * we might have 'normal', which seems 150%. We set as pixel, because
       * Figma inspect gives the same values.
       */


      if (fStyle.lineHeightUnit === 'INTRINSIC_%' && fStyle.lineHeightPercent) {
        if (this.autoLineHeightAsNormal) {
          style.lineHeight = 'normal';
        } else {
          style.lineHeightPX = Math.round(style.fontSize * 1.5);
        }

        return;
      }
      /**
       * For % we have to take the lineHeightPercentFontSize
       */


      if (fStyle.lineHeightUnit === 'FONT_SIZE_%') {
        style.lineHeight = fStyle.lineHeightPercentFontSize / 100;
        return;
      }
      /**
       * Defautl is line-heigth in percentage
       */


      style.lineHeight = fStyle.lineHeightPercent / 100;
    }
  }, {
    key: "setAllChildrenFixed",
    value: function setAllChildrenFixed(element) {
      var _this14 = this;

      if (element.children) {
        element.children.forEach(function (c) {
          c.isFixed = true;

          _this14.setAllChildrenFixed(c);
        });
      }
    }
  }, {
    key: "getType",
    value: function getType(element) {
      if (this.isVector(element)) {
        return 'Vector';
      }
      /**
       * FIXME: We could have somehow super complex nested shapes that should be handled as a vector...
       */


      if (element.type === 'TEXT') {
        if (element.characterStyleOverrides && element.characterStyleOverrides.length > 0 && element.styleOverrideTable) {
          return 'RichText';
        }

        return 'Label';
      }

      return 'Button';
    }
  }, {
    key: "getLinearGradient",
    value: function getLinearGradient(fill) {
      var _this15 = this;

      Logger$1.log(3, 'getLinearGradient() > enter', fill);
      var start = fill.gradientHandlePositions[0];
      var end = fill.gradientHandlePositions[1];
      var xDiff = start.x - end.x;
      var yDiff = start.y - end.y;
      var dir = Math.round(Math.atan2(yDiff, xDiff) * 180 / Math.PI + 270) % 360;
      var gradientStops = fill.gradientStops;
      var colors = gradientStops.map(function (stop) {
        return {
          c: _this15.getColor(stop.color),
          p: stop.position * 100
        };
      });
      return {
        direction: dir,
        colors: colors
      };
    }
  }, {
    key: "getRadialGradient",
    value: function getRadialGradient(fill) {
      var _this16 = this;

      Logger$1.log(3, 'getLinearGradient() > enter', fill);
      var gradientStops = fill.gradientStops;
      var colors = gradientStops.map(function (stop) {
        return {
          c: _this16.getColor(stop.color),
          p: stop.position * 100
        };
      });
      return {
        radial: true,
        colors: colors
      };
    }
  }, {
    key: "calculateAngle",
    value: function calculateAngle(startHandle, endHandle) {
      var radians = Math.atan(this.calculateGradient(startHandle, endHandle));
      return parseInt(this.radToDeg(radians).toFixed(1));
    }
  }, {
    key: "calculateGradient",
    value: function calculateGradient(startHandle, endHandle) {
      return (endHandle.y - startHandle.y) / (endHandle.x - startHandle.x) * -1;
    }
  }, {
    key: "radToDeg",
    value: function radToDeg(radian) {
      return 180 * radian / Math.PI;
    }
  }, {
    key: "getColor",
    value: function getColor(c, element) {
      if (element && element.visible === false) {
        return '';
      }

      var a = c.a;

      if (element && element.opacity < 1) {
        a = element.opacity;
      }

      return "rgba(".concat(Math.round(c.r * 255), ", ").concat(Math.round(c.g * 255), ", ").concat(Math.round(c.b * 255), ", ").concat(a, ")");
    }
  }, {
    key: "getPosition",
    value: function getPosition(element) {
      if (element.absoluteBoundingBox) {
        var pos = {
          x: Math.round(element.absoluteBoundingBox.x),
          y: Math.round(element.absoluteBoundingBox.y),
          w: Math.round(element.absoluteBoundingBox.width),
          h: Math.round(element.absoluteBoundingBox.height)
        };
        /**
         * We can ignore transformMatrix because absolutePositon gives the right values
         */

        return pos;
      }

      Logger$1.warn('FigmaService.getPosition() > No abs pos', element);
      return {};
    }
  }, {
    key: "getTransformParent",
    value: function getTransformParent(element) {
      if (element._parent) {
        if (element._parent.type === 'FRAME') {
          return element._parent;
        }
      }

      return;
    }
  }, {
    key: "getZ",
    value: function getZ(element, model) {
      model.lastZ++;
      return model.lastZ;
    }
  }, {
    key: "createApp",
    value: function createApp(id, data) {
      return {
        version: 2.1,
        figmaId: id,
        name: data.name,
        description: '',
        screenSize: {
          "w": -1,
          "h": -1
        },
        type: 'smartphone',
        screens: {},
        widgets: {},
        lines: {},
        groups: {},
        lastUUID: 10000,
        lastZ: 1,
        lastUpdate: 0,
        created: 0,
        startScreen: "",
        grid: {
          w: 8,
          h: 8,
          style: "line",
          color: "#cecece",
          visible: false,
          enabled: false
        }
      };
    }
  }, {
    key: "getUUID",
    value: function getUUID(model) {
      var uuid = model.lastUUID++ + "";
      return uuid;
    }
  }]);

  return FigmaService;
}();

var RestEngine = /*#__PURE__*/function () {
  function RestEngine() {
    _classCallCheck(this, RestEngine);
  }

  _createClass(RestEngine, [{
    key: "run",
    value: function run(request, data) {
      if (request.method === "POST" && request.input.type === 'JSON') {
        return this.postOrPut(request, data);
      }

      if (request.method === "POST" && (request.input.type === 'IMAGE' || request.input.type === 'FILE')) {
        return this.postOrPostImage(request, data);
      }

      if (request.method === "GET") {
        return this.get(request, data);
      }

      if (request.method === "PUT" && request.input.type === 'JSON') {
        return this.postOrPut(request, data);
      }

      if (request.method === "PUT" && (request.input.type === 'IMAGE' || request.input.type === 'FILE')) {
        return this.postOrPostImage(request, data);
      }

      if (request.method === "DELETE") {
        return this.delete(request, data);
      }
    }
  }, {
    key: "buildURL",
    value: async function buildURL(request, values) {
      var url = await this.fillString(request.url, values, false);
      Logger$1.log(1, "buildURL", "exit", url);
      return url;
    }
  }, {
    key: "buildData",
    value: async function buildData(request, values) {
      var data = await this.fillString(request.input.template, values, true);
      Logger$1.log(1, "buildData", "exit", data);
      return data;
    }
  }, {
    key: "buildToken",
    value: async function buildToken(request, values) {
      var data = await this.fillString(request.token, values, true);
      Logger$1.log(-1, "RestEngine.buildToken", "exit", data);
      return data;
    }
  }, {
    key: "fillString",
    value: async function fillString(s, values) {
      var encodeFiles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      for (var key in values) {
        var value = await this.getStringFilelValue(values[key], encodeFiles);
        var pattern = "${" + key + "}";
        var i = 0;

        while (s.indexOf(pattern) >= 0 && i < 100) {
          s = s.replace(pattern, value);
          i++;
        }
      }

      if (s.indexOf('${') >= 0) {
        Logger$1.error("buildURL", "exit", s);
        throw new Error("buildURL() > Not all parameters replaced!" + s);
      }

      return s;
    }
  }, {
    key: "getStringFilelValue",
    value: function getStringFilelValue(value, encodeFiles) {
      // FIXME: check if we contain ${} to avoid messz stuff
      if (value && value.name && value.size && encodeFiles) {
        value = this.readFileAsBase64(value);
      }

      return value;
    }
  }, {
    key: "readFileAsBase64",
    value: async function readFileAsBase64(file) {
      var result = await this.base64(file);
      return result;
    }
  }, {
    key: "dataUrl",
    value: function dataUrl(file) {
      return new Promise(function (resolve, reject) {
        var reader = new FileReader();

        reader.onerror = function (error) {
          return reject(error);
        };

        reader.onload = function () {
          return resolve(reader.result);
        };

        reader.readAsDataURL(file);
      });
    }
  }, {
    key: "base64",
    value: function base64(file) {
      return new Promise(function (resolve, reject) {
        var reader = new FileReader();

        reader.onerror = function (error) {
          return reject(error);
        };

        reader.onload = function () {
          var bytes = Array.from(new Uint8Array(reader.result));
          var base64StringFile = btoa(bytes.map(function (item) {
            return String.fromCharCode(item);
          }).join(""));
          resolve(base64StringFile);
        };

        reader.readAsArrayBuffer(file);
      });
    }
  }, {
    key: "handleOutput",
    value: function handleOutput(resolve, request, response) {
      Logger$1.log(2, "handleOutput", "enter", response);

      if (response.status == 200) {
        if (request.output.type === "JSON") {
          try {
            resolve(response.json());
          } catch (e) {
            throw new Error("Could not ".concat(request.method, " ").concat(request.url, ": ").concat(e.message));
          }
        }

        if (request.output.type === "TEXT") {
          resolve(response.text());
        }

        if (request.output.type === "IMAGE") {
          response.arrayBuffer().then(function (buffer) {
            resolve(buffer);
          });
        }

        return;
      }

      throw new Error("Could not ".concat(request.method, " ").concat(request.url, ": ").concat(response.statusText));
    }
  }, {
    key: "get",
    value: function get(request, values) {
      var _this = this;

      return new Promise(async function (resolve, reject) {
        var url = await _this.buildURL(request, values);

        var header = _this.createDefaultHeader(request);

        fetch(url, {
          method: "GET",
          mode: 'cors',
          cache: 'no-cache',
          headers: header,
          redirect: 'follow',
          referrer: 'no-referrer'
        }).then(function (response) {
          _this.handleOutput(resolve, request, response);
        }).catch(function (e) {
          reject(e);
        });
      });
    }
  }, {
    key: "postOrPostImage",
    value: function postOrPostImage(request, values) {
      var _this2 = this;

      return new Promise(async function (resolve, reject) {
        var url = await _this2.buildURL(request, values);

        var header = _this2.createDefaultHeader(request);

        var formData = new FormData();

        for (var key in values) {
          formData.append(key, values[key]);
        }

        fetch(url, {
          method: request.method,
          mode: 'cors',
          cache: 'no-cache',
          headers: header,
          redirect: 'follow',
          referrer: 'no-referrer',
          body: formData
        }).then(function (response) {
          _this2.handleOutput(resolve, request, response);
        }).catch(function (e) {
          reject(e);
          throw e;
        });
      });
    }
  }, {
    key: "postOrPut",
    value: function postOrPut(request, values) {
      var _this3 = this;

      return new Promise(async function (resolve, reject) {
        var url = await _this3.buildURL(request, values);
        var data = await _this3.buildData(request, values);

        var header = _this3.createDefaultHeader(request);

        fetch(url, {
          method: request.method,
          mode: 'cors',
          cache: 'no-cache',
          headers: header,
          redirect: 'follow',
          referrer: 'no-referrer',
          body: data
        }).then(function (response) {
          _this3.handleOutput(resolve, request, response);
        }).catch(function (e) {
          reject(e);
          throw e;
        });
      });
    }
  }, {
    key: "delete",
    value: function _delete(request, values) {
      var _this4 = this;

      return new Promise(async function (resolve, reject) {
        var url = await _this4.buildURL(request, values);

        var header = _this4.createDefaultHeader(request);

        fetch(url, {
          method: "DELETE",
          mode: 'cors',
          cache: 'no-cache',
          headers: header,
          redirect: 'follow',
          referrer: 'no-referrer'
        }).then(function (response) {
          _this4.handleOutput(resolve, request, response);
        }).catch(function (e) {
          reject(e);
          throw e;
        });
      });
    }
  }, {
    key: "createDefaultHeader",
    value: async function createDefaultHeader(request, values) {
      var token = await this.buildToken(request, values);
      var authType = request.authType ? request.authType : 'Bearer';
      var headers = {};

      if (request.input.type === 'JSON') {
        headers['Content-Type'] = 'application/json';
        headers['Accept'] = 'application/json';
      }

      if (request.input.type === 'FORM') {
        headers['Content-Type'] = 'application/x-www-form-urlencoded';
      }

      if (token) {
        headers['Authorization'] = "".concat(authType, " ").concat(token);
      }

      return headers;
    }
  }, {
    key: "getNeededDataBings",
    value: function getNeededDataBings(rest) {
      var result = [];
      this.parseString(rest.url, result);
      this.parseString(rest.token, result);

      if ((rest.method === 'POST' || rest.method === 'PUT') && rest.input.type === 'JSON') {
        this.parseString(rest.input.template, result);
      }

      if ((rest.method === 'POST' || rest.method === 'PUT') && (rest.input.type === 'FILE' || rest.input.type === 'IMAGE')) {
        if (rest.input.fileDataBinding) {
          result.push(rest.input.fileDataBinding);
        }
      }

      return result;
    }
  }, {
    key: "parseString",
    value: function parseString(s, result) {
      var matches = s.match(/\$\{(.*?)\}/g);

      if (matches) {
        matches.forEach(function (m) {
          var variable = m.substring(2, m.length - 1);

          if (result.indexOf(variable) < 0) {
            result.push(variable);
          }
        });
      }
    }
  }]);

  return RestEngine;
}();

var RestEngine$1 = new RestEngine();

//
var script = {
  name: 'Logic',
  methods: {
    executeLogic: function executeLogic(widget, line) {
      Logger$1.log(0, 'QUX.executeLogic() > enter', widget.props, line);
      var lines = getLines(widget, this.model);
      var nextLine = null;

      if (widget.props && widget.props.isRandom) {
        var random = Math.random();
        var pos = Math.floor(random * lines.length);
        Logger$1.log(0, "QUX.executeLogic", "enter >  do AB:" + widget.id + " >> " + random + " >> " + pos);
        nextLine = lines[pos];
      } else {
        nextLine = this.getRuleMatchingLine(lines);
      }

      if (nextLine) {
        this.executeLine(nextLine);
      } else {
        /**
         * THis can happs as a modelling error!
         */
        Logger$1.warn('QUX.executeLogic() > NO RULE matching', lines);
      }
    },
    executeRest: async function executeRest(widget) {
      var _this = this;

      Logger$1.log(0, 'QUX.executeRest() > enter', widget.props.rest);
      var rest = widget.props.rest;
      /**
       * get al the data we need!
       */

      var requiredDataBindings = RestEngine$1.getNeededDataBings(rest);
      var data = {};
      requiredDataBindings.forEach(function (path) {
        var value = JSONPath$1.get(_this.value, path);
        data[path] = value;
      });
      /**
       * Call rest
       */

      var success = await this.runRestEngine(rest, data);
      /**
       * Find next line to execute
       */

      var lines = getLines(widget, this.model);
      var nextLine = this.getRuleMatchingLine(lines, success);

      if (nextLine) {
        this.executeLine(nextLine);
      } else {
        Logger$1.warn('QUX.executeRest() > NO RULE matching', lines);
      }
    },
    runRestEngine: async function runRestEngine(rest, data) {
      try {
        var result = await RestEngine$1.run(rest, data);
        Logger$1.log(1, "QUX.executeRest", "set data " + rest.output.databinding, result);

        if (rest.output.databinding) {
          JSONPath$1.set(this.value, rest.output.databinding, result);
        }

        return true;
      } catch (e) {
        Logger$1.error("QUX.executeRest", "error", e);

        if (rest.output.databinding) {
          JSONPath$1.set(this.value, rest.output.databinding, 'Error');
        }
      }

      return false;
    },
    getRuleMatchingLine: function getRuleMatchingLine(lines, restSuccess) {
      var matchedLine;

      for (var i = 0; i < lines.length; i++) {
        var line = lines[i];

        if (line.rule) {
          Logger$1.log(4, 'QUX.getRuleMatchingLine() > check', i, line.rule);

          if (line.rule.type === 'widget') {
            Logger$1.error('QUX.getRuleMatchingLine() > widget rules not supported in low code');
          }

          if (line.rule.type === 'databinding') {
            matchedLine = this.checkDataBindingRule(line);
          }

          if (line.rule.type === 'rest') {
            if (line.rule.restResponseStatus === '4xx' && !restSuccess) {
              matchedLine = line;
            }

            if (line.rule.restResponseStatus === '200' && restSuccess) {
              matchedLine = line;
            }
          }

          if (matchedLine) {
            break;
          }
        } else {
          /**
           * The *FIRST* line without a condition will be
           */
          if (!matchedLine) {
            matchedLine = line;
          }
        }
      }

      return matchedLine;
    },
    checkDataBindingRule: function checkDataBindingRule(line) {
      Logger$1.log(4, 'QUX.checkDataBindingRule() > enter', line.rule.databinding);
      var rule = line.rule;
      var value = JSONPath$1.get(this.value, rule.databinding);
      var result = this.isValueMatchingRule(value, true, rule);

      if (result) {
        Logger$1.log(-1, 'QUX.checkDataBindingRule() > match!', line);
        return line;
      }
    },
    isValueMatchingRule: function isValueMatchingRule(value, valid, rule) {
      Logger$1.log(3, 'QUX.isValueMatchingRule() > enter > ' + rule.value + ' ' + rule.operator + ' >' + value + '< / ' + valid);
      var operator = rule.operator;
      /**
       * Special handling for checkbox group.
       * We should have an "in" operation
       */

      if (value && Array.isArray(value) && value.length > 0) {
        value = value[0];
      }

      var result = false;

      switch (operator) {
        case "contains":
          if (value.toLowerCase && rule.value.toLowerCase) {
            var lowerValue = value.toLowerCase();
            var lowerRule = rule.value.toLowerCase();
            result = lowerValue.indexOf(lowerRule) >= 0;
          } else {
            result = false;
          }

          break;

        case "isValid":
          result = valid;
          break;

        case "==":
          result = value == rule.value;
          break;

        case "!=":
          if (rule.value === null || rule.value === undefined) {
            result = value !== null && value !== undefined && value !== '';
          } else {
            result = value != rule.value;
          }

          break;

        case ">":
          if (!value) {
            value = 0;
          }

          result = value * 1 > rule.value * 1;
          break;

        case "<":
          if (!value) {
            value = 0;
          }

          result = value * 1 < rule.value * 1;
          break;

        case ">=":
          if (!value) {
            value = 0;
          }

          result = value * 1 >= rule.value * 1;
          break;

        case "<=":
          if (!value) {
            value = 0;
          }

          result = value * 1 <= rule.value * 1;
          break;

        default:
          Logger$1.warn('QUX.isValueMatchingRule() Not supported operator');
      }

      return result;
    }
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "qux"
  });
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = undefined;
/* scoped */

var __vue_scope_id__ = undefined;
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

//
var script$1 = {
  name: 'Event',
  methods: {
    onScreenLoaded: function onScreenLoaded(screen) {
      Logger$1.log(3, 'QUX.onScreenLoaded() > ', screen);
      this.setSystemVariable('screen', screen.name);
      this.$emit('qScreenLoad', {
        value: this.value,
        element: screen,
        viewModel: this.value,
        qux: this
      });
      this.dispatchCallback(screen, null, 'load', null);
    },

    /**
     * This event come from now from the table. The event 'e'
     * contains the callback and the data of the row as 'params'.
     */
    onCallback: async function onCallback(element, e) {
      Logger$1.log(5, 'QUX.onCallback() > ' + element.name, e.callback);
      var executor = this.getMethodExcutor();

      if (executor) {
        if (executor[e.callback]) {
          var func = executor[e.callback];

          if (func instanceof Function) {
            var result = await func({
              value: this.value,
              element: element,
              viewModel: this.value,
              qux: this,
              params: e.params,
              event: e
            });
            /**
             * Since 0.4 we check if we can dispatch the result to a screen.
             */

            this.handleCallbackResult(result, e.callback);
            return;
          } else {
            console.warn('QUX.onCallback() > Callback is not method ', e.callback);
          }
        } else {
          console.warn('QUX.onCallback() > no method in executor with name ', e.callback);
        }
      }
    },
    onClick: function onClick(element, e, value) {
      Logger$1.log(4, 'QUX.onClick() > enter', element);

      if (Logger$1.logLevel > 10) {
        Logger$1.log(10, 'QUX.onClick()', e.target);
      }

      if (element.lines) {
        var line = getClickLine(element);

        if (line) {
          this.executeLine(line, value);
          this.stopEvent(e);
        }
      }

      if (element.action) {
        if (element.action.type === 'back') {
          Logger$1.log(0, 'QUX.onClick() > Go back');
          this.stopEvent(e);

          if (this.overlayScreenIds.length > 0) {
            this.removeLastOverlay();
          } else {
            this.$router.go(-1);
          }

          return;
        }
      }

      this.dispatchCallback(element, e, 'click', value);
    },
    stopEvent: function stopEvent(e) {
      if (e) {
        e.stopPropagation();
      }
    },
    executeLine: function executeLine(line, value) {
      Logger$1.log(-1, 'QUX.executeLine() > enter', line, value);

      if (line) {
        var box = getBoxById(line.to, this.model);

        if (box.type === 'Screen') {
          this.navigateToScreen(box, line, value);
          return;
        } else if (box.type === 'Rest') {
          this.executeRest(box, line);
          return;
        } else if (box.type === 'LogicOr') {
          this.executeLogic(box, line);
          return;
        } else {
          if (!line.isComponentLine) {
            Logger$1.warn('QUX.executeLine() > Not supported line target', box);
          }
        }
      } else {
        Logger$1.error('QUX.executeLine() > ERROR. Null passed', line);
      }
    },
    dispatchCallback: async function dispatchCallback(element, e, type, value) {
      Logger$1.log(4, 'QUX.dispatchCallback() > enter > ' + type, element);

      if (element.props && element.props.callbacks) {
        var callback = element.props.callbacks[type];

        if (callback) {
          Logger$1.log(2, 'QUX.dispatchCallback() > callback > ' + type, callback);

          if (this.actionEngine && this.actionEngine.hasAction(callback)) {
            Logger$1.log(-1, 'QUX.dispatchCallback() > action engine: ', callback);
            var result = await this.actionEngine.executeAction(this.app, callback, this.value);
            this.handleCallbackResult(result, callback);
            return;
          }

          var executor = this.getMethodExcutor();

          if (executor) {
            if (executor[callback]) {
              var func = executor[callback];

              if (func instanceof Function) {
                this.stopEvent(e);
                /**
                 * This is crucial. we need to keep this signature the same.
                 */

                var _result = await func({
                  value: value,
                  element: element,
                  viewModel: this.value,
                  qux: this,
                  event: e
                });

                this.handleCallbackResult(_result, callback);
                return;
              } else {
                console.warn('QUX.dispatchCallback() > Callback is not method ', callback);
              }
            } else {
              console.warn('QUX.dispatchCallback() > no method in $parent with name ', callback);
            }
          }
        }
      }
    },
    handleCallbackResult: function handleCallbackResult(result, callback) {
      /**
      * Since 0.4 we check if we can dispatch the result to a screen.
      */
      if (result) {
        Logger$1.log(-1, 'QUX.handleCallbackResult() > callback > ' + callback, result);
        var nextScreen = Object.values(this.model.screens).find(function (s) {
          return s.name === result;
        });

        if (nextScreen) {
          this.setScreen(result);
          this.scrollToTop();
        } else {
          Logger$1.warn('QUX.handleCallbackResult() > no screen with name > ' + result);
        }
      }
    },
    navigateToScreen: function navigateToScreen(screen, line, value) {
      if (screen.style && screen.style.overlay === true) {
        Logger$1.log(1, 'Qux(Event).navigateToScreen() > Overlay', screen.name);
        this.overlayScreenIds.push(screen.id);
      } else {
        Logger$1.log(1, 'Qux(Event).navigateToScreen() > Link', screen.name);
        this.overlayScreenIds = [];
        this.setScreen(screen.name, this.getValueQuery(value));

        if (!line || line.scroll !== true) {
          this.scrollToTop();
        }
      }
    },
    getValueQuery: function getValueQuery(value) {
      /**
       * We have here the magic *id* property that can come from a repeater!
       */
      if (value && value.id) {
        return "id=".concat(value.id);
      }
    },
    scrollToTop: function scrollToTop() {
      Logger$1.log(4, 'Qux(Event).scrollToTop()');
      this.$emit('qScrollTop', {});
    },
    popOverlay: function popOverlay(e) {
      /**
       * Only pop of the screen background was hit.
       */
      if (this.$refs.overlayCntr && e && e.target === this.$refs.overlayCntr.$el) {
        Logger$1.log(4, 'Qux(Event).popOverlay()');
        this.removeLastOverlay();
      }
    },
    removeLastOverlay: function removeLastOverlay() {
      Logger$1.log(4, 'Qux(Event).removeLastOverlay()');

      if (this.overlayScreenIds.length > 0) {
        this.overlayScreenIds.pop();
      }
    },
    closeAllOverlays: function closeAllOverlays() {
      Logger$1.log(4, 'Qux(Event).closeAllOverlays()');
      this.overlayScreenIds = [];
    },
    onChange: function onChange(element, e, value) {
      Logger$1.log(1, 'Qux(Event).onChange() > ', value);
      this.$emit('qChange', element, e);
      this.dispatchCallback(element, e, 'change', value);
    },
    onKeyPress: function onKeyPress(element, e, value) {
      Logger$1.log(2, 'Qux(Event).onKeyPress() > ', value);
      this.$emit('qKeyPress', element, e);
      this.dispatchCallback(element, e, 'change', value);
    },
    onFocus: function onFocus(element, e, value) {
      this.$emit('qFocus', element, e);
      this.dispatchCallback(element, e, 'focus', value);
    },
    onBlur: function onBlur(element, e, value) {
      this.$emit('qBlur', element, e);
      this.dispatchCallback(element, e, 'blur', value);
    },
    onMouseOver: function onMouseOver(element, e) {
      this.$emit('qMouseOver', element, e);
    },
    onMouseOut: function onMouseOut(element, e) {
      this.$emit('qMouseOut', element, e);
    },
    setSystemVariable: function setSystemVariable(key, value) {
      JSONPath$1.set(this.value, '_qux.' + key, value);
    }
  }
};

/* script */
var __vue_script__$1 = script$1;
/* template */

var __vue_render__$1 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "qux"
  });
};

var __vue_staticRenderFns__$1 = [];
/* style */

var __vue_inject_styles__$1 = undefined;
/* scoped */

var __vue_scope_id__$1 = undefined;
/* module identifier */

var __vue_module_identifier__$1 = undefined;
/* functional template */

var __vue_is_functional_template__$1 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$1 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$1,
  staticRenderFns: __vue_staticRenderFns__$1
}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, undefined, undefined, undefined);

//
var script$2 = {
  mixins: [__vue_component__$1, __vue_component__],
  name: 'Luisa',
  props: {
    'app': {
      default: false
    },
    'design': {},
    'screen': {
      type: String
    },
    'selected': {
      type: String
    },
    'debug': {
      type: String
    },
    'value': {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    'executor': {
      type: Object
    },
    'config': {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    'actions': {
      type: Array
    }
  },
  data: function data() {
    return {
      server: 'https://quant-ux.com',
      model: null,
      mobileModel: null,
      tabletModel: null,
      desktoModel: null,
      selectedScreenId: null,
      overlayScreenIds: [],
      hash: false,
      msg: 'Loading...',
      mergedConfig: Config$1.getDefault(),
      deviceType: ''
    };
  },
  computed: {
    treeModel: function treeModel() {
      if (this.model) {
        var model = this.responsiveModel;
        var transformer = new ModelTransformer(model, this.mergedConfig, this.selected);
        var tree = transformer.transform();
        this.setGlobalCSS(tree, this.selected);
        this.setGlobalFonts(model, this.mergedConfig);
        return tree;
      }

      return {
        screens: []
      };
    },
    responsiveModel: function responsiveModel() {
      var model = this.model;

      if (this.mergedConfig.responsive) {
        model = this.getResponsiveModel(model, this.mergedConfig.responsive);
      }

      return model;
    },
    currentScreen: function currentScreen() {
      var _this = this;

      if (this.selectedScreenId) {
        var screen = this.treeModel.screens.filter(function (screen) {
          return screen.isComponentScreen !== true;
        }).find(function (screen) {
          return screen.id === _this.selectedScreenId;
        });

        if (screen) {
          return screen;
        }
      }

      return this.getDefaultScreen();
    },
    isComponentScreen: function isComponentScreen() {
      var s = this.currentScreen;
      return s ? s.isComponentScreen : false;
    },
    imagePrefix: function imagePrefix() {
      if (this.hash) {
        return "".concat(this.server, "/rest/images/").concat(this.hash, "/");
      }

      return this.mergedConfig.imageFolder;
    },
    hasOverlay: function hasOverlay() {
      return this.overlayScreenIds.length > 0;
    },
    currentOverlay: function currentOverlay() {
      var overlayId = this.overlayScreenIds[this.overlayScreenIds.length - 1];
      var overlay = this.treeModel.screens.find(function (screen) {
        return screen.id === overlayId;
      });
      return overlay;
    },
    isFixedOverlay: function isFixedOverlay() {
      var overlayId = this.overlayScreenIds[this.overlayScreenIds.length - 1];
      var overlay = this.treeModel.screens.find(function (screen) {
        return screen.id === overlayId;
      });

      if (overlay) {
        return overlay.style.fixed;
      }

      return false;
    },
    isBluredOverlay: function isBluredOverlay() {
      var overlayId = this.overlayScreenIds[this.overlayScreenIds.length - 1];
      var overlay = this.treeModel.screens.find(function (screen) {
        return screen.id === overlayId;
      });

      if (overlay) {
        return overlay.style.blur;
      }

      return false;
    }
  },
  methods: {
    getResponsiveModel: function getResponsiveModel(model, responsive) {
      var _this2 = this;

      Logger$1.log(-1, 'Luisa.getResponsiveModel() > enter >', responsive);
      var pagesWithTypes = responsive.filter(function (t) {
        return t.types.length > 0;
      });
      /**
       * Makre sure we have some configuration
       */

      if (pagesWithTypes.length > 0) {
        this.setDeviceType();
        model = clone(model);
        var pages = this.mergedConfig.responsive.filter(function (t) {
          return t.types.indexOf(_this2.deviceType) > -1;
        }).map(function (t) {
          return t.page;
        });
        Logger$1.log(2, 'Luisa.getResponsiveModel() > Pages >' + this.deviceType, pages.join(','));
        var filteredScreens = {};
        Object.values(model.screens).forEach(function (s) {
          if (pages.indexOf(s.pageName) > -1) {
            filteredScreens[s.id] = s;
          }
        });

        if (Object.values(filteredScreens).length > 0) {
          Logger$1.log(-1, 'Luisa.getResponsiveModel() > exit :', this.deviceType);
          model.screens = filteredScreens;
          return model;
        }
      }

      return model;
    },
    setGlobalFonts: function setGlobalFonts(model, config) {
      FontWriter$1.write(model, config);
    },
    setGlobalCSS: function setGlobalCSS(tree) {
      var compressed = new CSSOptimizer(this.mergedConfig).runTree(tree);
      var classes = new CSSFactory(this.mergedConfig, this.imagePrefix).generate(compressed);
      var css = [];
      css = Object.values(classes).flatMap(function (element) {
        return element.map(function (e) {
          return e.code;
        });
      });
      css = css.join('\n');
      CSSWriter$1.write(css, tree.id);
    },
    setFigma: async function setFigma(figma) {
      Logger$1.log(-1, 'Luisa.setFigma()', this.pages);
      var figmaService = new FigmaService(figma.figmaAccessKey, this.mergedConfig);
      var selectedPages = this.pages ? this.pages : [];
      var app = await figmaService.get(figma.figmaFile, true, false, selectedPages);
      app = figmaService.setBackgroundImages(app);
      return app;
    },
    setDesign: async function setDesign(design) {
      Logger$1.log(-1, 'Luisa.setApp() > setDesign', design);

      if (this.config) {
        this.setConfig(this.config, design);
      }

      if (design.figmaFile && design.figmaAccessKey) {
        var app = await this.setFigma(design);
        await this.setQUX(app);
      } else {
        await this.setQUX(design);
      }
    },
    setConfig: function setConfig(c, design) {
      if (design.figmaId || design.figmaFile && design.figmaAccessKey) {
        Logger$1.log(1, 'Luisa.setConfig() > Set Figma');
        this.mergedConfig.css = Config$1.getFigmaCSS();
      }

      this.mergedConfig = Config$1.merge(this.mergedConfig, c);
      this.initCustomComponents(this.mergedConfig.components);
      Logger$1.setLogLevel(this.mergedConfig.debug.logLevel); //Logger.log(5, 'Luisa.setConfig()', JSON.stringify(this.mergedConfig, null, 2))
    },
    setQUX: async function setQUX(app) {
      if (app.substring) {
        var model = await this.loadAppByKey(app);
        this.model = model;
        this.hash = app;
      } else {
        this.model = app;
      }

      this.initViewModel();
    },
    setApp: async function setApp(app) {
      if (app.substring) {
        var model = await this.loadAppByKey(app);
        this.model = model;
        this.hash = app;
      } else if (app.mobile || app.desktop) {
        Logger$1.error('DEPRECTAED: Luisa.setApp() > reponsive', app);

        if (app.mobile) {
          if (app.mobile.substring) {
            this.mobileModel = await this.loadAppByKey(app.mobile);
          } else {
            this.mobileModel = app.mobile;
          }
        }

        if (app.tablet) {
          if (app.tablet.substring) {
            this.tabletModel = await this.loadAppByKey(app.tablet);
          } else {
            this.tabletModel = app.tablet;
          }
        }

        if (app.desktop) {
          if (app.desktop.substring) {
            this.desktoModel = await this.loadAppByKey(app.desktop);
          } else {
            this.desktoModel = app.desktop;
          }
        }

        this.onResize();
      } else {
        this.model = app;
      }

      this.initViewModel();
    },
    loadAppByKey: async function loadAppByKey(key) {
      Logger$1.log(3, 'Luisa.loadAppByKey() > enter', key);
      var url = "".concat(this.server, "/rest/invitation/").concat(key, "/app.json");
      var start = new Date().getTime();
      var response = await fetch(url);

      if (response.status === 200) {
        var app = await response.json();
        Logger$1.log(-1, 'Luisa.loadAppByKey() > exit', new Date().getTime() - start);
        return app;
      } else {
        this.msg = 'The debug id is wrong!';
      }
    },
    setScreen: function setScreen(screenName, query) {
      Logger$1.log(-1, 'Luisa.setScreen() > ', screenName, query); // Update url, which will trigger watcher, which will call setScreenByRouter() which will call loadScreen()

      var prefix = '';

      if (this.config && this.config.router && this.config.router.prefix) {
        prefix = this.config.router.prefix + '/';
      }

      var url = "/".concat(prefix).concat(screenName, ".html");

      if (query) {
        url += '?' + query;
      }
      /**
       * In history mode we have to set the entire URL
       */


      if (this.$router && this.$router.mode === 'history') {
        location = url;
      } else {
        location.hash = '#' + url;
      }
    },
    loadScreen: function loadScreen(name) {
      Logger$1.log(2, 'Luisa.loadScreen() >', name);
      this.closeAllOverlays();

      if (this.model) {
        /**
         * FIXME: Use here tree model
         */
        var model = this.responsiveModel;
        var screen = Object.values(model.screens).find(function (s) {
          return s.name === name;
        });
        Logger$1.log(-1, 'Luisa.loadScreen() > Found ', screen);

        if (screen) {
          // make here somethink like: use router? and updat ethe url as well?
          this.selectedScreenId = screen.id;
          this.onScreenLoaded(screen);
        } else {
          Logger$1.warn('Luisa.loadScreen() > No screen with name', name);
          var startScreen = this.getDefaultScreen();

          if (startScreen) {
            this.selectedScreenId = startScreen.id;
            this.onScreenLoaded(startScreen);
          } else {
            this.msg = "404 - No Screen with name ".concat(this.msg);
          }
        }
      } else {
        Logger$1.warn('Luisa.loadScreen() > No Model');
      }
    },
    getDefaultScreen: function getDefaultScreen() {
      Logger$1.log(2, 'Luisa.getDefaultScreen() > enter');
      var screen = this.treeModel.screens.filter(function (screen) {
        return screen.isComponentScreen !== true;
      }).find(function (screen) {
        return screen.props.start === true;
      });

      if (!screen) {
        screen = this.treeModel.screens.filter(function (screen) {
          return screen.isComponentScreen !== true;
        })[0];
      }

      return screen;
    },
    setStartScreen: function setStartScreen() {
      Logger$1.log(5, 'Luisa.setStartScreen() > enter ');
      var startScreen = this.getDefaultScreen();

      if (startScreen) {
        this.selectedScreenId = startScreen.id;
        this.onScreenLoaded(startScreen);
      } else {
        this.selectedScreenId = null;
      }
    },
    setScreenByRouter: function setScreenByRouter() {
      Logger$1.log(5, 'Luisa.setScreenByRoute() > enter ', this.$route);
      var key = 'screenName';

      if (this.config && this.config.router && this.config.router.key) {
        key = this.config.router.key;
      }

      var screenName = this.$route.params[key];

      if (screenName) {
        Logger$1.log(-1, 'Luisa.setScreenByRoute() > exit ', screenName, "(".concat(key, ")"));
        this.loadScreen(screenName);
      } else {
        Logger$1.log(-1, 'Luisa.setScreenByRoute() > exit > set start');
        this.setStartScreen();
      }
    },
    initCustomComponents: function initCustomComponents(components) {
      Logger$1.log(1, 'Luisa.initCustomComponents()');

      for (var key in components) {
        var c = components[key];
        Vue.component(key, c);
      }
    },
    initViewModel: function initViewModel() {
      var _this3 = this;

      Logger$1.log(3, 'Luisa.initViewModel > enter');

      if (this.value && this.model) {
        /**
         * Fix screen names
         */
        Object.values(this.model.screens).forEach(function (screen) {
          screen.name = getFileName(screen.name);
        });
        /**
         * Add default databinding if needed. This might have consequences on
         * reactiveness. In general it is not advided to do this.
         */

        var dataBindings = Object.values(this.model.widgets).flatMap(function (widget) {
          if (widget.props && widget.props.databinding) {
            return Object.values(widget.props.databinding);
          }

          return [];
        });
        dataBindings.sort(function (a, b) {
          return a.localeCompare(b);
        });
        var value = this.mergedConfig.databinding.default;
        dataBindings.forEach(function (databinding) {
          /**
           * At some point we should have default values in the model...
           *
           * FIXME: This should be more intelligent and add arrays and so if needed
           */
          var has = JSONPath$1.has(_this3.value, databinding);

          if (!has) {
            Logger$1.log(-1, 'Luisa.initViewModel > Missing data in view model', databinding);
            JSONPath$1.set(_this3.value, databinding, value);
          }
        });
      }
    },
    initReziseListener: function initReziseListener() {
      window.addEventListener("resize", this.onScreenSizeChange);
    },
    onScreenSizeChange: function onScreenSizeChange() {
      Logger$1.log(-1, 'Luisa.onScreenSizeChange > enter');
      this.setDeviceType();
      this.setScreenByRouter();
    },
    setDeviceType: function setDeviceType() {
      Logger$1.log(1, 'Luisa.setDeviceType > enter');
      var w = window.outerWidth;
      var breakpoints = this.mergedConfig.breakpoints;

      if (breakpoints) {
        if (w < breakpoints.mobile.max) {
          Logger$1.log(-1, 'Luisa.setDeviceType > exit mobile', w);
          this.deviceType = 'mobile';
          return;
        }

        if (w < breakpoints.tablet.max) {
          Logger$1.log(-1, 'Luisa.setDeviceType > exit tablet', w);
          this.deviceType = 'tablet';
          return;
        }

        Logger$1.log(-1, 'Luisa.setDeviceType > exit desktop', w);
        this.deviceType = 'desktop';
        return;
      }
    },
    getMethodExcutor: function getMethodExcutor() {
      Logger$1.log(3, 'Luisa.getMethodExcutor() > ');

      if (this.executor) {
        return this.executor;
      }

      return this.$parent;
    }
  },
  watch: {
    '$route': function $route() {
      Logger$1.log(3, 'Luisa.watch(router) > enter');
      this.setScreenByRouter();
    },
    'screen': function screen(v) {
      Logger$1.log(3, 'Luisa.watch(screen) > enter');
      this.setScreen(v);
    },
    'value': function value(v) {
      Logger$1.log(3, 'Luisa.watch(value) > enter', v);
      this.value = v;
      this.initViewModel();
    },
    'app': function app(v) {
      Logger$1.log(3, 'Luisa.watch(app) > enter', v);
      this.app = v;
      this.setApp(this.app);
    }
  },
  mounted: async function mounted() {
    Logger$1.log(0, 'Luisa.mounted()', this.value);

    if (this.actions && this.actions.length > 0) {
      this.actionEngine = new ActionEngine(this.actions);
    }

    if (this.design) {
      await this.setDesign(this.design);
    }

    if (this.app) {
      Logger$1.error('Luisa.mounted () > APP is depcreated');
      await this.setDesign(this.app);
    }

    if (this.debug) {
      console.warn('QUX > debug property is decrecated. Use "app" instead.');
      await this.loadAppByKey(this.debug);
    }

    if (!this.selected) {
      if (this.screen) {
        this.loadScreen(this.screen);
      } else {
        this.setScreenByRouter();
      }
    } else {
      Logger$1.log(-1, 'Luisa.mounted() > Selected:', this.selected, this.app);
    }

    if (this.$router && this.$router.mode === 'history') {
      Logger$1.log(-1, 'Luisa.mounted() > Launch router with history', this.$router);
    }

    this.initReziseListener();
  },
  beforeDestroy: function beforeDestroy() {
    window.removeEventListener("resize", this.onResize);
  }
};

const isOldIE = typeof navigator !== 'undefined' &&
    /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
    return (id, style) => addStyle(id, style);
}
let HEAD;
const styles = {};
function addStyle(id, css) {
    const group = isOldIE ? css.media || 'default' : id;
    const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
    if (!style.ids.has(id)) {
        style.ids.add(id);
        let code = css.source;
        if (css.map) {
            // https://developer.chrome.com/devtools/docs/javascript-debugging
            // this makes source maps inside style tags work properly in Chrome
            code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
            // http://stackoverflow.com/a/26603875
            code +=
                '\n/*# sourceMappingURL=data:application/json;base64,' +
                    btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                    ' */';
        }
        if (!style.element) {
            style.element = document.createElement('style');
            style.element.type = 'text/css';
            if (css.media)
                style.element.setAttribute('media', css.media);
            if (HEAD === undefined) {
                HEAD = document.head || document.getElementsByTagName('head')[0];
            }
            HEAD.appendChild(style.element);
        }
        if ('styleSheet' in style.element) {
            style.styles.push(code);
            style.element.styleSheet.cssText = style.styles
                .filter(Boolean)
                .join('\n');
        }
        else {
            const index = style.ids.size - 1;
            const textNode = document.createTextNode(code);
            const nodes = style.element.childNodes;
            if (nodes[index])
                style.element.removeChild(nodes[index]);
            if (nodes.length)
                style.element.insertBefore(textNode, nodes[index]);
            else
                style.element.appendChild(textNode);
        }
    }
}

/* script */
var __vue_script__$2 = script$2;
/* template */

var __vue_render__$2 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux', {
      'qux-component-screen': _vm.isComponentScreen
    }]
  }, [_vm.currentScreen ? _c('qContainer', {
    class: ['qux-screen', {
      'qux-screen-blurred': _vm.isBluredOverlay
    }],
    attrs: {
      "element": _vm.currentScreen,
      "model": _vm.model,
      "config": _vm.mergedConfig
    },
    on: {
      "qCallback": _vm.onCallback,
      "qClick": _vm.onClick,
      "qChange": _vm.onChange,
      "qKeyPress": _vm.onKeyPress,
      "qFocus": _vm.onFocus,
      "qBlur": _vm.onBlur,
      "qMouseOver": _vm.onMouseOver,
      "qMouseOut": _vm.onMouseOut
    },
    model: {
      value: _vm.value,
      callback: function callback($$v) {
        _vm.value = $$v;
      },
      expression: "value"
    }
  }) : _c('div', [_vm._v("\n        " + _vm._s(_vm.msg) + "\n    ")]), _vm._v(" "), _vm.hasOverlay ? _c('div', {
    ref: "overlayWrapper",
    class: ['qux-overlay-wrapper', {
      'qux-overlay-wrapper-fixed': _vm.isFixedOverlay
    }],
    on: {
      "mousedown": _vm.popOverlay
    }
  }, [_vm.currentOverlay ? _c('qContainer', {
    ref: "overlayCntr",
    class: 'qux-screen',
    attrs: {
      "element": _vm.currentOverlay,
      "model": _vm.model,
      "config": _vm.mergedConfig
    },
    on: {
      "qCallback": _vm.onCallback,
      "qClick": _vm.onClick,
      "qChange": _vm.onChange,
      "qKeyPress": _vm.onKeyPress,
      "qFocus": _vm.onFocus,
      "qBlur": _vm.onBlur,
      "qMouseOver": _vm.onMouseOver,
      "qMouseOut": _vm.onMouseOut
    },
    model: {
      value: _vm.value,
      callback: function callback($$v) {
        _vm.value = $$v;
      },
      expression: "value"
    }
  }) : _vm._e()], 1) : _vm._e()], 1);
};

var __vue_staticRenderFns__$2 = [];
/* style */

var __vue_inject_styles__$2 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-bc4fffda_0", {
    source: ".qux{background:0 0;height:100%}.qux.qux-component-screen{height:auto;display:inline-block}.qux-screen{display:flex;flex-direction:column;min-height:100%;background-size:100%}.qux-action{cursor:pointer;text-decoration:none}.qux-action *{cursor:pointer}.qux-valign-middle{position:relative}.qux-valign-middle .qux-common-label{width:100%;position:absolute;top:50%;left:0;transform:translateY(-50%)}.qux-valign-bottom{position:relative}.qux-valign-bottom .qux-common-label{width:100%;position:absolute;bottom:0;left:0}.qux-overlay-wrapper{width:100%;height:100%;position:absolute;top:0;left:0;z-index:99999}.qux-overlay-wrapper.qux-overlay-wrapper-fixed{position:fixed}.qux-screen-blurred{filter:blur(10px)}.qux-resize-left::before{content:\"\";width:3px;background:orange}.qux-resize-right::after{content:\"\";width:3px;background:orange}.qux-common-no-select{-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.qux-common-valign-center{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.qux-noselect{-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$2 = undefined;
/* module identifier */

var __vue_module_identifier__$2 = undefined;
/* functional template */

var __vue_is_functional_template__$2 = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$2 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$2,
  staticRenderFns: __vue_staticRenderFns__$2
}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, false, createInjector, undefined, undefined);

//
var script$3 = {
  name: 'Figma',
  mixins: [],
  props: {
    'figma': {},
    'screen': {
      type: String
    },
    'debug': {
      type: String
    },
    'selected': {
      type: String
    },
    'executor': {
      type: Object
    },
    'value': {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    'config': {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    'page': {
      type: String
    }
  },
  data: function data() {
    return {
      app: null,
      mergedConfig: {
        figma: {
          varientComponentHoverKey: 'Mouse=Hover',
          varientComponentDefaultKey: 'Mouse=Default'
        },
        loadFonts: true,
        css: {
          grid: true,
          justifyContentInWrapper: false,
          pinnedLeft: false,
          pinnedRight: false,
          fixedHorizontal: false,
          attachLabels: false
        }
      }
    };
  },
  computed: {},
  components: {
    'Luisa': __vue_component__$2
  },
  methods: {
    setFigma: async function setFigma(figma) {
      Logger$1.log(-1, 'Figma.setFigma()', this.page);

      if (figma.figmaFile && figma.figmaAccessKey) {
        var figmaService = new FigmaService(figma.figmaAccessKey, this.mergedConfig);
        var selectedPages = this.page ? [this.page] : [];
        var app = await figmaService.get(figma.figmaFile, true, false, selectedPages);
        app = figmaService.setBackgroundImages(app);
        this.app = app;
      } else if (figma.screens && figma.widgets) {
        this.app = figma;
      }
    },

    /**
     * Keep in sync with QUX
     */
    setConfig: function setConfig(c) {
      if (c.css) {
        this.mergedConfig.css = mixin(this.mergedConfig.css, c.css);
      }

      if (c.router) {
        this.mergedConfig.router = mixin(this.mergedConfig.router, c.router);
      }

      if (c.databinding) {
        this.mergedConfig.databinding = mixin(this.mergedConfig.databinding, c.databinding);
      }

      if (c.components) {
        this.mergedConfig.components = c.components;
      }

      if (c.imageFolder) {
        this.mergedConfig.imageFolder = c.imageFolder;
      }

      if (c.debug) {
        this.mergedConfig.debug = mixin(this.mergedConfig.debug, c.debug);
      }

      if (c.responsive) {
        this.mergedConfig.responsive = c.responsive;
      }

      if (c.loadFonts !== undefined) {
        this.mergedConfig.loadFonts = c.loadFonts;
      }

      if (c.figma) {
        this.mergedConfig.figma = mixin(this.mergedConfig.figma, c.figma);
      }

      Logger$1.log(3, 'Figma.setConfig()', JSON.stringify(this.mergedConfig));
    },
    getMethodExcutor: function getMethodExcutor() {
      Logger$1.log(3, 'Figma.getMethodExcutor() > ');

      if (this.executor) {
        return this.executor;
      }

      return this.$parent;
    }
  },
  mounted: function mounted() {
    Logger$1.error(3, 'Figma.mounted: DEPRECATED!!! >> Use <Luisa>  instead ');

    if (this.config) {
      this.setConfig(this.config);
    }

    if (this.figma) {
      this.setFigma(this.figma);
    }
  }
};

/* script */
var __vue_script__$3 = script$3;
/* template */

var __vue_render__$3 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "qux-figma"
  }, [_vm.app ? _c('Luisa', {
    ref: "qux",
    attrs: {
      "app": _vm.app,
      "config": _vm.mergedConfig,
      "showDebug": true,
      "executor": _vm.getMethodExcutor(),
      "selected": _vm.selected,
      "screen": _vm.screen
    },
    model: {
      value: _vm.value,
      callback: function callback($$v) {
        _vm.value = $$v;
      },
      expression: "value"
    }
  }) : _vm._e()], 1);
};

var __vue_staticRenderFns__$3 = [];
/* style */

var __vue_inject_styles__$3 = undefined;
/* scoped */

var __vue_scope_id__$3 = undefined;
/* module identifier */

var __vue_module_identifier__$3 = undefined;
/* functional template */

var __vue_is_functional_template__$3 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$3 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$3,
  staticRenderFns: __vue_staticRenderFns__$3
}, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3, __vue_module_identifier__$3, false, undefined, undefined, undefined);

//
var script$4 = {
  name: 'Base',
  props: {
    'model': {
      type: Object
    },
    'element': {
      type: Object
    },
    'config': {
      type: Object
    },
    'value': {},
    'lbl': {
      type: String
    },
    'url': {
      type: String
    },
    'optionList': {
      type: Array
    },
    'isStandAlone': {
      type: Boolean
    }
  },
  data: function data() {
    return {
      hasLabelInOptions: true
    };
  },
  computed: {
    isDesignSystemRoot: function isDesignSystemRoot() {
      return this.element && this.element.isDesignSystemRoot;
    },
    hasSlot: function hasSlot() {
      return this.$slots.default !== undefined && this.$slots.default !== null;
    },
    hasLink: function hasLink() {
      var _this = this;

      if (this.url && this.url.length > 0) {
        return true;
      }

      if (this.element && this.element.lines && this.element.lines) {
        var line = this.element.lines.find(function (l) {
          return _this.isClick(l);
        });

        if (line) {
          var box = getBoxById(line.to, this.model);

          if (box.type === 'Screen' && !box.style.overlay) {
            return true;
          }
        }
      }

      return false;
    },
    hasHistoryRouter: function hasHistoryRouter() {
      return this.$router && this.$router.mode === 'history';
    },
    link: function link() {
      var _this2 = this;

      if (this.url) {
        return this.url;
      }

      if (this.element && this.element.lines && this.element.lines.length === 1) {
        var line = this.element.lines.find(function (l) {
          return _this2.isClick(l);
        });

        if (line) {
          var box = getBoxById(line.to, this.model);

          if (box.type === 'Screen') {
            var prefix = '';

            if (this.config && this.config.router && this.config.router.prefix) {
              prefix = this.config.router.prefix + '/';
            }

            if (this.hasHistoryRouter) {
              return "/".concat(prefix).concat(box.name, ".html");
            }

            return "#/".concat(prefix).concat(box.name, ".html");
          }
        }
      }

      return false;
    },
    hasAction: function hasAction() {
      return this.element && this.element.actions && Object.values(this.element.actions).length > 0 || this.element.lines && this.element.lines.length > 0 || this.element.props.callbacks && this.element.props.callbacks.click;
    },
    label: function label() {
      if (this.lbl) {
        return this.lbl;
      }

      if (this.dataBindingInputPath && this.dataBindingInputPath.indexOf('$') === 0) {
        var dsRoot = this.getDesignSystemRoot();
        var path = this.dataBindingInputPath.substring(1);

        if (dsRoot) {
          if (dsRoot[path]) {
            return dsRoot[path];
          }
        }
      }

      if (this.element && this.element.props && this.element.props.label) {
        return this.escapeLabel(this.element.props.label);
      }

      return '';
    },
    cssComponentClasses: function cssComponentClasses() {
      if (this.element && this.element.cssComponentClasses) {
        return this.element.cssComponentClasses.join(' ');
      }

      return '';
    },
    cssClass: function cssClass() {
      var result = 'qux-element ';

      if (this.element) {
        /**
         * FIXME: Move this to CSSFactory
         */
        if (this.element.style && this.element.style.verticalAlign) {
          result += "qux-valign-".concat(this.element.style.verticalAlign, " ");
        }

        if (this.hasAction) {
          result += "qux-action ";
        }

        if (this.config && this.config.debug && this.config.debug.resize === true) {
          if (this.element.props && this.element.props.resize) {
            var resize = this.element.props.resize;

            for (var direction in resize) {
              if (resize[direction]) {
                result += "qux-resize-".concat(direction, " ");
              }
            }
          }
        }

        if (this.element.sharedCssClasses) {
          result += this.element.sharedCssClasses.join(' ') + ' ';
        }

        result += this.element.cssClass;
      }

      return result;
    },
    dataBinding: function dataBinding() {
      if (this.element && this.element.props && this.element.props.databinding) {
        return this.element.props.databinding;
      }

      return null;
    },
    dataBindingInput: function dataBindingInput() {
      if (this.element && this.element.props && this.element.props.databinding) {
        var path = this.element.props.databinding.default;

        if (path) {
          var value = JSONPath$1.get(this.value, path);
          Logger$1.log(5, '_Base.dataBindingInput() > ' + path, "\"".concat(value, "\""));
          return value;
        }
      }

      return null;
    },
    dataBindingOptions: function dataBindingOptions() {
      if (this.element && this.element.props && this.element.props.databinding) {
        var path = this.element.props.databinding.options;

        if (path) {
          var value = JSONPath$1.get(this.value, path);
          Logger$1.log(5, '_Base.dataBindingOptions() > ' + path, "\"".concat(value, "\""));
          return value;
        }
      }

      return null;
    },
    dataBindingInputPath: function dataBindingInputPath() {
      if (this.element && this.element.props && this.element.props.databinding) {
        var path = this.element.props.databinding.default;
        return path;
      }

      return '';
    },
    dataBindingOutputPath: function dataBindingOutputPath() {
      if (this.element && this.element.props && this.element.props.databinding) {
        var path = this.element.props.databinding.output;
        return path;
      }

      return '';
    },
    dataBindingLabel: function dataBindingLabel() {
      /**
       * First, cgeck if we have set a lbl property
       */
      if (this.lbl) {
        return this.lbl;
      }
      /**
       * Next, check data binding
       */


      if (this.hasDataBinding) {
        /**
         * Check if we have a magic property path like $label
         */
        if (this.dataBindingInputPath && this.dataBindingInputPath.indexOf('$') === 0) {
          Logger$1.log(4, '_Base.dataBindingLabel() > props : ', "\"".concat(this.dataBindingInputPath, "\""));
          var dsRoot = this.getDesignSystemRoot();

          if (dsRoot) {
            var path = this.dataBindingInputPath.substring(1);

            if (dsRoot[path]) {
              return dsRoot[path];
            }
          }
        } else {
          /**
           * If not magic, check if there is a variable
           */
          var value = this.dataBindingInput;

          if (value !== undefined && value != null) {
            Logger$1.log(6, '_Base.dataBindingLabel() > ', "\"".concat(value, "\""));
            return value;
          }
        }
      }
      /**
       * Last, check element properties
       */


      if (this.element && this.element.props && this.element.props.label) {
        return this.escapeLabel(this.element.props.label);
      }

      return '';
    },
    hasError: function hasError() {
      return false;
    },
    options: function options() {
      if (this.optionList) {
        return this.optionList;
      }

      var dataBindingOptions = this.dataBindingOptions;

      if (dataBindingOptions) {
        return dataBindingOptions;
      }

      if (this.element && this.element.props && this.element.props.options) {
        var options = this.element.props.options;

        if (this.element.props.label && this.hasLabelInOptions) {
          options.unshift(this.element.props.label);
        }

        return options;
      }

      return [];
    }
  },
  watch: {
    value: function value(v) {
      Logger$1.log(3, '_Base.watch(value) > enter', v);
      this.value = v;
    }
  },
  methods: {
    stopEvent: function stopEvent(e) {
      Logger$1.warn('_Base.stopEvent()');

      if (e) {
        e.stopPropagation();
      }
    },
    getDesignSystemRoot: function getDesignSystemRoot() {
      var parent = this.$parent;

      while (parent && parent.element && !parent.element.isDesignSystemRoot) {
        parent = parent.$parent;
      }

      if (parent.element && parent.element.isDesignSystemRoot) {
        return parent;
      }
    },
    escapeLabel: function escapeLabel(lbl) {
      lbl = lbl.replace(/&nbsp;/ig, ' ');
      return lbl;
    },
    isClick: function isClick(line) {
      return line.event = 'click';
    },
    hasDataBinding: function hasDataBinding() {
      return this.element && this.element.props && this.element.props.databinding;
    },

    /**
     * Default event handlers which just delegate up
     * the hierachy
     */
    onClick: function onClick(e) {
      this.$emit('qClick', this.element, e, this.getValue());
      this.$emit('click', e);
      this.checkDesignSystemCallback(e, 'click');
      this.fireParentDomEvent('click', e);
    },
    fireParentDomEvent: function fireParentDomEvent(type, e) {
      /**
        * The wrapper stops our events, so we fire DOM event on parent
        */
      if (this.element && this.element.isDesignSystemRoot) {
        this.$parent.$emit(type, e);
      }
    },
    onChange: function onChange(e) {
      this.$emit('qChange', this.element, e, this.getValue());
      this.checkDesignSystemCallback(e, 'change');
      this.fireParentDomEvent('change', e);
    },
    onKeyPress: function onKeyPress(e) {
      this.$emit('qKeyPress', this.element, e, this.getValue());
      this.checkDesignSystemCallback(e, 'change');
      this.fireParentDomEvent('keyPress', e);
    },
    onFocus: function onFocus(e) {
      this.$emit('qFocus', this.element, e);
      this.fireParentDomEvent('focus', e);
    },
    onBlur: function onBlur(e) {
      this.$emit('qBlur', this.element, e);
      this.fireParentDomEvent('blur', e);
    },
    onMouseOver: function onMouseOver(e) {
      this.$emit('qMouseOver', this.element, e);
    },
    onMouseOut: function onMouseOut(e) {
      this.$emit('qMouseOut', this.element, e);
    },
    checkDesignSystemCallback: function checkDesignSystemCallback(e, type) {
      Logger$1.log(4, '_Base.checkDesignSystemCallback() > : ' + type, this.element);

      if (this.element && this.element.props && this.element.props.callbacks) {
        var callback = this.element.props.callbacks[type];

        if (callback) {
          Logger$1.log(1, '_Base.checkDesignSystemCallback() > : ' + this.element.name, type, callback);
          this.$emit('qDesignSystemCallback', this.element, e, type, callback, this.getValue());
          this.emitDesignSystemCallback();
        }
      }
    },
    forwardDesignSystemCallback: function forwardDesignSystemCallback(element, e, type, callback, elementValue) {
      Logger$1.log(5, '_Base.forwardDesignSystemCallback() > : ' + this.element.name, element.name);
      this.$emit('qDesignSystemCallback', element, e, type, callback, elementValue);
      this.emitDesignSystemCallback(element, e, type, callback, elementValue);
    },
    emitDesignSystemCallback: function emitDesignSystemCallback(element, e, type, callback) {
      if (this.element.isDesignSystemRoot && this.$parent) {
        Logger$1.log(1, '_Base.emitDesignSystemCallback() > : ' + this.element.name, callback, this.value);
        /**
         * We have to call on parent, because
         * we have this virtual wrapper around.
         */

        this.$parent.$emit(callback, this.value, e);
      }
    },

    /**
     * Template method which can be implemnted by children to
     * give the current value to the onChange
     */
    getValue: function getValue() {
      return this.dataBindingInput;
    },

    /**
     * Method which sets the value accoridng to the dataBing path.
     */
    onValueChange: function onValueChange(value) {
      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
      var e = arguments.length > 2 ? arguments[2] : undefined;
      Logger$1.log(3, '_Base.onValueChange() > change : ' + this.element.name, value);

      if (this.element && this.element.props && this.element.props.databinding) {
        var path = this.element.props.databinding[key];

        if (path && this.value != undefined && this.value !== true && this.value !== false) {
          try {
            Logger$1.log(4, '_Base.onValueChange() > change : ' + path, value);
            JSONPath$1.set(this.value, path, value);
          } catch (ex) {
            Logger$1.error('_Base.onValueChange() > Could not set value in path' + path, this.value);
          } //Logger.log(-1, '_Base.onValueChange() > exit : ', JSON.stringify(this.value, null, 2))

        }
      }
      /**
       * We also trigger the change event
       */


      this.$emit('qChange', this.element, e, value);
      /**
       * For design system roots, we also fire event
       */

      if (this.element.isDesignSystemRoot && this.$parent) {
        this.$parent.$emit('input', value);
        this.$parent.$emit('change', value);
      }
    }
  }
};

/* script */
var __vue_script__$4 = script$4;
/* template */

var __vue_render__$4 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "qux-base"
  }, [_vm._v("\n    " + _vm._s(_vm.label) + "\n")]);
};

var __vue_staticRenderFns__$4 = [];
/* style */

var __vue_inject_styles__$4 = undefined;
/* scoped */

var __vue_scope_id__$4 = undefined;
/* module identifier */

var __vue_module_identifier__$4 = undefined;
/* functional template */

var __vue_is_functional_template__$4 = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$4 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$4,
  staticRenderFns: __vue_staticRenderFns__$4
}, __vue_inject_styles__$4, __vue_script__$4, __vue_scope_id__$4, __vue_is_functional_template__$4, __vue_module_identifier__$4, false, undefined, undefined, undefined);

//
var script$5 = {
  name: 'qButton',
  mixins: [__vue_component__$4],
  data: function data() {
    return {};
  },
  mounted: function mounted() {}
};

/* script */
var __vue_script__$5 = script$5;
/* template */

var __vue_render__$5 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _vm.hasLink ? _c('a', {
    class: ['qux-button', _vm.cssClass],
    attrs: {
      "href": _vm.link
    },
    on: {
      "click": _vm.onClick
    }
  }, [_vm.dataBindingLabel && !_vm.hasSlot ? _c('span', {
    staticClass: "qux-common-label"
  }, [_vm._v("\n    " + _vm._s(_vm.dataBindingLabel) + "\n  ")]) : _vm._e(), _vm._v(" "), _vm.hasSlot ? _c('span', {
    staticClass: "qux-common-label"
  }, [_vm._t("default")], 2) : _vm._e()]) : _c('div', {
    class: ['qux-button', _vm.cssClass],
    on: {
      "click": _vm.onClick
    }
  }, [_vm.dataBindingLabel && !_vm.hasSlot ? _c('span', {
    staticClass: "qux-common-label"
  }, [_vm._v("\n    " + _vm._s(_vm.dataBindingLabel) + "\n  ")]) : _vm._e(), _vm._v(" "), _vm.hasSlot ? _c('span', {
    staticClass: "qux-common-label"
  }, [_vm._t("default")], 2) : _vm._e()]);
};

var __vue_staticRenderFns__$5 = [];
/* style */

var __vue_inject_styles__$5 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-11644b0f_0", {
    source: ".qux{background:0 0;height:100%}.qux.qux-component-screen{height:auto;display:inline-block}.qux-screen{display:flex;flex-direction:column;min-height:100%;background-size:100%}.qux-action{cursor:pointer;text-decoration:none}.qux-action *{cursor:pointer}.qux-valign-middle{position:relative}.qux-valign-middle .qux-common-label{width:100%;position:absolute;top:50%;left:0;transform:translateY(-50%)}.qux-valign-bottom{position:relative}.qux-valign-bottom .qux-common-label{width:100%;position:absolute;bottom:0;left:0}.qux-overlay-wrapper{width:100%;height:100%;position:absolute;top:0;left:0;z-index:99999}.qux-overlay-wrapper.qux-overlay-wrapper-fixed{position:fixed}.qux-screen-blurred{filter:blur(10px)}.qux-resize-left::before{content:\"\";width:3px;background:orange}.qux-resize-right::after{content:\"\";width:3px;background:orange}.qux-common-no-select{-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.qux-common-valign-center{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}.qux-noselect{-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.qux-button{display:inline-block;border-style:solid;border-width:0}a.qux-button{text-decoration:none}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$5 = undefined;
/* module identifier */

var __vue_module_identifier__$5 = undefined;
/* functional template */

var __vue_is_functional_template__$5 = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$5 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$5,
  staticRenderFns: __vue_staticRenderFns__$5
}, __vue_inject_styles__$5, __vue_script__$5, __vue_scope_id__$5, __vue_is_functional_template__$5, __vue_module_identifier__$5, false, createInjector, undefined, undefined);

//
var script$6 = {
  name: 'qLabel',
  mixins: [__vue_component__$4],
  data: function data() {
    return {};
  },
  computed: {
    isRichText: function isRichText() {
      var label = this.dataBindingLabel;

      if (label && label.type === 'richtext') {
        return true;
      }

      return false;
    }
  },
  mounted: function mounted() {}
};

/* script */
var __vue_script__$6 = script$6;
/* template */

var __vue_render__$6 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _vm.hasLink ? _c('a', {
    class: ['qux-label', _vm.cssClass],
    attrs: {
      "href": _vm.link
    },
    on: {
      "click": _vm.onClick
    }
  }, [_vm.dataBindingLabel && _vm.dataBindingLabel.type === 'richtext' ? _c('span', {
    staticClass: "qux-richtext",
    domProps: {
      "innerHTML": _vm._s(_vm.dataBindingLabel.value)
    }
  }) : _vm.dataBindingLabel && !_vm.hasSlot ? _c('span', {
    staticClass: "qux-common-label"
  }, [_vm._v("\n    " + _vm._s(_vm.dataBindingLabel) + "\n  ")]) : _vm._e(), _vm._v(" "), _vm.hasSlot ? _c('span', {
    staticClass: "qux-common-label"
  }, [_vm._t("default")], 2) : _vm._e()]) : _c('label', {
    class: ['qux-label', _vm.cssClass],
    on: {
      "click": _vm.onClick
    }
  }, [_vm.isRichText ? _c('span', {
    staticClass: "qux-richtext",
    domProps: {
      "innerHTML": _vm._s(_vm.dataBindingLabel.value)
    }
  }) : _vm.dataBindingLabel && !_vm.hasSlot ? _c('span', {
    staticClass: "qux-common-label"
  }, [_vm._v("\n    " + _vm._s(_vm.dataBindingLabel) + "\n  ")]) : _vm._e(), _vm._v(" "), _vm.hasSlot ? _c('span', {
    staticClass: "qux-common-label"
  }, [_vm._t("default")], 2) : _vm._e()]);
};

var __vue_staticRenderFns__$6 = [];
/* style */

var __vue_inject_styles__$6 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-45e1258e_0", {
    source: ".qux-label{display:inline-block}.qux-label .qux-richtext h1{font-size:150%;font-weight:600}.qux-label .qux-richtext h2{font-size:140%;font-weight:600}.qux-label .qux-richtext h3{font-size:130%;font-weight:600}.qux-label .qux-richtext h4{font-size:120%;font-weight:600}.qux-label .qux-richtext h5{font-size:100%;font-weight:600}.qux-label .qux-richtext h6{font-size:100%;font-weight:600}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$6 = undefined;
/* module identifier */

var __vue_module_identifier__$6 = undefined;
/* functional template */

var __vue_is_functional_template__$6 = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$6 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$6,
  staticRenderFns: __vue_staticRenderFns__$6
}, __vue_inject_styles__$6, __vue_script__$6, __vue_scope_id__$6, __vue_is_functional_template__$6, __vue_module_identifier__$6, false, createInjector, undefined, undefined);

//
var script$7 = {
  name: 'qIcon',
  mixins: [__vue_component__$4],
  data: function data() {
    return {};
  },
  computed: {
    icon: function icon() {
      return this.element.style.icon;
    }
  },
  mounted: function mounted() {//console.debug('Label.mounted()', this.label)
  }
};

/* script */
var __vue_script__$7 = script$7;
/* template */

var __vue_render__$7 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('span', {
    class: ['qux-icon', _vm.cssClass, _vm.icon],
    on: {
      "click": _vm.onClick
    }
  });
};

var __vue_staticRenderFns__$7 = [];
/* style */

var __vue_inject_styles__$7 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-9626a664_0", {
    source: ".qux-icon{display:inline-block}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$7 = undefined;
/* module identifier */

var __vue_module_identifier__$7 = undefined;
/* functional template */

var __vue_is_functional_template__$7 = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$7 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$7,
  staticRenderFns: __vue_staticRenderFns__$7
}, __vue_inject_styles__$7, __vue_script__$7, __vue_scope_id__$7, __vue_is_functional_template__$7, __vue_module_identifier__$7, false, createInjector, undefined, undefined);

//
var script$8 = {
  name: 'qTestBox',
  mixins: [__vue_component__$4],
  data: function data() {
    return {};
  },
  computed: {
    type: function type() {
      if (this.element && this.element.type === 'Password') {
        return 'password';
      }

      return 'text';
    },
    placeholder: function placeholder() {
      if (this.element && this.element.props && this.element.props.placeholder) {
        return this.element.props.label;
      }

      return '';
    },
    selectedValue: function selectedValue() {
      if (this.element && this.element.isDesignSystemRoot) {
        return this.value;
      }

      if (this.element) {
        var input = this.dataBindingInput;

        if (input) {
          if (!input.toLowerCase) {
            if (isNaN(input)) {
              try {
                input = JSON.stringify(input);
              } catch (e) {
                Logger$1.warn('TextBox.selectedValue() > Can stringify ', input);
              }
            }
          }
        }

        return input;
      }

      return '';
    }
  },
  methods: {
    onKeyPress: function onKeyPress(e) {
      var value = e.target.value;
      this.onValueChange(value, 'default');
      this.$emit('qKeyPress', this.element, e, value);
      Logger$1.log(6, 'qTextBox.onKeyPress() > exit', value);
    },
    setFocus: function setFocus() {
      Logger$1.log(0, 'qTextBox.setFocus() > enter');

      if (this.$el) {
        this.$el.focus();
      }
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qTextBox.mounted() enter');

    if (this.element && this.element.props && this.element.props.focus) {
      setTimeout(this.setFocus, 100);
    }
  }
};

/* script */
var __vue_script__$8 = script$8;
/* template */

var __vue_render__$8 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('input', {
    class: ['qux-textbox qux-text-input', _vm.cssClass],
    attrs: {
      "placeholder": _vm.placeholder,
      "type": _vm.type
    },
    domProps: {
      "value": _vm.selectedValue
    },
    on: {
      "focus": _vm.onFocus,
      "blur": _vm.onBlur,
      "click": _vm.onClick,
      "change": _vm.onChange,
      "keyup": _vm.onKeyPress
    }
  });
};

var __vue_staticRenderFns__$8 = [];
/* style */

var __vue_inject_styles__$8 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-2ff49110_0", {
    source: ".qux-textbox{border:1px solid #333;transition:all .2s;padding:0}.qux-textbox:focus{outline:0}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$8 = undefined;
/* module identifier */

var __vue_module_identifier__$8 = undefined;
/* functional template */

var __vue_is_functional_template__$8 = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$8 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$8,
  staticRenderFns: __vue_staticRenderFns__$8
}, __vue_inject_styles__$8, __vue_script__$8, __vue_scope_id__$8, __vue_is_functional_template__$8, __vue_module_identifier__$8, false, createInjector, undefined, undefined);

//
var script$9 = {
  name: 'qContainer',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      debug: false
    };
  },
  computed: {
    justifyContent: function justifyContent() {
      if (isWrappedContainer(this.element) && this.config.css.justifyContentInWrapper) {
        return true;
      }

      return false;
    },
    wrapperPlaceHolders: function wrapperPlaceHolders() {
      return [1, 2, 3, 4, 5, 6, 7, 8];
    }
  },
  methods: {
    forwardClick: function forwardClick(element, e, value) {
      this.$emit('qClick', element, e, value);
    },
    forwardChange: function forwardChange(element, e, value) {
      this.$emit('qChange', element, e, value);
    },
    forwardFocus: function forwardFocus(element, e, value) {
      this.$emit('qFocus', element, e, value);
    },
    forwardBlur: function forwardBlur(element, e, value) {
      this.$emit('qBlur', element, e, value);
    },
    forwardMouseOver: function forwardMouseOver(element, e, value) {
      this.$emit('qMouseOver', element, e, value);
    },
    forwardMouseOut: function forwardMouseOut(element, e, value) {
      this.$emit('qMouseOut', element, e, value);
    },
    forwardKeyPress: function forwardKeyPress(element, e, value) {
      this.$emit('qKeyPress', element, e, value);
    },
    forwardCallback: function forwardCallback(element, e, value) {
      this.$emit('qCallback', element, e, value);
    }
  },
  mounted: function mounted() {}
};

/* script */
var __vue_script__$9 = script$9;
/* template */

var __vue_render__$9 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-container', _vm.cssClass],
    on: {
      "click": _vm.onClick
    }
  }, [_vm.element ? [_vm._l(_vm.element.children, function (child) {
    return _c(child.qtype, {
      key: child.id,
      tag: "component",
      attrs: {
        "element": child,
        "model": _vm.model,
        "config": _vm.config
      },
      on: {
        "qDesignSystemCallback": _vm.forwardDesignSystemCallback,
        "qCallback": _vm.forwardCallback,
        "qClick": _vm.forwardClick,
        "qChange": _vm.forwardChange,
        "qKeyPress": _vm.forwardKeyPress,
        "qFocus": _vm.forwardFocus,
        "qBlur": _vm.forwardBlur,
        "qMouseOver": _vm.forwardMouseOver,
        "qMouseOut": _vm.forwardMouseOut
      },
      model: {
        value: _vm.value,
        callback: function callback($$v) {
          _vm.value = $$v;
        },
        expression: "value"
      }
    });
  }), _vm._v(" "), _vm.element.fixedChildren ? _vm._l(_vm.element.fixedChildren, function (child) {
    return _c(child.qtype, {
      key: child.id,
      tag: "component",
      attrs: {
        "element": child,
        "model": _vm.model,
        "config": _vm.config
      },
      on: {
        "qDesignSystemCallback": _vm.forwardDesignSystemCallback,
        "qCallback": _vm.forwardCallback,
        "qClick": _vm.forwardClick,
        "qChange": _vm.forwardChange,
        "qKeyPress": _vm.forwardKeyPress,
        "qFocus": _vm.forwardFocus,
        "qBlur": _vm.forwardBlur,
        "qMouseOver": _vm.forwardMouseOver,
        "qMouseOut": _vm.forwardMouseOut
      },
      model: {
        value: _vm.value,
        callback: function callback($$v) {
          _vm.value = $$v;
        },
        expression: "value"
      }
    });
  }) : _vm._e()] : [_vm._t("default")]], 2);
};

var __vue_staticRenderFns__$9 = [];
/* style */

var __vue_inject_styles__$9 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-7b43dc2e_0", {
    source: ".qux-container{border-style:solid;border-width:0}.qux-container .qux-container-debug{color:red}.qux-container .qux-container-wrapper-placeholder{background:red;height:1px;width:100px}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$9 = undefined;
/* module identifier */

var __vue_module_identifier__$9 = undefined;
/* functional template */

var __vue_is_functional_template__$9 = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$9 = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$9,
  staticRenderFns: __vue_staticRenderFns__$9
}, __vue_inject_styles__$9, __vue_script__$9, __vue_scope_id__$9, __vue_is_functional_template__$9, __vue_module_identifier__$9, false, createInjector, undefined, undefined);

var script$a = {
  name: 'qRepeater',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      debug: false
    };
  },
  computed: {
    placeholders: function placeholders() {
      /**
       * Make here some better math and calculate hwo many elements i really need?
       */
      if (isLayoutAuto(this.element)) {
        return [];
      }

      return [1, 2, 3, 4, 5, 6, 7];
    },
    rows: function rows() {
      if (this.element && this.element.props && this.element.props.databinding) {
        var path = this.element.props.databinding.default;
        var value = JSONPath$1.get(this.value, path);
        Logger$1.log(5, 'Repeater.rows() > exit path: > ' + path, value);

        if (Array.isArray(value)) {
          return value;
        } else {
          Logger$1.warn('Repeater.rows() > Value is no array: > ' + path, this.value);
        }
      } else {
        return this.getRowsFromTable(this.element);
      }

      return [];
    }
  },
  methods: {
    getDeepCopy: function getDeepCopy(element, row, i) {
      Logger$1.log(4, 'Repeater.getDeepCopy() > exit : > ' + i, row);
      var copy = this.clone(element);
      var path = this.dataBindingInputPath;
      this.updateDataBinding(copy, i, path, true);
      return copy;
    },
    clone: function clone(obj) {
      if (obj === null || _typeof(obj) !== 'object' || 'isActiveClone' in obj) return obj;
      var temp = obj.constructor();

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          if (key !== 'parent') {
            /**
             * FIXME: Make this somehow better
             */
            obj['isActiveClone'] = null;
            temp[key] = this.clone(obj[key]);
            delete obj['isActiveClone'];
          } else {
            temp[key] = obj[key];
          }
        }
      }

      return temp;
    },
    updateDataBinding: function updateDataBinding(copy, i, parentPath) {
      var _this = this;

      var isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      Logger$1.log(5, 'Repeater.updateDataBinding() > enter : > ' + i, copy.name + ' @ ' + parentPath);

      if (copy.children && copy.children.length > 0) {
        copy.children.forEach(function (child) {
          /**
           * Update the path for each child
           */
          _this.updateDataBindingKeys(child, i, parentPath);
          /**
           * Go doen recursive
           */


          _this.updateDataBinding(child, i, parentPath);
        });
      } else if (isRoot) {
        /**
         * We might have a special case, where the repeater has only one child.
         */
        Logger$1.log(5, 'Repeater.updateDataBinding() > No wrapper children : > ' + i, copy.name + ' @ ' + parentPath);
        this.updateDataBindingKeys(copy, i, parentPath);
      }
    },
    updateDataBindingKeys: function updateDataBindingKeys(child, i, parentPath) {
      if (child && child.props && child.props.databinding) {
        var databinding = child.props.databinding;

        for (var key in databinding) {
          var path = databinding[key]; // if we have parent path remove

          if (path.indexOf(parentPath) === 0) {
            path = path.substring(parentPath.length);
          } // if path starts with array we remove


          if (path.indexOf('[0]') === 0) {
            path = path.substring(3);
          }

          if (path.indexOf('.') === 0) {
            path = path.substring(1);
          }

          databinding[key] = "".concat(parentPath, "[").concat(i, "].").concat(path);
          Logger$1.log(2, 'Repeater.updateDataBindingKeys() > exit : > ' + databinding[key]);
        }
      }
    },
    forwardClick: function forwardClick(i, element, e) {
      var row = this.dataBindingInputPath ? JSONPath$1.get(this.value, "".concat(this.dataBindingInputPath, "[").concat(i, "]")) : null;

      if (element.lines && element.lines.length > 0) {
        if (this.dataBindingOutputPath && this.dataBindingInputPath) {
          if (row) {
            Logger$1.log(3, 'qRepeater.forwardClick() > Update databidning' + this.dataBindingOutputPath, row);
            /**
             * FIXME: Should we do a copy here???
             */

            JSONPath$1.set(this.value, this.dataBindingOutputPath, row);
          }
        }
      }
      /**
       * We could still check if there is a click method defined on the repeater and dispatch the click on this element
       * if the clicked child does not have a link or call back
       */


      Logger$1.log(5, 'qRepeater.forwardClick() ', JSON.stringify(row));
      this.$emit('qClick', element, e, row);
    },
    forwardChange: function forwardChange(element, e, value) {
      this.$emit('qChange', element, e, value);
    },
    forwardFocus: function forwardFocus(element, e, value) {
      this.$emit('qFocus', element, e, value);
    },
    forwardBlur: function forwardBlur(element, e, value) {
      this.$emit('qBlur', element, e, value);
    },
    forwardMouseOver: function forwardMouseOver(element, e, value) {
      this.$emit('qMouseOver', element, e, value);
    },
    forwardMouseOut: function forwardMouseOut(element, e, value) {
      this.$emit('qMouseOut', element, e, value);
    },
    forwardKeyPress: function forwardKeyPress(element, e, value) {
      this.$emit('qKeyPress', element, e, value);
    },
    forwardCallback: function forwardCallback(element, e, value) {
      this.$emit('qCallback', element, e, value);
    },
    getRowsFromTable: function getRowsFromTable(widget) {
      var result = [];

      if (widget.props.data && widget.props.data.length > 1) {
        var data = widget.props.data;
        this.dataBindingValues = [];
        var header = widget.props.data[0];

        for (var r = 1; r < data.length; r++) {
          var row = {};

          for (var c = 0; c < header.length; c++) {
            var col = header[c];
            row[col] = data[r][c];
          }

          result.push(row);
        }
      }

      return result;
    }
  },
  mounted: function mounted() {
    Logger$1.log(3, 'Repeater.mounted() > enter', this.element);
  }
};

/* script */
var __vue_script__$a = script$a;
/* template */

var __vue_render__$a = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-repeater', _vm.cssClass]
  }, [_vm._l(_vm.rows, function (row, i) {
    return _c('div', {
      key: i,
      staticClass: "qux-repeater-child"
    }, _vm._l(_vm.element.children, function (child) {
      return _c(child.qtype, {
        key: child.id,
        tag: "component",
        attrs: {
          "element": _vm.getDeepCopy(child, row, i),
          "model": _vm.model,
          "config": _vm.config
        },
        on: {
          "qClick": function qClick($event) {
            return _vm.forwardClick(i, $event);
          },
          "qChange": _vm.forwardChange,
          "qKeyPress": _vm.forwardKeyPress,
          "qFocus": _vm.forwardFocus,
          "qBlur": _vm.forwardBlur,
          "qMouseOver": _vm.forwardMouseOver,
          "qMouseOut": _vm.forwardMouseOut
        },
        model: {
          value: _vm.value,
          callback: function callback($$v) {
            _vm.value = $$v;
          },
          expression: "value"
        }
      });
    }), 1);
  }), _vm._v(" "), _vm._l(_vm.placeholders, function (placeholder, i) {
    return _c('div', {
      key: 'p' + i,
      staticClass: "qux-repeater-child qux-repeater-placeholder",
      staticStyle: {
        "height": "0px",
        "margin": "0px"
      }
    });
  })], 2);
};

var __vue_staticRenderFns__$a = [];
/* style */

var __vue_inject_styles__$a = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-26d4b9e3_0", {
    source: ".qux-repeater{overflow:auto}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$a = undefined;
/* module identifier */

var __vue_module_identifier__$a = undefined;
/* functional template */

var __vue_is_functional_template__$a = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$a = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$a,
  staticRenderFns: __vue_staticRenderFns__$a
}, __vue_inject_styles__$a, __vue_script__$a, __vue_scope_id__$a, __vue_is_functional_template__$a, __vue_module_identifier__$a, false, createInjector, undefined, undefined);

//
var script$b = {
  name: 'qImage',
  mixins: [__vue_component__$4],
  data: function data() {
    return {};
  },

  /**
   * FIXME: add here some stuff for image uploads
   */
  mounted: function mounted() {
    Logger$1.log(0, 'qImage.mounted()');
  }
};

/* script */
var __vue_script__$b = script$b;
/* template */

var __vue_render__$b = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-image', _vm.cssClass],
    on: {
      "click": _vm.onClick
    }
  });
};

var __vue_staticRenderFns__$b = [];
/* style */

var __vue_inject_styles__$b = undefined;
/* scoped */

var __vue_scope_id__$b = undefined;
/* module identifier */

var __vue_module_identifier__$b = undefined;
/* functional template */

var __vue_is_functional_template__$b = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$b = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$b,
  staticRenderFns: __vue_staticRenderFns__$b
}, __vue_inject_styles__$b, __vue_script__$b, __vue_scope_id__$b, __vue_is_functional_template__$b, __vue_module_identifier__$b, false, undefined, undefined, undefined);

//
var script$c = {
  name: 'qCheckBox',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      checked: false
    };
  },
  computed: {
    isChecked: function isChecked() {
      if (this.isDesignSystemRoot) {
        return this.value;
      }

      if (this.element) {
        var input = this.dataBindingInput;
        return input === true;
      }

      return this.checked;
    }
  },
  methods: {
    toggle: function toggle() {
      if (this.element) {
        var value = !this.isChecked;
        this.onValueChange(value, 'default');
        Logger$1.log(-1, 'qCheckBox.toggle() >' + this.dataBindingInputPath, value);
      } else {
        this.checked = !this.checked;
        this.$emit('change', this.checked);
        this.$emit('input', this.checked);
        Logger$1.log(5, 'qCheckBox.toggle() >' + this.checked);
      }
    }
  },
  watch: {
    value: function value(v) {
      Logger$1.log(5, 'qCheckBox.watch(value) > enter', v);

      if (v === false || v === true) {
        this.checked = v;
      }

      this.value = v;
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qCheckBox.mounted() enter');

    if (this.value === true || this.value === true) {
      this.checked = this.value;
    }
  }
};

/* script */
var __vue_script__$c = script$c;
/* template */

var __vue_render__$c = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-checkbox', _vm.cssClass, {
      'qux-checkbox-checked': _vm.isChecked
    }],
    on: {
      "click": _vm.toggle
    }
  }, [_vm._m(0), _vm._v(" "), _vm.label ? _c('span', {
    staticClass: "qux-checkbox-label"
  }, [_vm._v(_vm._s(_vm.label))]) : _vm._e()]);
};

var __vue_staticRenderFns__$c = [function () {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "qux-checkbox-cntr"
  }, [_c('span', {
    staticClass: "qux-checkbox-hook"
  })]);
}];
/* style */

var __vue_inject_styles__$c = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-031dcea9_0", {
    source: ".qux-checkbox{display:inline-block;overflow:hidden;cursor:pointer}.qux-checkbox .qux-checkbox-cntr{position:relative;width:100%;height:100%;display:inline-block;vertical-align:top;border:1px solid #333}.qux-checkbox .qux-checkbox-hook{opacity:0;transition-duration:.3s;transition-property:opacity;border-bottom:3px solid #333;border-right:3px solid #333;transform:rotate(45deg);-ms-transform:rotate(45deg);-webkit-transform:rotate(45deg);display:inline-block;height:70%;width:30%;left:30%;position:absolute;opacity:0;top:0}.qux-checkbox .qux-checkbox-label{margin-left:10px;vertical-align:middle;cursor:pointer}.qux-checkbox-checked .qux-checkbox-hook{opacity:1}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$c = undefined;
/* module identifier */

var __vue_module_identifier__$c = undefined;
/* functional template */

var __vue_is_functional_template__$c = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$c = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$c,
  staticRenderFns: __vue_staticRenderFns__$c
}, __vue_inject_styles__$c, __vue_script__$c, __vue_scope_id__$c, __vue_is_functional_template__$c, __vue_module_identifier__$c, false, createInjector, undefined, undefined);

//
var script$d = {
  name: 'qCheckBoxGroup',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      selected: []
    };
  },
  components: {
    'CheckBox': __vue_component__$c
  },
  computed: {
    checkBoxOptions: function checkBoxOptions() {
      if (this.element) {
        return this.options.map(function (o) {
          if (o.toLowerCase) {
            return {
              label: o,
              value: o
            };
          }

          return o;
        });
      }

      return [];
    }
  },
  methods: {
    isChecked: function isChecked(option) {
      Logger$1.log(5, 'qCheckBoxGroup.isChecked() >' + this.dataBindingInputPath, option);
      var input = this.dataBindingInput;

      if (input && Array.isArray(input)) {
        return input.indexOf(option) > -1;
      }

      return false;
    },
    select: function select(option) {
      var input = this.dataBindingInput;

      if (input) {
        if (Array.isArray(input)) {
          var pos = input.indexOf(option);

          if (pos < 0) {
            input.push(option);
          } else {
            Vue.delete(input, pos);
          }
        }
      } else {
        input = [option];
      }

      this.onValueChange(input, 'default');
      Logger$1.log(5, 'qCheckBoxGroup.select() >' + this.dataBindingInputPath, input);
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qCheckBoxGroup.mounted() enter');
  }
};

/* script */
var __vue_script__$d = script$d;
/* template */

var __vue_render__$d = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-checkgroup', _vm.cssClass]
  }, _vm._l(_vm.checkBoxOptions, function (option) {
    return _c('CheckBox', {
      key: option.value,
      attrs: {
        "lbl": option.label,
        "value": _vm.isChecked(option.value)
      },
      on: {
        "change": function change($event) {
          return _vm.select(option.value);
        }
      }
    });
  }), 1);
};

var __vue_staticRenderFns__$d = [];
/* style */

var __vue_inject_styles__$d = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-dbe1bc1e_0", {
    source: ".qux-checkgroup{display:flex;flex-direction:column;justify-content:space-between}.qux-checkgroup .qux-checkbox{display:block}.qux-checkgroup .qux-checkbox .qux-checkbox-cntr{vertical-align:middle}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$d = undefined;
/* module identifier */

var __vue_module_identifier__$d = undefined;
/* functional template */

var __vue_is_functional_template__$d = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$d = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$d,
  staticRenderFns: __vue_staticRenderFns__$d
}, __vue_inject_styles__$d, __vue_script__$d, __vue_scope_id__$d, __vue_is_functional_template__$d, __vue_module_identifier__$d, false, createInjector, undefined, undefined);

//
var script$e = {
  name: 'qRadio',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      checked: false
    };
  },
  computed: {
    isChecked: function isChecked() {
      if (this.isDesignSystemRoot) {
        // FIXME: make like real checkbox
        return this.value === this.element.name;
      }

      if (this.element) {
        var input = this.dataBindingInput;
        return input === this.element.name;
      }

      Logger$1.log(5, 'qRadioBox.isChecked() >' + this.lbl, this.checked);
      return this.checked;
    }
  },
  methods: {
    toggle: function toggle() {
      if (this.element) {
        var value = !this.isChecked ? this.element.name : null;
        this.onValueChange(value, 'default');
        Logger$1.log(5, 'qRadioBox.toggle() >' + this.dataBindingInputPath, value);
      } else {
        this.checked = !this.checked;
        this.$emit('change', this.checked);
        this.$emit('input', this.checked);
        Logger$1.log(5, 'qRadioBox.toggle() >' + this.checked);
      }
    }
  },
  watch: {
    value: function value(v) {
      Logger$1.log(5, 'qRadioBox.watch(value) > enter ' + this.lbl, v);

      if (v === false || v === true) {
        this.checked = v;
      }

      this.value = v;
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qRadioBox.mounted() enter');

    if (this.value === true || this.value === true) {
      this.checked = this.value;
    }
  }
};

/* script */
var __vue_script__$e = script$e;
/* template */

var __vue_render__$e = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-radiobox', _vm.cssClass, {
      'qux-radiobox-checked': _vm.isChecked
    }],
    on: {
      "click": _vm.toggle
    }
  }, [_vm._m(0), _vm._v(" "), _vm.label ? _c('span', {
    staticClass: "qux-radiobox-label"
  }, [_vm._v(_vm._s(_vm.label))]) : _vm._e()]);
};

var __vue_staticRenderFns__$e = [function () {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "qux-radiobox-cntr"
  }, [_c('span', {
    staticClass: "qux-radiobox-hook"
  })]);
}];
/* style */

var __vue_inject_styles__$e = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-a24ddac4_0", {
    source: ".qux-radiobox{display:inline-block;overflow:hidden}.qux-radiobox .qux-radiobox-cntr{position:relative;width:100%;height:100%;display:inline-block;vertical-align:middle}.qux-radiobox .qux-radiobox-hook{opacity:0;transition-duration:.3s;transition-property:opacity;background:#1973e8;border-radius:50%;display:inline-block;height:60%;width:60%;left:20%;position:absolute;opacity:0;top:20%}.qux-radiobox .qux-radiobox-label{margin-left:10px;vertical-align:middle;cursor:pointer}.qux-radiobox-checked .qux-radiobox-hook{opacity:1}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$e = undefined;
/* module identifier */

var __vue_module_identifier__$e = undefined;
/* functional template */

var __vue_is_functional_template__$e = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$e = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$e,
  staticRenderFns: __vue_staticRenderFns__$e
}, __vue_inject_styles__$e, __vue_script__$e, __vue_scope_id__$e, __vue_is_functional_template__$e, __vue_module_identifier__$e, false, createInjector, undefined, undefined);

//
var script$f = {
  name: 'qRadioGroup',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      selected: null
    };
  },
  components: {
    'RadioBox': __vue_component__$e
  },
  methods: {
    isChecked: function isChecked(option) {
      var input = this.dataBindingInput;
      Logger$1.log(5, 'qRadioGroup.isChecked() >' + option, input);

      if (input) {
        return input === option;
      }

      return false;
    },
    select: function select(option, e) {
      this.onValueChange(option, 'default');
      this.onClick(e);
      Logger$1.log(5, 'qRadioGroup.select() >' + this.dataBindingInputPath, option);
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qRadioGroup.mounted() enter');
  }
};

/* script */
var __vue_script__$f = script$f;
/* template */

var __vue_render__$f = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-radiogroup', _vm.cssClass]
  }, _vm._l(_vm.options, function (option) {
    return _c('RadioBox', {
      key: option,
      attrs: {
        "lbl": option,
        "value": _vm.isChecked(option)
      },
      on: {
        "change": function change($event) {
          return _vm.select(option);
        }
      }
    });
  }), 1);
};

var __vue_staticRenderFns__$f = [];
/* style */

var __vue_inject_styles__$f = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-98feb130_0", {
    source: ".qux-radiogroup{display:flex;flex-direction:column;justify-content:space-between}.qux-radiogroup .qux-radiobox{display:block}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$f = undefined;
/* module identifier */

var __vue_module_identifier__$f = undefined;
/* functional template */

var __vue_is_functional_template__$f = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$f = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$f,
  staticRenderFns: __vue_staticRenderFns__$f
}, __vue_inject_styles__$f, __vue_script__$f, __vue_scope_id__$f, __vue_is_functional_template__$f, __vue_module_identifier__$f, false, createInjector, undefined, undefined);

//
var script$g = {
  name: 'qToggle',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      active: false
    };
  },
  computed: {
    isActive: function isActive() {
      if (this.element) {
        var input = this.dataBindingInput;
        return input === true;
      }

      return this.active;
    }
  },
  methods: {
    toggle: function toggle() {
      if (this.element) {
        var value = !this.isActive;
        this.onValueChange(value, 'default');
        Logger$1.log(5, 'qToggle.toggle() >' + this.dataBindingInputPath, value);
      } else {
        this.active = !this.active;
        this.$emit('change', this.active);
        this.$emit('input', this.active);
        Logger$1.log(5, 'qToggle.toggle() >' + this.active);
      }
    }
  },
  watch: {
    value: function value(v) {
      Logger$1.log(5, 'qToggle.watch(value) > enter', v);

      if (v === false || v === true) {
        this.active = v;
      }

      this.value = v;
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qToggle.mounted() enter');

    if (this.value === true || this.value === true) {
      this.active = this.value;
    }
  }
};

/* script */
var __vue_script__$g = script$g;
/* template */

var __vue_render__$g = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-toggle', _vm.cssClass, {
      'qux-active': _vm.isActive
    }],
    on: {
      "click": _vm.toggle
    }
  }, [_c('span', {
    staticClass: "qux-common-label"
  }, [_vm._v("\n            " + _vm._s(_vm.label) + "\n        ")])]);
};

var __vue_staticRenderFns__$g = [];
/* style */

var __vue_inject_styles__$g = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-4b60be54_0", {
    source: ".qux-toggle{cursor:pointer;transition:all .2s}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$g = undefined;
/* module identifier */

var __vue_module_identifier__$g = undefined;
/* functional template */

var __vue_is_functional_template__$g = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$g = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$g,
  staticRenderFns: __vue_staticRenderFns__$g
}, __vue_inject_styles__$g, __vue_script__$g, __vue_scope_id__$g, __vue_is_functional_template__$g, __vue_module_identifier__$g, false, createInjector, undefined, undefined);

//
var script$h = {
  name: 'qSwitch',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      active: false
    };
  },
  computed: {
    isThin: function isThin() {
      if (this.element && this.element.style.cssClass === 'MatcWidgetTypeSwitchThin') {
        return true;
      }

      return false;
    },
    isActive: function isActive() {
      if (this.element) {
        var input = this.dataBindingInput;
        Logger$1.log(1, 'qSwitch.isActive() >' + this.dataBindingInputPath, input);
        return input === true;
      }

      return this.active;
    }
  },
  methods: {
    toggle: function toggle(e) {
      if (this.element) {
        var value = !this.isActive;
        this.onValueChange(value, 'default');
        this.onClick(e);
        Logger$1.log(5, 'qSwitch.toggle() >' + this.dataBindingInputPath, value);
      } else {
        this.active = !this.active;
        this.$emit('change', this.active);
        this.$emit('input', this.active);
        Logger$1.log(5, 'qSwitch.toggle() >' + this.active);
      }
    }
  },
  watch: {
    value: function value(v) {
      Logger$1.log(5, 'qSwitch.watch(value) > enter', v);

      if (v === false || v === true) {
        this.active = v;
      }

      this.value = v;
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qSwitch.mounted() enter');

    if (this.value === true || this.value === true) {
      this.active = this.value;
    }
  }
};

/* script */
var __vue_script__$h = script$h;
/* template */

var __vue_render__$h = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-switch', _vm.cssClass, {
      'qux-active': _vm.isActive
    }],
    on: {
      "click": _vm.toggle
    }
  }, [_c('div', {
    class: ['qux-switch-cntr', {
      'qux-switch-cntr-thin': _vm.isThin
    }]
  }, [_c('div', {
    staticClass: "qux-switch-on"
  }), _vm._v(" "), _c('div', {
    staticClass: "qux-switch-off"
  })]), _vm._v(" "), _c('div', {
    staticClass: "qux-switch-handle"
  })]);
};

var __vue_staticRenderFns__$h = [];
/* style */

var __vue_inject_styles__$h = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-3a4c29b8_0", {
    source: ".qux-switch{cursor:pointer;position:relative}.qux-switch .qux-switch-cntr{position:absolute;top:0;left:0;width:100%;height:100%;overflow:hidden}.qux-switch .qux-switch-cntr.qux-switch-cntr-thin{height:50%;top:50%;transform:translateY(-50%);-webkit-transform:translateY(-50%)}.qux-switch .qux-switch-cntr .qux-switch-on{position:absolute;width:100%;height:100%;top:0;left:-100%;transition:all .3s}.qux-switch .qux-switch-cntr .qux-switch-off{position:absolute;width:100%;height:100%;top:0;left:0;transition:all .3s}.qux-switch .qux-switch-handle{position:absolute;top:0;left:0;transition:all .3s;border:1px solid transparent}.qux-switch.qux-active .qux-switch-handle{position:absolute;top:0;left:auto;right:0}.qux-switch.qux-active .qux-switch-on{left:0}.qux-switch.qux-active .qux-switch-off{left:100%}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$h = undefined;
/* module identifier */

var __vue_module_identifier__$h = undefined;
/* functional template */

var __vue_is_functional_template__$h = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$h = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$h,
  staticRenderFns: __vue_staticRenderFns__$h
}, __vue_inject_styles__$h, __vue_script__$h, __vue_scope_id__$h, __vue_is_functional_template__$h, __vue_module_identifier__$h, false, createInjector, undefined, undefined);

//
var script$i = {
  name: '_DND',
  props: {},
  computed: {},
  methods: {
    on: function on(node, event, callback) {
      if (node && node.toLowerCase) {
        node = document.getElementById(node);
      }

      if (node && node.addEventListener) {
        node.addEventListener(event, callback);
        return {
          'callback': callback,
          'node': node,
          'event': event,
          'remove': function remove() {
            this.node.removeEventListener(this.event, this.callback);
          }
        };
      } else {
        Logger$1.warn('_DNDN.on() > Pass a node of valid id');
      }
    },
    body: function body() {
      return document.getElementsByTagName("BODY")[0];
    },
    position: function position(node) {
      var ret = node.getBoundingClientRect();
      ret = {
        x: ret.left,
        y: ret.top,
        w: ret.right - ret.left,
        h: ret.bottom - ret.top
      };
      return ret;
    },
    mouse: function mouse(e) {
      var result = {
        x: 0,
        y: 0
      };

      if (e) {
        if (e.touches && e.touches.length > 0) {
          e = e.touches[0];
          result.x = e.clientX;
          result.y = e.clientY;
        } else if (e.changedTouches && e.changedTouches.length > 0) {
          e = e.changedTouches[0];
          result.x = e.clientX;
          result.y = e.clientY;
        } else {
          result.x = e.pageX;
          result.y = e.pageY;
        }
      }

      return result;
    },
    startDND: function startDND(e, move, up) {
      var _this = this;

      this._dndStartPos = this.mouse(e);
      this._dndMouseUpListener = this.on(this.body(), 'mouseup', function (upEvent) {
        _this.endDND(upEvent, up);
      });
      this._dndMouseMoveListener = this.on(this.body(), 'mousemove', function (moveEvent) {
        _this.moveDND(moveEvent, move);
      });
    },
    moveDND: function moveDND(e, move) {
      if (move) {
        try {
          var currentPos = this.mouse(e);
          var delta = this.getMouseDelta(this._dndStartPos, currentPos);
          move(delta, e);
        } catch (err) {
          Logger$1.error('_DND.moveDND()', err);
          this.cleanDND();
        }
      }
    },
    endDND: function endDND(e, up) {
      if (up) {
        try {
          var currentPos = this.mouse(e);
          var delta = this.getMouseDelta(this._dndStartPos, currentPos);
          up(delta, e);
        } catch (err) {
          Logger$1.error('_DND.endDND()', err);
        }
      }

      this.cleanDND();
    },
    getMouseDelta: function getMouseDelta(start, end) {
      return {
        x: end.x - start.x,
        y: end.y - start.y
      };
    },
    cleanDND: function cleanDND() {
      if (this._dndMouseUpListener) {
        this._dndMouseUpListener.remove();

        delete this._dndMouseUpListener;
      }

      if (this._dndMouseMoveListener) {
        this._dndMouseMoveListener.remove();

        delete this._dndMouseMoveListener;
      }

      delete this._dndStartPos;
    }
  },
  destroyed: function destroyed() {
    this.cleanDND();
  }
};

/* script */
var __vue_script__$i = script$i;
/* template */

var __vue_render__$i = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "qux-dnd"
  });
};

var __vue_staticRenderFns__$i = [];
/* style */

var __vue_inject_styles__$i = undefined;
/* scoped */

var __vue_scope_id__$i = undefined;
/* module identifier */

var __vue_module_identifier__$i = undefined;
/* functional template */

var __vue_is_functional_template__$i = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$i = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$i,
  staticRenderFns: __vue_staticRenderFns__$i
}, __vue_inject_styles__$i, __vue_script__$i, __vue_scope_id__$i, __vue_is_functional_template__$i, __vue_module_identifier__$i, false, undefined, undefined, undefined);

//
var script$j = {
  name: 'qDropDown',
  mixins: [__vue_component__$4, __vue_component__$i],
  data: function data() {
    return {
      isOpen: false,
      selected: null,
      hasLabelInOptions: true
    };
  },
  computed: {
    isMobile: function isMobile() {
      if (this.element && this.element.type === 'MobileDropDown') {
        return true;
      }

      var userAgent = navigator.userAgent || navigator.vendor || window.opera;
      return /iPad|iPhone|iPod/.test(userAgent) || /android/i.test(userAgent);
    },
    dropDownOption: function dropDownOption() {
      if (this.element) {
        return this.options.map(function (o) {
          if (o.toLowerCase || typeof o === 'number') {
            return {
              label: o,
              value: o
            };
          }

          return o;
        });
      }

      return [];
    },
    selectOption: function selectOption() {
      if (this.isDesignSystemRoot) {
        return this.value;
      }

      if (this.element) {
        var input = this.dataBindingInput;

        if (input) {
          var found = this.options.find(function (o) {
            return o.value === input;
          });

          if (found) {
            return found.label;
          }

          return input;
        } else {
          var option = this.options[0];

          if (option.label) {
            return option.label;
          }

          return option;
        }
      }

      return this.selected;
    }
  },
  methods: {
    open: function open() {
      Logger$1.log(5, 'qDropDown.open()');
      this.isOpen = !this.isOpen;

      if (this.isOpen) {
        this._bodyListener = this.on(this.body(), 'mousedown', this.close);
      }
    },
    close: function close() {
      Logger$1.log(5, 'qDropDown.close()');
      this.isOpen = false;

      if (this._bodyListener) {
        this._bodyListener.remove();
      }
    },
    select: function select(option) {
      Logger$1.log(5, 'qDropDown.select()', option);

      if (this.element) {
        this.onValueChange(option.value, 'default');
        Logger$1.log(5, 'qDropDown.toggle() >' + this.dataBindingInputPath, option.value);
      } else {
        this.selected = option.value;
        this.$emit('change', this.selected);
        this.$emit('input', this.selected);
        Logger$1.log(5, 'qSwitch.select() >' + this.selected);
      }

      this.close();
    }
  },
  watch: {},
  destroyed: function destroyed() {
    this.close();
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qDropDown.mounted() enter');
  }
};

/* script */
var __vue_script__$j = script$j;
/* template */

var __vue_render__$j = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-dropdown', _vm.cssClass, {
      'qux-error': _vm.hasError
    }, {
      'qux-open': _vm.isOpen
    }, {
      'qux-dropdown-mobile': _vm.isMobile
    }],
    on: {
      "click": _vm.open
    }
  }, [_c('div', {
    staticClass: "qux-dropdown-label"
  }, [_c('span', {
    staticClass: "qux-common-label qux-dropdown-label"
  }, [_vm._v("\n              " + _vm._s(_vm.selectOption) + "\n      ")]), _vm._v(" "), _vm._m(0)]), _vm._v(" "), _vm.isOpen ? _c('div', {
    staticClass: "qux-dropdown-popup"
  }, _vm._l(_vm.dropDownOption, function (o) {
    return _c('span', {
      key: o.label,
      staticClass: "qux-dropdown-item",
      on: {
        "mousedown": function mousedown($event) {
          $event.stopPropagation();
          return _vm.select(o);
        }
      }
    }, [_vm._v("\n            " + _vm._s(o.label) + "\n        ")]);
  }), 0) : _vm._e()]);
};

var __vue_staticRenderFns__$j = [function () {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "qux-dropdown-expend"
  }, [_c('span', {
    staticClass: "qux-dropdown-carret"
  })]);
}];
/* style */

var __vue_inject_styles__$j = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-6ac78d1b_0", {
    source: ".qux-dropdown{border:1px solid #333;transition:all .2s;display:inline-block;position:relative;cursor:pointer}.qux-dropdown .qux-dropdown-label{height:100%;width:100%;align-items:center}.qux-dropdown .qux-dropdown-label .qux-dropdown-expend{position:absolute;height:100%;top:0;right:0;width:40px}.qux-dropdown .qux-dropdown-label .qux-dropdown-carret{border-left:4px solid transparent;border-right:4px solid transparent;border-top:4px solid;display:inline-block;height:0;margin-left:2px;vertical-align:middle;width:0;position:absolute;right:50%;top:50%;transform:translateY(-50%) translateX(50%);cursor:pointer}.qux-dropdown .qux-dropdown-popup{position:absolute;top:calc(100%);left:0;display:none;border:1px solid #333;width:100%;z-index:1000;background:#fff;max-height:300px;overflow:auto}.qux-dropdown .qux-dropdown-item{display:block;cursor:pointer}.qux-dropdown.qux-open .qux-dropdown-popup{display:block}.qux-dropdown.qux-dropdown-mobile .qux-dropdown-popup{position:fixed;top:50%;transform:translateY(-50%);left:10%;width:80%;max-height:80%;overflow:auto;border-radius:20px;background:#333;color:#fff;box-shadow:0 3px 100px rgba(0,0,0,.5);border:none;z-index:10001}.qux-dropdown.qux-dropdown-mobile .qux-dropdown-popup .qux-dropdown-item{display:block;cursor:pointer;padding:20px;font-size:20px}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$j = undefined;
/* module identifier */

var __vue_module_identifier__$j = undefined;
/* functional template */

var __vue_is_functional_template__$j = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$j = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$j,
  staticRenderFns: __vue_staticRenderFns__$j
}, __vue_inject_styles__$j, __vue_script__$j, __vue_scope_id__$j, __vue_is_functional_template__$j, __vue_module_identifier__$j, false, createInjector, undefined, undefined);

//
var script$k = {
  name: 'qTestBox',
  mixins: [__vue_component__$4],
  data: function data() {
    return {};
  },
  computed: {
    type: function type() {
      if (this.element && this.element.type === 'Password') {
        return 'password';
      }

      return 'text';
    },
    placeholder: function placeholder() {
      if (this.element && this.element.props && this.element.props.placeholder) {
        return this.element.props.label;
      }

      return '';
    }
  },
  methods: {
    onKeyPress: function onKeyPress(e) {
      var value = e.target.value;
      this.onValueChange(value, 'default');
      this.$emit('qKeyPress', this.element, e);
      Logger$1.log(3, 'qTextBox.onKeyPress() > exit', value);
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qTextBox.mounted() enter');
  }
};

/* script */
var __vue_script__$k = script$k;
/* template */

var __vue_render__$k = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('textarea', {
    class: ['qux-textarea qux-text-input', _vm.cssClass],
    attrs: {
      "placeholder": _vm.placeholder,
      "type": _vm.type
    },
    domProps: {
      "value": _vm.dataBindingInput
    },
    on: {
      "click": _vm.onClick,
      "change": _vm.onChange,
      "keyup": _vm.onKeyPress
    }
  });
};

var __vue_staticRenderFns__$k = [];
/* style */

var __vue_inject_styles__$k = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-63a7598c_0", {
    source: ".qux-textarea{border:1px solid #333;resize:none;transition:all .2s}.qux-textarea:focus{outline:0}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$k = undefined;
/* module identifier */

var __vue_module_identifier__$k = undefined;
/* functional template */

var __vue_is_functional_template__$k = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$k = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$k,
  staticRenderFns: __vue_staticRenderFns__$k
}, __vue_inject_styles__$k, __vue_script__$k, __vue_scope_id__$k, __vue_is_functional_template__$k, __vue_module_identifier__$k, false, createInjector, undefined, undefined);

//
var script$l = {
  name: 'qStepper',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      count: 0
    };
  },
  methods: {
    getCount: function getCount() {
      if (this.element) {
        var count = this.dataBindingInput;

        if (!isNaN(count)) {
          return count;
        }
      }

      return this.count;
    },
    onMinus: function onMinus(e) {
      var count = this.getCount();
      this.count = count - 1;
      this.change();
      this.onClick(e);
    },
    onPlus: function onPlus(e) {
      var count = this.getCount();
      this.count = count + 1;
      this.change();
      this.onClick(e);
    },
    change: function change() {
      if (this.element) {
        this.onValueChange(this.count, 'default');
      } else {
        this.$emit('change', this.count);
        this.$emit('input', this.count);
      }
    }
  },
  mounted: function mounted() {
    if (this.element && this.element.props && this.element.props.value) {
      this.count = this.element.props.value;
    }
  }
};

/* script */
var __vue_script__$l = script$l;
/* template */

var __vue_render__$l = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-stepper qux-common-no-select', _vm.cssClass]
  }, [_c('div', {
    staticClass: "qux-stepper-btn qux-stepper-minus",
    on: {
      "click": _vm.onMinus
    }
  }, [_c('span', {
    staticClass: "qux-stepper-label"
  }, [_vm._v("-")])]), _vm._v(" "), _c('div', {
    staticClass: "qux-stepper-btn qux-stepper-plus",
    on: {
      "click": _vm.onPlus
    }
  }, [_c('span', {
    staticClass: "qux-stepper-label"
  }, [_vm._v("\n          +\n      ")])])]);
};

var __vue_staticRenderFns__$l = [];
/* style */

var __vue_inject_styles__$l = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-0c126f22_0", {
    source: ".qux-stepper{display:inline-block;border:1px solid #333;color:#333;display:flex}.qux-stepper .qux-stepper-minus{width:50%;position:relative;text-align:center}.qux-stepper .qux-stepper-plus{width:calc(50% - 1px);border-left:1px solid #333;position:relative;text-align:center}.qux-stepper .qux-stepper-label{position:absolute;top:45%;left:0;width:100%;transform:translateY(-50%)}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$l = undefined;
/* module identifier */

var __vue_module_identifier__$l = undefined;
/* functional template */

var __vue_is_functional_template__$l = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$l = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$l,
  staticRenderFns: __vue_staticRenderFns__$l
}, __vue_inject_styles__$l, __vue_script__$l, __vue_scope_id__$l, __vue_is_functional_template__$l, __vue_module_identifier__$l, false, createInjector, undefined, undefined);

//
var script$m = {
  name: 'qSlider',
  mixins: [__vue_component__$4, __vue_component__$i],
  data: function data() {
    return {
      count: 0
    };
  },
  computed: {
    domPos: function domPos() {
      return this.position(this.$el);
    },
    handleWidth: function handleWidth() {
      if (this.element) {
        return this.element.style.handleWidth;
      }

      return 40;
    },
    minValue: function minValue() {
      if (this.element && this.element.props) {
        return this.element.props.min;
      }

      return 0;
    },
    maxValue: function maxValue() {
      if (this.element && this.element.props) {
        return this.element.props.max;
      }

      return 100;
    },
    left: function left() {
      var offSet = this.handleWidth / 2;
      var left = this.sliderValue / (this.maxValue - this.minValue);
      left = Math.min(1, left);
      left = Math.max(0, left);
      return "calc(".concat(left * 100, "% - ").concat(offSet, "px)");
    },
    progress: function progress() {
      return this.sliderValue;
    },
    sliderValue: function sliderValue() {
      if (this.element) {
        var count = this.dataBindingInput;

        if (!isNaN(count)) {
          return count;
        }
      }

      return this.count;
    }
  },
  methods: {
    onSliderClick: function onSliderClick(e) {
      this.setByMouse(e);
      this.onClick(e);
    },
    onHandleDown: function onHandleDown(e) {
      var _this = this;

      this.startDND(e, function (move, e) {
        return _this.setByMouse(e);
      });
    },
    setByMouse: function setByMouse(e) {
      var pos = this.domPos;
      var mouse = this.mouse(e);
      var left = (mouse.x - pos.x) / pos.w;
      left = Math.min(1, left);
      left = Math.max(0, left);
      var value = (this.maxValue - this.minValue) * left;
      this.onChange(value);
    },
    onChange: function onChange(value) {
      this.count = Math.round(value);

      if (this.element) {
        this.onValueChange(this.count, 'default');
        this.$emit('qChange', this.element, null, this.count);
      } else {
        this.$emit('change', this.count);
        this.$emit('input', this.count);
      }

      Logger$1.log(5, 'qSlider.onChange() exit > ', this.count);
    }
  },
  mounted: function mounted() {
    if (this.element && this.element.props && this.element.props.value) {
      this.count = this.element.props.value;
    }
  }
};

/* script */
var __vue_script__$m = script$m;
/* template */

var __vue_render__$m = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-slider', _vm.cssClass],
    on: {
      "click": _vm.onSliderClick
    }
  }, [_c('div', {
    staticClass: "qux-slider-track"
  }, [_c('div', {
    staticClass: "qux-slider-progress",
    style: {
      'width': _vm.progress + '%'
    }
  })]), _vm._v(" "), _c('div', {
    staticClass: "qux-slider-handle-cntr"
  }, [_c('div', {
    staticClass: "qux-slider-handle",
    style: {
      'left': _vm.left
    },
    on: {
      "mousedown": _vm.onHandleDown
    }
  })])]);
};

var __vue_staticRenderFns__$m = [];
/* style */

var __vue_inject_styles__$m = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-16ccfc23_0", {
    source: ".qux-slider{position:relative;cursor:pointer}.qux-slider .qux-slider-track{width:100%;height:34%;position:absolute;top:calc(50% - 17%);left:0;border:0;overflow:hidden}.qux-slider .qux-slider-track .qux-slider-progress{height:100%}.qux-slider .qux-slider-handle-cntr{position:absolute;top:0;left:0}.qux-slider .qux-slider-handle{position:absolute;top:0;left:0;width:40px;border-radius:20px;cursor:pointer}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$m = undefined;
/* module identifier */

var __vue_module_identifier__$m = undefined;
/* functional template */

var __vue_is_functional_template__$m = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$m = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$m,
  staticRenderFns: __vue_staticRenderFns__$m
}, __vue_inject_styles__$m, __vue_script__$m, __vue_scope_id__$m, __vue_is_functional_template__$m, __vue_module_identifier__$m, false, createInjector, undefined, undefined);

//
var script$n = {
  name: 'qDate',
  mixins: [__vue_component__$4],
  props: ['range'],
  data: function data() {
    return {
      isRange: false,
      selected: new Date(),
      viewDate: new Date(),
      day_names: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      month_names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    };
  },
  computed: {
    backLabel: function backLabel() {
      if (this.element && this.element.props.lastButtonLbl) {
        return '<';
      }

      return '-';
    },
    nextLabel: function nextLabel() {
      if (this.element && this.element.props.nextButtonLbl) {
        return '>';
      }

      return '+';
    },
    dateLabel: function dateLabel() {
      return this.month_names[this.viewDate.getMonth()] + ' ' + this.viewDate.getFullYear();
    },
    selectedDate: function selectedDate() {
      if (this.element) {
        var input = this.dataBindingInput;

        if (input) {
          if (input.start && input.end) {
            if (input.start.toLowerCase) {
              input.start = Date.parse(input.start);
            }

            if (input.end.toLowerCase) {
              input.end = Date.parse(input.end);
            }
          }

          if (input.toLowerCase) {
            input = Date.parse(input);
          }

          return input;
        }
      }

      return this.selected;
    },
    body: function body() {
      var year = this.viewDate.getFullYear();
      var month = this.viewDate.getMonth();
      var first = new Date(year, month, 1);
      var offset = first.getDay();
      var week = [];
      var result = []; // male 45 and filter empty last row

      for (var i = 0; i < 35; i++) {
        if (i % 7 == 0) {
          week = [];
          result.push(week);
        }

        var day = {
          day: '',
          year: year,
          month: month,
          weekend: false
        };
        week.push(day);
        /**
         * Chekc if we are in current month
         */

        if (i - offset >= 0) {
          day.day = i - offset + 1 + '';
          var d1 = new Date(year, month, day.day); // check that we are not in next months

          if (d1.getMonth() != month) {
            day.day = '';
          }
        }

        if (i % 7 == 0 || i % 7 == 6) {
          day.weekend = true;
        }

        day.css = this.getSelectedCSS(day);
      }

      return result;
    }
  },
  methods: {
    getSelectedCSS: function getSelectedCSS(day) {
      if (this.isRange) {
        /**
         * Check if we have start range
         */
        if (this.selected.start) {
          var start = this.selected.start;

          if (day.year === start.getFullYear() && day.month === start.getMonth() && day.day == start.getDate()) {
            return 'qux-date-range-start';
          }
        }
        /**
         * Check if end
         */


        if (this.selected.end) {
          var end = this.selected.end;

          if (day.year === end.getFullYear() && day.month === end.getMonth() && day.day == end.getDate()) {
            return 'qux-date-range-end';
          }
        }
        /**
         * Check if between
         */


        if (this.selected.start && this.selected.end) {
          var dayMS = this.getMillis(day);
          var startMS = this.selected.start.getTime();
          var endMS = this.selected.end.getTime();

          if (startMS < dayMS && dayMS < endMS) {
            return 'qux-date-range-middle';
          }
        }
      } else {
        var selected = this.selected;

        if (day.year === selected.getFullYear() && day.month === selected.getMonth() && day.day == selected.getDate()) {
          return 'qux-date-selected';
        }
      }

      return '';
    },
    getMillis: function getMillis(day) {
      return new Date(day.year, day.month, day.day).getTime();
    },
    onBack: function onBack() {
      var date = this.viewDate;
      var day = date.getDay();
      var month = date.getMonth();
      var year = date.getFullYear();
      month--;

      if (month < 0) {
        month = 11;
        year--;
      }

      this.setView(year, month, day);
    },
    onNext: function onNext() {
      var date = this.viewDate;
      var day = date.getDay();
      var month = date.getMonth();
      var year = date.getFullYear();
      month++;

      if (month > 11) {
        month = 0;
        year++;
      }

      this.setView(year, month, day);
    },
    setView: function setView(year, month, day) {
      this.viewDate = new Date(year, month, day);
    },
    onSelect: function onSelect(d) {
      if (this.isRange) {
        if (this.selected.end) {
          this.selected.start = new Date(d.year, d.month, d.day), this.selected.end = null;
        } else {
          this.selected.end = new Date(d.year, d.month, d.day);

          if (this.selected.start > this.selected.end) {
            var help = this.selected.start;
            this.selected.start = this.selected.end;
            this.selected.end = help;
          }
        }

        if (this.selected.end) {
          Logger$1.log(5, 'qDate.select() > range : ', this.selected);

          if (this.element) {
            this.onValueChange({
              start: this.toIsoString(this.selected.start),
              end: this.toIsoString(this.selected.end)
            }, 'default');
          } else {
            this.$emit('change', this.selected);
            this.$emit('input', this.selected);
          }
        }
      } else {
        if (d.day !== '') {
          this.selected = new Date(d.year, d.month, d.day);
          Logger$1.log(5, 'qDate.select() > date : ', this.selected);

          if (this.element) {
            /**
             * Here is something wrong with UTC offsets
             */
            this.onValueChange(this.toIsoString(this.selected), 'default');
          } else {
            this.$emit('change', this.selected);
            this.$emit('input', this.selected);
          }
        }
      }
    },
    toIsoString: function toIsoString(date) {
      if (date) {
        var month = date.getMonth() + 1;

        if (month < 10) {
          month = '0' + month;
        }

        var day = date.getDate();

        if (day < 10) {
          day = '0' + day;
        }

        return "".concat(date.getFullYear(), "-").concat(month, "-").concat(day);
      }

      return null;
    }
  },
  watch: {},
  mounted: function mounted() {
    if (this.element) {
      this.isRange = this.element.props.range;
    }

    if (this.range === true) {
      this.isRange = true;
    }

    if (this.isRange) {
      this.selected = {
        start: new Date(),
        end: new Date(new Date().getTime() + 86400000 * 4)
      };
    }

    if (!this.element && this.value) {
      Logger$1.log(5, 'qDate.mounted() standalone');
      this.selected = this.value;

      if (this.value.start) {
        // copy value to ensure changes are not leaked
        this.selected = {
          start: this.value.start,
          end: this.value.end
        };
        this.viewDate = this.selected.start;
      } else {
        this.viewDate = this.value;
      }
    }

    Logger$1.log(0, 'qDate.mounted() enter', this.element);
  }
};

/* script */
var __vue_script__$n = script$n;
/* template */

var __vue_render__$n = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-date', _vm.cssClass],
    on: {
      "click": _vm.onClick
    }
  }, [_c('div', {
    staticClass: "qux-date-header"
  }, [_c('div', {
    staticClass: "qux-date-header-btn",
    on: {
      "click": function click($event) {
        $event.stopPropagation();
        return _vm.onBack.apply(null, arguments);
      }
    }
  }, [_c('span', {
    staticClass: "qux-common-valign-center"
  }, [_vm._v("\n                  " + _vm._s(_vm.backLabel) + "\n              ")])]), _vm._v(" "), _c('div', {
    staticClass: "qux-date-header-label"
  }, [_c('span', {
    staticClass: "qux-common-valign-center"
  }, [_vm._v("\n                  " + _vm._s(_vm.dateLabel) + "\n              ")])]), _vm._v(" "), _c('div', {
    staticClass: "qux-date-header-btn",
    on: {
      "click": function click($event) {
        $event.stopPropagation();
        return _vm.onNext.apply(null, arguments);
      }
    }
  }, [_c('span', {
    staticClass: "qux-common-valign-center"
  }, [_vm._v("\n                     " + _vm._s(_vm.nextLabel) + "\n              ")])])]), _vm._v(" "), _c('div', {
    staticClass: "qux-date-body"
  }, [_c('table', [_c('tbody', [_c('tr', _vm._l(_vm.day_names, function (d) {
    return _c('th', {
      key: d,
      staticClass: "qux-date-week-days"
    }, [_vm._v(_vm._s(d))]);
  }), 0), _vm._v(" "), _vm._l(_vm.body, function (week, i) {
    return _c('tr', {
      key: i
    }, _vm._l(week, function (d, j) {
      return _c('td', {
        key: j,
        class: [d.css, {
          'qux-date-weekend': d.weekend
        }, {
          'qux-date-workday': !d.weekend
        }],
        on: {
          "click": function click($event) {
            $event.stopPropagation();
            return _vm.onSelect(d);
          }
        }
      }, [_vm._v("\n                          " + _vm._s(d.day) + "\n                      ")]);
    }), 0);
  })], 2)])])]);
};

var __vue_staticRenderFns__$n = [];
/* style */

var __vue_inject_styles__$n = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-7e8de3dc_0", {
    source: ".qux-date{overflow:hidden}.qux-date .qux-date-header{display:flex;width:100%;height:15%;font-size:120%}.qux-date .qux-date-header .qux-date-header-btn{position:relative;width:15%;text-align:center;cursor:pointer}.qux-date .qux-date-header .qux-date-header-label{position:relative;text-align:center;flex-grow:1}.qux-date .qux-date-header-label .qux-common-valign-center{width:100%}.qux-date .qux-date-body{width:100%;height:85%}.qux-date .qux-date-body table{width:100%;height:100%;border-spacing:0;border-collapse:collapse;text-align:center}.qux-date .qux-date-body td,.qux-date .qux-date-body th{padding:5px;width:14.3%}.qux-date .qux-date-body td{cursor:pointer}.qux-date .qux-date-body .qux-date-range-end,.qux-date .qux-date-body .qux-date-range-start,.qux-date .qux-date-body .qux-date-selected{background:#333;color:#fff}.qux-date .qux-date-body .qux-date-range-middle{background:#555;color:#fff}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$n = undefined;
/* module identifier */

var __vue_module_identifier__$n = undefined;
/* functional template */

var __vue_is_functional_template__$n = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$n = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$n,
  staticRenderFns: __vue_staticRenderFns__$n
}, __vue_inject_styles__$n, __vue_script__$n, __vue_scope_id__$n, __vue_is_functional_template__$n, __vue_module_identifier__$n, false, createInjector, undefined, undefined);

//
var script$o = {
  name: 'qDatePicker',
  mixins: [__vue_component__$4, __vue_component__$i],
  data: function data() {
    return {
      isRange: false,
      isOpen: false,
      selected: null
    };
  },
  components: {
    'qDate': __vue_component__$n
  },
  computed: {
    icon: function icon() {
      if (this.element) {
        if (this.element.props.icon) {
          return this.element.props.icon;
        }
      }

      return false;
    },
    dropDownOption: function dropDownOption() {
      if (this.element) {
        return this.options.map(function (o) {
          if (o.toLowerCase) {
            return {
              label: o,
              value: o
            };
          }

          return o;
        });
      }

      return [];
    },
    selectedDate: function selectedDate() {
      if (this.element) {
        var input = this.dataBindingInput;

        if (input) {
          return input;
        }
      }

      return this.selected;
    },
    selectedLabel: function selectedLabel() {
      if (this.element) {
        var input = this.dataBindingInput;

        if (input) {
          if (input.start && input.end) {
            return this.toDateString(input.start) + ' - ' + this.toDateString(input.end);
          }

          if (input.toLowerCase) {
            input = Date.parse(input);
          }

          return this.toDateString(input);
        }
      }

      if (this.selected) {
        if (this.selected.start && this.selected.end) {
          return this.toDateString(this.selected.start) + ' - ' + this.toDateString(this.selected.end);
        }

        return this.toDateString(this.selected);
      }

      return this.label;
    },
    hasValue: function hasValue() {
      if (this.element) {
        var input = this.dataBindingInput;
        return input !== null && input !== undefined;
      }

      return this.selected !== null && this.selected !== undefined;
    }
  },
  methods: {
    open: function open() {
      Logger$1.log(5, 'qDatePicker.open()');
      this.isOpen = !this.isOpen;

      if (this.isOpen) {
        this._bodyListener = this.on(this.body(), 'mousedown', this.close);
      }
    },
    close: function close() {
      Logger$1.log(5, 'qDatePicker.close()');
      this.isOpen = false;

      if (this._bodyListener) {
        this._bodyListener.remove();
      }
    },
    select: function select(selected) {
      if (this.element) {
        this.onValueChange(selected, 'default');
        Logger$1.log(5, 'qDatePicker.toggle() >' + this.dataBindingInputPath, selected);
      } else {
        this.selected = selected;
        this.$emit('change', this.selected);
        this.$emit('input', this.selected);
        Logger$1.log(5, 'qDatePicker.select() >', this.selected);
      }

      setTimeout(this.close, 250);
    },
    toDateString: function toDateString(d) {
      if (d && d.toLocaleDateString) {
        return d.toLocaleDateString();
      }

      return '';
    }
  },
  watch: {},
  destroyed: function destroyed() {
    this.close();
  },
  mounted: function mounted() {
    if (this.element) {
      this.isRange = this.element.props.range;
    }

    if (this.range === true) {
      this.isRange = true;
    }

    Logger$1.log(5, 'qDatePicker.mounted() enter', this.element);
  }
};

/* script */
var __vue_script__$o = script$o;
/* template */

var __vue_render__$o = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-date-picker', _vm.cssClass, {
      'qux-error': _vm.hasError
    }, {
      'qux-open': _vm.isOpen
    }],
    on: {
      "click": _vm.open
    }
  }, [_c('span', {
    class: ['qux-common-label', {
      'qux-common-placeholder': !_vm.hasValue
    }]
  }, [_vm._v("\n          " + _vm._s(_vm.selectedLabel) + "\n    ")]), _vm._v(" "), _c('div', {
    staticClass: "qux-date-picker-expend"
  }, [_vm.icon ? _c('span', {
    class: _vm.icon + ' qux-date-picker-icon'
  }) : _c('span', {
    staticClass: "qux-date-picker-carret"
  })]), _vm._v(" "), _vm.isOpen ? _c('div', {
    staticClass: "qux-date-picker-popup",
    on: {
      "click": function click($event) {
        $event.stopPropagation();
      },
      "mousedown": function mousedown($event) {
        $event.stopPropagation();
      }
    }
  }, [_c('qDate', {
    attrs: {
      "range": _vm.isRange,
      "value": _vm.selectedDate
    },
    on: {
      "change": _vm.select
    }
  })], 1) : _vm._e()]);
};

var __vue_staticRenderFns__$o = [];
/* style */

var __vue_inject_styles__$o = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-5a26908a_0", {
    source: ".qux-date-picker{border:1px solid #333;position:relative}.qux-date-picker .qux-common-placeholder{opacity:.7}.qux-date-picker .qux-date-picker-icon{position:absolute;right:50%;top:50%;transform:translateY(-50%) translateX(50%)}.qux-date-picker .qux-date-picker-expend{position:absolute;height:100%;top:0;right:0;width:40px}.qux-date-picker .qux-date-picker-carret{border-left:4px solid transparent;border-right:4px solid transparent;border-top:4px solid;display:inline-block;height:0;margin-left:2px;vertical-align:middle;width:0;position:absolute;right:50%;top:50%;transform:translateY(-50%) translateX(50%);cursor:pointer}.qux-date-picker .qux-date-picker-popup{position:absolute;top:calc(100% + 1px);left:0;display:none;border:1px solid #333;width:100%;height:300px;max-width:300px;max-height:300px;z-index:1000;background:#fff}.qux-date-picker .qux-date-picker-popup .qux-date{height:100%}.qux-date-picker .qux-date-picker-item{display:block;cursor:pointer}.qux-date-picker.qux-open .qux-date-picker-popup{display:block}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$o = undefined;
/* module identifier */

var __vue_module_identifier__$o = undefined;
/* functional template */

var __vue_is_functional_template__$o = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$o = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$o,
  staticRenderFns: __vue_staticRenderFns__$o
}, __vue_inject_styles__$o, __vue_script__$o, __vue_scope_id__$o, __vue_is_functional_template__$o, __vue_module_identifier__$o, false, createInjector, undefined, undefined);

//
var script$p = {
  name: 'qStepper',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      selected: null
    };
  },
  computed: {
    segmentOptions: function segmentOptions() {
      if (this.element) {
        return this.options.map(function (o) {
          if (o.toLowerCase) {
            return {
              label: o,
              value: o
            };
          }

          return o;
        });
      }

      return [];
    },
    isMultiSelect: function isMultiSelect() {
      if (this.element) {
        return this.element.props.multi;
      }

      return false;
    }
  },
  methods: {
    isChecked: function isChecked(option) {
      var input = this.dataBindingInput;

      if (input) {
        if (this.isMultiSelect) {
          Logger$1.log(5, 'qSegmentButton.isChecked() > Mutli : ' + option.value, input);
          return input.indexOf(option.value) >= 0;
        } else {
          Logger$1.log(5, 'qSegmentButton.isChecked() > Single : ' + option.value, input);
          return input === option.value;
        }
      }

      return false;
    },
    select: function select(option) {
      var value = option.value;

      if (this.isMultiSelect) {
        var input = this.dataBindingInput;

        if (input) {
          if (!Array.isArray(input)) {
            input = [input];
          }

          var pos = input.indexOf(value);

          if (pos < 0) {
            input.push(value);
          } else {
            Vue.delete(input, pos);
          }
        } else {
          input = [value];
        }

        this.onValueChange(input, 'default');
        Logger$1.log(5, 'qSegmentButton.select() > Single: ' + this.dataBindingInputPath);
      } else {
        this.onValueChange(value, 'default');
        Logger$1.log(5, 'qSegmentButton.select() > Single: ' + this.dataBindingInputPath, value);
      }
    }
  },
  mounted: function mounted() {}
};

/* script */
var __vue_script__$p = script$p;
/* template */

var __vue_render__$p = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-segment', _vm.cssClass]
  }, _vm._l(_vm.segmentOptions, function (option) {
    return _c('div', {
      key: option.value,
      class: ['qux-segment-item', {
        'qux-segment-item-selected': _vm.isChecked(option)
      }],
      on: {
        "click": function click($event) {
          return _vm.select(option);
        }
      }
    }, [_c('span', {
      staticClass: "qux-segment-item-label"
    }, [_vm._v("\n          " + _vm._s(option.label) + "\n      ")])]);
  }), 0);
};

var __vue_staticRenderFns__$p = [];
/* style */

var __vue_inject_styles__$p = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-e41effc0_0", {
    source: ".qux-segment{display:flex;justify-content:stretch}.qux-segment .qux-segment-item{flex-grow:1;height:100%;cursor:pointer;display:flex;align-items:center}.qux-segment .qux-segment-item .qux-segment-item-label{display:inline-block;width:100%}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$p = undefined;
/* module identifier */

var __vue_module_identifier__$p = undefined;
/* functional template */

var __vue_is_functional_template__$p = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$p = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$p,
  staticRenderFns: __vue_staticRenderFns__$p
}, __vue_inject_styles__$p, __vue_script__$p, __vue_scope_id__$p, __vue_is_functional_template__$p, __vue_module_identifier__$p, false, createInjector, undefined, undefined);

//
var script$q = {
  name: 'qRadioGroup',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      selected: null,
      ratingOptions: [1, 2, 3, 4, 5]
    };
  },
  methods: {
    getIcon: function getIcon(option) {
      var input = this.dataBindingInput;
      Logger$1.log(5, 'qRating.isChecked() >' + option, input);

      if (input) {
        if (input >= option) {
          return 'mdi mdi-star';
        }
      }

      return 'mdi mdi-star-outline';
    },
    select: function select(option) {
      this.onValueChange(option, 'default');
      Logger$1.log(5, 'qRating.select() >' + this.dataBindingInputPath, option);
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qRating.mounted() enter');
  }
};

/* script */
var __vue_script__$q = script$q;
/* template */

var __vue_render__$q = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-rating', _vm.cssClass]
  }, _vm._l(_vm.ratingOptions, function (option) {
    return _c('span', {
      key: option,
      class: ['qux-rating-icon'],
      on: {
        "click": function click($event) {
          return _vm.select(option);
        }
      }
    }, [_c('span', {
      class: _vm.getIcon(option)
    })]);
  }), 0);
};

var __vue_staticRenderFns__$q = [];
/* style */

var __vue_inject_styles__$q = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-61018948_0", {
    source: ".qux-rating{display:flex;justify-content:space-between}.qux-rating .mdi{cursor:pointer}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$q = undefined;
/* module identifier */

var __vue_module_identifier__$q = undefined;
/* functional template */

var __vue_is_functional_template__$q = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$q = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$q,
  staticRenderFns: __vue_staticRenderFns__$q
}, __vue_inject_styles__$q, __vue_script__$q, __vue_scope_id__$q, __vue_is_functional_template__$q, __vue_module_identifier__$q, false, createInjector, undefined, undefined);

//
var script$r = {
  name: 'qIconToggle',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      checked: false
    };
  },
  computed: {
    isSelected: function isSelected() {
      if (this.element) {
        var input = this.dataBindingInput;
        return input;
      }

      return this.checked;
    },
    icon: function icon() {
      if (this.element) {
        var input = this.dataBindingInput;

        if (input) {
          return this.element.props.activeIcon;
        } else {
          return this.element.props.passiveIcon;
        }
      }

      return '';
    }
  },
  methods: {
    toggle: function toggle() {
      if (this.element) {
        var value = !this.isSelected;
        this.onValueChange(value, 'default');
        Logger$1.log(1, 'qIconToggle.toggle() >' + this.dataBindingInputPath, value);
      } else {
        this.checked = !this.checked;
        this.$emit('change', this.checked);
        this.$emit('input', this.checked);
        Logger$1.log(5, 'qIconToggle.toggle() >' + this.checked);
      }
    }
  },
  mounted: function mounted() {}
};

/* script */
var __vue_script__$r = script$r;
/* template */

var __vue_render__$r = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-icon-toggle', _vm.cssClass, {
      'qux-icon-toggle-selected': _vm.isSelected
    }],
    on: {
      "click": _vm.toggle
    }
  }, [_c('span', {
    class: ['qux-icon', _vm.icon]
  }), _vm._v(" "), _vm.label ? _c('span', {
    staticClass: "qux-icon-toggle-label"
  }, [_vm._v(_vm._s(_vm.label))]) : _vm._e()]);
};

var __vue_staticRenderFns__$r = [];
/* style */

var __vue_inject_styles__$r = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-47e1fda2_0", {
    source: ".qux-icon-toggle{display:flex;cursor:pointer}.qux-icon-toggle .qux-icon-toggle-label{padding-left:10px}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$r = undefined;
/* module identifier */

var __vue_module_identifier__$r = undefined;
/* functional template */

var __vue_is_functional_template__$r = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$r = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$r,
  staticRenderFns: __vue_staticRenderFns__$r
}, __vue_inject_styles__$r, __vue_script__$r, __vue_scope_id__$r, __vue_is_functional_template__$r, __vue_module_identifier__$r, false, createInjector, undefined, undefined);

//
var script$s = {
  name: "qCombo",
  mixins: [__vue_component__$4, __vue_component__$i],
  data: function data() {
    return {
      inputValue: "",
      isOpen: false,
      selected: null,
      matches: [],
      selectedIndex: -1
    };
  },
  computed: {
    placeholder: function placeholder() {
      if (this.element && this.element.props && this.element.props.placeholder) {
        return this.element.props.label;
      }

      return '';
    },
    hints: function hints() {
      return this.options.map(function (o) {
        if (o.toLowerCase) {
          return {
            label: o,
            value: o
          };
        }

        return o;
      });
    },
    selectOption: function selectOption() {
      if (this.element) {
        var input = this.dataBindingInput;

        if (input) {
          return input;
        } else {
          return this.options[0];
        }
      }

      return this.selected;
    }
  },
  methods: {
    onKeyPress: function onKeyPress(e) {
      if (this.inputValue.length > 2) {
        var search = this.inputValue.toLowerCase();
        this.matches = this.hints.filter(function (hint) {
          return hint.label.toLowerCase().indexOf(search) >= 0;
        });

        if (this.matches.length > 0) {
          this.open();
          this.handleArrows(e);
        }
      } else {
        this.close();
      }
    },
    handleArrows: function handleArrows(e) {
      var key = e.which || e.keyCode;

      if (40 == key) {
        this.selectedIndex = Math.min(this.matches.length, this.selectedIndex + 1);
        return;
      }

      if (38 == key) {
        this.selectedIndex = Math.max(-1, this.selectedIndex - 1);
        return;
      }

      if (27 == key) {
        this.onInputChange();
        this.close();
        return;
      }

      if (13 == key) {
        Logger$1.log(-5, "qCombo.handleArrows()", this.selectedIndex, this.matches);

        if (this.selectedIndex >= 0 && this.selectedIndex < this.matches.length) {
          this.select(this.matches[this.selectedIndex]);
          return;
        }

        this.onInputChange();
        this.close();
        return;
      }

      this.selectedIndex = -1;
    },
    blur: function blur() {
      if (this.$refs.comboInput) {
        this.$refs.comboInput.blur();
      }
    },
    onBlur: function onBlur() {
      this.onInputChange();
      this.close();
    },
    open: function open() {
      Logger$1.log(5, "qCombo.open()");
      this.isOpen = true;

      if (this.isOpen) {
        this._bodyListener = this.on(this.body(), "mousedown", this.close);
      }
    },
    close: function close() {
      Logger$1.log(-5, "qCombo.close()");
      this.isOpen = false;
      this.selectedIndex = -1;

      if (this._bodyListener) {
        this._bodyListener.remove();
      }
    },
    onInputChange: function onInputChange() {
      Logger$1.log(-5, "qCombo.onInputChange()", this.inputValue);

      if (this.element) {
        this.onValueChange(this.inputValue, "default");
      } else {
        this.selected = this.inputValue;
        this.$emit("change", this.selected);
        this.$emit("input", this.selected);
      }
    },
    select: function select(option) {
      Logger$1.log(-5, "qCombo.select()", option.value);

      if (this.element) {
        this.onValueChange(option.value, "default");
        Logger$1.log(5, "qCombo.toggle() >" + this.dataBindingInputPath, option.value);
      } else {
        this.selected = option.value;
        this.$emit("change", this.selected);
        this.$emit("input", this.selected);
        Logger$1.log(5, "qCombo.select() >" + this.selected);
      }

      this.inputValue = option.label;
      this.close();
    }
  },
  watch: {},
  destroyed: function destroyed() {
    this.close();
  },
  mounted: function mounted() {
    Logger$1.log(1, "qCombo.mounted() enter", this.value);

    if (!this.element) {
      this.inputValue = this.value;
    }
  }
};

/* script */
var __vue_script__$s = script$s;
/* template */

var __vue_render__$s = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-combo', _vm.cssClass, {
      'qux-error': _vm.hasError
    }, {
      'qux-open': _vm.isOpen
    }]
  }, [_c('input', {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.inputValue,
      expression: "inputValue"
    }],
    ref: "comboInput",
    staticClass: "qux-combo-input",
    attrs: {
      "placeholder": _vm.placeholder
    },
    domProps: {
      "value": _vm.inputValue
    },
    on: {
      "keyup": _vm.onKeyPress,
      "change": _vm.onInputChange,
      "blur": _vm.onBlur,
      "input": function input($event) {
        if ($event.target.composing) {
          return;
        }

        _vm.inputValue = $event.target.value;
      }
    }
  }), _vm._v(" "), _vm.isOpen && _vm.matches.length > 0 ? _c('div', {
    staticClass: "qux-combo-popup"
  }, _vm._l(_vm.matches, function (o, i) {
    return _c('span', {
      key: o.label,
      class: ['qux-combo-item', {
        'qux-combo-item-selected': i === _vm.selectedIndex
      }],
      on: {
        "mousedown": function mousedown($event) {
          $event.stopPropagation();
          return _vm.select(o);
        }
      }
    }, [_vm._v("\n      " + _vm._s(o.label) + "\n    ")]);
  }), 0) : _vm._e()]);
};

var __vue_staticRenderFns__$s = [];
/* style */

var __vue_inject_styles__$s = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-cfb26c16_0", {
    source: ".qux-combo{border:none;position:relative;transition:all .2s}.qux-combo .qux-combo-input{width:100%;height:100%}.qux-combo .qux-combo-input:focus{outline:0}.qux-combo .qux-combo-popup{position:absolute;top:calc(100% + 1px);left:0;display:none;border:1px solid #333;width:100%;z-index:1000;max-height:300px;overflow:auto;background:#fff}.qux-combo .qux-combo-item{display:block;cursor:pointer}.qux-combo.qux-open .qux-combo-popup{display:block}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$s = undefined;
/* module identifier */

var __vue_module_identifier__$s = undefined;
/* functional template */

var __vue_is_functional_template__$s = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$s = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$s,
  staticRenderFns: __vue_staticRenderFns__$s
}, __vue_inject_styles__$s, __vue_script__$s, __vue_scope_id__$s, __vue_is_functional_template__$s, __vue_module_identifier__$s, false, createInjector, undefined, undefined);

//
var script$t = {
  name: 'qTable',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      'selected': [],
      'sortColumn': '',
      'sortOrder': 'arc'
    };
  },
  components: {
    'CheckBox': __vue_component__$c
  },
  computed: {
    columns: function columns() {
      if (this.element) {
        var columns = [];

        if (this.element.props.columns && this.element.props.columns.length > 0) {
          columns = this.element.props.columns.map(function (col) {
            return col.label;
          });
        } else {
          var data = this.parseData(this.element.props.data);
          columns = data[0];
        }

        var offset = 0;

        if (this.hasCheckBox) {
          columns.unshift('');
          offset = 1;
        }

        if (this.hasActions) {
          columns.push('');
        }

        return columns.map(function (col, i) {
          return {
            id: i,
            label: col,
            key: i - offset
          };
        });
      }

      return [];
    },
    hasCheckBox: function hasCheckBox() {
      if (this.element) {
        return this.element.style.checkBox === true;
      }

      return false;
    },
    hasActions: function hasActions() {
      if (this.element) {
        return this.element.props.tableActions && this.element.props.tableActions.length > 0;
      }

      return false;
    },
    actions: function actions() {
      if (this.element) {
        return this.element.props.tableActions;
      }

      return [];
    },
    sortedRows: function sortedRows() {
      var _this = this;

      if (this.sortColumn) {
        var key = this.sortColumn.key;
        var rows = this.rows;
        return rows.sort(function (a, b) {
          var valueA = a.values[key];
          var valueB = b.values[key];

          if (valueA.localeCompare && valueB.localeCompare) {
            if (_this.sortOrder === 'asc') {
              return valueA.localeCompare(valueB);
            } else {
              return valueB.localeCompare(valueA);
            }
          }

          if (_this.sortOrder === 'asc') {
            return valueA - valueB;
          } else {
            return valueB - valueA;
          }
        });
      }

      return this.rows;
    },
    rows: function rows() {
      var dataBindingInput = this.dataBindingInput;

      if (dataBindingInput && Array.isArray(dataBindingInput)) {
        if (this.element && this.element.props && this.element.props.columns && this.element.props.columns.length > 0) {
          var cols = this.element.props.columns;
          return dataBindingInput.map(function (row, i) {
            var values = cols.map(function (col) {
              if (row[col.databinding] !== undefined) {
                return row[col.databinding];
              }

              return '';
            });
            return {
              id: i,
              values: values,
              obj: row
            };
          });
        }

        return dataBindingInput;
      } else {
        if (this.element) {
          var data = this.parseData(this.element.props.data);
          return data.filter(function (row, i) {
            return i > 0;
          }).map(function (row, i) {
            return {
              id: i,
              values: row,
              obj: row
            };
          });
        }
      }

      return [];
    }
  },
  methods: {
    sortBy: function sortBy(col) {
      Logger$1.log(0, 'qTable.sortBy() enter > ', col);
      this.sortColumn = col;

      if (this.sortOrder === 'asc') {
        this.sortOrder = 'desc';
      } else {
        this.sortOrder = 'asc';
      }
    },
    onActionClick: function onActionClick(action, row) {
      Logger$1.log(5, 'qTable.onActionClick() enter > ' + action.label, row);
      this.$emit('qCallback', this.element, {
        callback: action.callback,
        params: row.obj
      });
    },
    selectRow: function selectRow(row) {
      var _this2 = this;

      var pos = this.selected.indexOf(row.id);

      if (pos < 0) {
        this.selected.push(row.id);
      } else {
        this.$delete(this.selected, pos);
      }

      var databinding = this.dataBinding;

      if (databinding.output) {
        var values = this.rows.filter(function (row) {
          return _this2.selected.indexOf(row.id) >= 0;
        }).map(function (row) {
          return row.obj;
        });
        this.onValueChange(values, 'output');
      }
    },
    isRowSelected: function isRowSelected(row) {
      return this.selected.indexOf(row.id) >= 0;
    },
    parseData: function parseData(data) {
      /**
       * for now assume csv
       */
      if (data.substring) {
        var table = [];
        var lines = data.split("\n");

        for (var i = 0; i < lines.length; i++) {
          var line = lines[i];
          table.push(line.split(","));
        }

        return table;
      } else {
        return data;
      }
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qTable.mounted() enter');
  }
};

/* script */
var __vue_script__$t = script$t;
/* template */

var __vue_render__$t = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-table', _vm.cssClass]
  }, [_c('table', [_c('thead', [_c('tr', _vm._l(_vm.columns, function (col) {
    return _c('th', {
      key: col.id,
      class: 'qux-table-cell qux-table-column-' + col.id,
      on: {
        "click": function click($event) {
          return _vm.sortBy(col);
        }
      }
    }, [_vm._v("\n                    " + _vm._s(col.label) + "\n                    "), _vm.sortColumn.id == col.id && _vm.sortOrder === 'asc' ? _c('span', {
      staticClass: "mdi mdi-chevron-down"
    }) : _vm._e(), _vm._v(" "), _vm.sortColumn.id == col.id && _vm.sortOrder !== 'asc' ? _c('span', {
      staticClass: "mdi mdi-chevron-up"
    }) : _vm._e()]);
  }), 0)]), _vm._v(" "), _c('tbody', _vm._l(_vm.sortedRows, function (row) {
    return _c('tr', {
      key: row.id,
      staticClass: "qux-table-row"
    }, [_vm.hasCheckBox ? _c('td', {
      staticClass: "qux-table-cell"
    }, [_c('CheckBox', {
      attrs: {
        "value": _vm.isRowSelected(row)
      },
      on: {
        "change": function change($event) {
          return _vm.selectRow(row);
        }
      }
    })], 1) : _vm._e(), _vm._v(" "), _vm._l(row.values, function (value, i) {
      return _c('td', {
        key: i,
        staticClass: "qux-table-cell"
      }, [_vm._v("\n                    " + _vm._s(value) + "\n                ")]);
    }), _vm._v(" "), _vm.hasActions ? _c('td', {
      staticClass: "qux-table-action-cntr"
    }, _vm._l(_vm.actions, function (action, i) {
      return _c('a', {
        key: action.label,
        class: ['qux-table-action', 'qux-table-action-' + i, {
          'qux-table-action-hover': action.isHover
        }],
        on: {
          "click": function click($event) {
            return _vm.onActionClick(action, row);
          }
        }
      }, [_vm._v("\n                        " + _vm._s(action.label) + "\n                    ")]);
    }), 0) : _vm._e()], 2);
  }), 0)])]);
};

var __vue_staticRenderFns__$t = [];
/* style */

var __vue_inject_styles__$t = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-59d391a6_0", {
    source: ".qux-table{overflow:auto}.qux-table.qux-table-fixed{display:flex;flex-direction:column}.qux-table.qux-table-fixed .qux-table-body{overflow:auto;flex-grow:1}.qux-table table{width:100%;height:100%;border-spacing:0;border-collapse:collapse}.qux-table table .qux-table-action{cursor:pointer}.qux-table table .qux-table-action:hover{text-decoration:underline}.qux-table table .qux-table-action-hover{opacity:0}.qux-table table th{cursor:pointer}.qux-table table tr:hover .qux-table-action-hover{opacity:1}.qux-table table .qux-table-action-cntr{text-align:right}.qux-checkbox{display:inline-block;overflow:hidden;cursor:pointer}.qux-checkbox .qux-checkbox-cntr{position:relative;width:100%;height:100%;display:inline-block;vertical-align:top;border:1px solid #333}.qux-checkbox .qux-checkbox-hook{opacity:0;transition-duration:.3s;transition-property:opacity;border-bottom:3px solid #333;border-right:3px solid #333;transform:rotate(45deg);-ms-transform:rotate(45deg);-webkit-transform:rotate(45deg);display:inline-block;height:70%;width:30%;left:30%;position:absolute;opacity:0;top:0}.qux-checkbox .qux-checkbox-label{margin-left:10px;vertical-align:middle;cursor:pointer}.qux-checkbox-checked .qux-checkbox-hook{opacity:1}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$t = undefined;
/* module identifier */

var __vue_module_identifier__$t = undefined;
/* functional template */

var __vue_is_functional_template__$t = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$t = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$t,
  staticRenderFns: __vue_staticRenderFns__$t
}, __vue_inject_styles__$t, __vue_script__$t, __vue_scope_id__$t, __vue_is_functional_template__$t, __vue_module_identifier__$t, false, createInjector, undefined, undefined);

//

var script$u = {
  name: 'qStepper',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      selected: 0,
      offset: 0
    };
  },
  computed: {
    selectedValue: function selectedValue() {
      if (this.element) {
        var dataBindig = this.dataBinding;

        if (dataBindig && dataBindig.output) {
          return JSONPath$1.get(this.value, dataBindig.output);
        }
      }

      return this.selected;
    },
    maxValue: function maxValue() {
      var dataBindig = this.dataBinding;

      if (dataBindig && dataBindig.elements) {
        return JSONPath$1.get(this.value, dataBindig.elements);
      }

      if (this.element) {
        return this.element.props.max;
      }

      return 0;
    },
    hasBack: function hasBack() {
      return this.offset > 0;
    },
    backIcon: function backIcon() {
      if (this.element) {
        return this.element.props.iconBack;
      }

      return '';
    },
    nextIcon: function nextIcon() {
      if (this.element) {
        return this.element.props.iconNext;
      }

      return '';
    },
    hasNext: function hasNext() {
      return this.numberofVisibleElements + this.offset < this.maxValue;
    },
    numberofVisibleElements: function numberofVisibleElements() {
      if (this.element) {
        return this.getNumberOfVisibleElements(this.element, this.element.style, this.element.w);
      }

      return 0;
    },
    valign: function valign() {
      if (this.element.style && this.element.style.verticalAlign) {
        return "qux-valign-".concat(this.element.style.verticalAlign, " ");
      }

      return '';
    },
    pages: function pages() {
      var pages = [];

      for (var i = 0; i < this.numberofVisibleElements; i++) {
        pages.push({
          value: this.offset + i,
          label: this.offset + i + 1
        });
      }

      return pages;
    }
  },
  methods: {
    onBack: function onBack() {
      Logger$1.log(0, 'QPaging', 'onBack');
      this.offset -= this.numberofVisibleElements;

      if (this.offset < 2) {
        this.offset = 0;
      }
    },
    onNext: function onNext() {
      Logger$1.log(0, 'QPaging', 'onNext');
      this.offset += this.numberofVisibleElements;

      if (this.offset > this.maxValue - this.numberofVisibleElements) {
        this.offset = this.maxValue - this.numberofVisibleElements;
      }
    },
    onSelect: function onSelect(page) {
      Logger$1.log(1, 'QPaging', 'onSelect', page.value);
      this.onValueChange(page.value, 'output');
      this.selected = page.value;
    },
    isChecked: function isChecked(page) {
      return page.value === this.selectedValue;
    },
    getNumberOfVisibleElements: function getNumberOfVisibleElements(model, style, width) {
      // keep in szyn
      var elementWidth = style.fontSize * 2;
      var numberofVisibleElements = Math.round(width * 0.9 / elementWidth) - 1;
      numberofVisibleElements = Math.min(numberofVisibleElements, this.maxValue);

      if (model.props.maxVisisble > 1) {
        numberofVisibleElements = Math.min(numberofVisibleElements, model.props.maxVisisble);
      }

      if (this.offset > 0) {
        numberofVisibleElements--;
      }

      return numberofVisibleElements;
    }
  },
  mounted: function mounted() {
    Logger$1.log(3, 'QPaging', 'mounted');
  }
};

/* script */
var __vue_script__$u = script$u;
/* template */

var __vue_render__$u = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-paging qux-common-no-select', _vm.cssClass]
  }, [_vm.hasBack ? _c('span', {
    class: 'qux-paging-item ' + _vm.valign,
    on: {
      "click": _vm.onBack
    }
  }, [_c('span', {
    class: 'qux-common-label'
  }, [_c('span', {
    class: _vm.backIcon
  })])]) : _vm._e(), _vm._v(" "), _vm._l(_vm.pages, function (page) {
    return _c('span', {
      key: page.value,
      class: ['qux-paging-item', {
        'qux-paging-item-active': _vm.isChecked(page)
      }, _vm.valign],
      on: {
        "click": function click($event) {
          return _vm.onSelect(page);
        }
      }
    }, [_c('span', {
      class: 'qux-common-label '
    }, [_vm._v("\n              " + _vm._s(page.label) + "\n        ")])]);
  }), _vm._v(" "), _vm.hasNext ? _c('span', {
    class: 'qux-paging-item ' + _vm.valign,
    on: {
      "click": _vm.onNext
    }
  }, [_c('span', {
    class: 'qux-common-label  '
  }, [_c('span', {
    class: _vm.nextIcon
  })])]) : _vm._e()], 2);
};

var __vue_staticRenderFns__$u = [];
/* style */

var __vue_inject_styles__$u = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-83f5ea4e_0", {
    source: ".qux-paging{display:flex;justify-content:space-between}.qux-paging .qux-paging-item{cursor:pointer;position:relative}.qux-paging .qux-paging-item-active{background:#333}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$u = undefined;
/* module identifier */

var __vue_module_identifier__$u = undefined;
/* functional template */

var __vue_is_functional_template__$u = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$u = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$u,
  staticRenderFns: __vue_staticRenderFns__$u
}, __vue_inject_styles__$u, __vue_script__$u, __vue_scope_id__$u, __vue_is_functional_template__$u, __vue_module_identifier__$u, false, createInjector, undefined, undefined);

//
var script$v = {
  name: 'qBarCHart',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      scaleFactor: 1
    };
  },
  computed: {
    chartType: function chartType() {
      if (this.element) {
        return this.element.type;
      }

      return '';
    },
    chartImage: function chartImage() {
      if (this.element) {
        var url = this.render(this.element, this.element.style, this.chartData, this.chartValue);
        return url;
      }

      return '';
    },
    chartData: function chartData() {
      var input = this.dataBindingInput;

      if (input) {
        return input;
      }

      if (this.element && this.element.props) {
        return this.element.props.data;
      }

      return [];
    },
    chartValue: function chartValue() {
      var input = this.dataBindingInput;

      if (input !== null && input !== undefined) {
        return input;
      }

      if (this.element && this.element.props) {
        return this.element.props.value;
      }

      return 0;
    }
  },
  methods: {
    render: function render(model, style, data, value) {
      if (model.type == "BarChart") {
        if (model.props.isHorizontal) {
          return this.renderHorizontal(model, style, data, value);
        } else if (model.props.isLine) {
          return this.renderLine(model, style, data, value);
        } else {
          return this.renderVertical(model, style, data, value);
        }
      } else if (model.type == "RingChart") {
        return this.renderRing(model, style, data, value);
      } else if (model.type == "MultiRingChart") {
        var r = Math.round(Math.min(model.w, model.h) / 2);
        var width = Math.min(r, style.lineWidth * this.scaleFactor);
        return this.renderPie(model, style, data, width);
      } else if (model.type == "PieChart") {
        var _width = Math.min(model.w, model.h) / 2;

        return this.renderPie(model, style, data, _width);
      } else {
        console.warn("render() > Not supported type : " + model.type);
      }
    },
    renderRing: function renderRing(model, style, data, p) {
      if (p > 1) {
        p = p / 100;
      }

      var w = model.w * this.scaleFactor;
      var h = model.h * this.scaleFactor;
      var canvas = document.createElement("canvas");
      canvas.width = w;
      canvas.height = h; // let n = 0.5;

      var x = Math.round(Math.min(w, h) / 2);
      var width = Math.min(x, style.lineWidth * this.scaleFactor);
      var ctx = canvas.getContext("2d");
      ctx.beginPath();
      var s = this.degreesToRadians(p * 360);
      var e = this.degreesToRadians(360);
      ctx.arc(x, x, x - width / 2, s, e);
      ctx.strokeStyle = style.background;
      ctx.lineWidth = width;
      ctx.stroke();
      ctx.beginPath();
      s = this.degreesToRadians(0);
      e = this.degreesToRadians(360 * p);
      ctx.arc(x, x, x - width / 2, s, e);
      ctx.strokeStyle = style.color;
      ctx.lineWidth = width;
      ctx.stroke();
      return canvas.toDataURL("image/png");
    },
    renderPie: function renderPie(model, style, data, width) {
      var w = model.w * this.scaleFactor;
      var h = model.h * this.scaleFactor;
      var canvas = document.createElement("canvas");
      canvas.width = w;
      canvas.height = h;
      var x = Math.round(Math.min(w, h) / 2);
      /**
       * ToDo: Check if array of arrays or simple array
       */

      var row = data[0];
      var sum = 0;

      for (var i = 0; i < row.length; i++) {
        sum += row[i] * 1;
      }

      var ctx = canvas.getContext("2d");
      var lastP = 0;

      for (var _i = 0; _i < row.length; _i++) {
        var v = row[_i];
        var p = v / sum + lastP;
        ctx.beginPath();
        var s = this.degreesToRadians(lastP * 360);
        var e = this.degreesToRadians(360 * p);
        ctx.arc(x, x, x - width / 2, s, e);

        if (style["background" + _i]) {
          ctx.strokeStyle = style["background" + _i];
        }

        ctx.strokeStyle = style.color;
        ctx.lineWidth = width;
        ctx.stroke();
        lastP += v / sum;
      }

      return canvas.toDataURL("image/png");
    },
    degreesToRadians: function degreesToRadians(degrees) {
      return degrees * (Math.PI / 180) - Math.PI / 2;
    },
    renderLine: function renderLine(model, style, data) {
      data = this.flip(data);
      var w = model.w * this.scaleFactor;
      var h = model.h * this.scaleFactor;
      var canvas = document.createElement("canvas");
      canvas.width = w;
      canvas.height = h;
      var n = 0.5;
      var ctx = canvas.getContext("2d");
      /**
       * Render lines
       */

      for (var r = 0; r < data.length; r++) {
        var row = data[r];
        var step = Math.round(w / (row.length - 1));
        ctx.beginPath();
        var y = 0;

        for (var c = 0; c < row.length; c++) {
          var v = row[c];
          y = h - Math.round(v * 1 / this.max * h);

          if (c == 0) {
            ctx.moveTo(n, y + n);
          } else {
            ctx.lineTo(c * step + n, y + n);
          }
        }

        if (model.has && model.has.fill) {
          ctx.lineTo(w + n, y + n);
          ctx.lineTo(w + n, h + n);
          ctx.lineTo(n, h + n);
          ctx.closePath();
        }

        if (style.lineWidth) {
          ctx.lineWidth = style.lineWidth * this.scaleFactor;
        }

        if (style["background" + r]) {
          ctx.strokeStyle = style["background" + r];

          if (model.has && model.has.fill) {
            ctx.fillStyle = style["background" + r];
            ctx.fill();
          }
        }

        ctx.stroke();
      }

      return canvas.toDataURL("image/png");
    },
    renderVertical: function renderVertical(model, style, data) {
      var w = model.w * this.scaleFactor;
      var h = model.h * this.scaleFactor;
      var canvas = document.createElement("canvas");
      canvas.width = w;
      canvas.height = h;
      var ctx = canvas.getContext("2d");
      var summary = this.summary(data);
      var groupWidth = w / summary.groups;

      for (var r = 0; r < data.length; r++) {
        var group = data[r];
        var barWidth = Math.floor(groupWidth / (group.length + 1));

        if (barWidth === 100) {
          barWidth = 50;
        }

        var groupOffSet = groupWidth * r + barWidth / 2;

        for (var c = 0; c < group.length; c++) {
          var v = group[c];
          var barHeight = Math.round(h * (v / summary.max));
          var y = Math.round(groupOffSet + c * barWidth);
          ctx.beginPath();
          ctx.lineWidth = "4";
          ctx.strokeStyle = "green";

          if (style["background" + c]) {
            ctx.fillStyle = style["background" + c];
          }

          ctx.fillRect(y, h - barHeight, barWidth, barHeight);
          ctx.stroke();
        }
      }

      return canvas.toDataURL("image/png");
    },
    renderHorizontal: function renderHorizontal(model, style, data) {
      //
      //console.debug(model, style, data)
      var w = model.w * this.scaleFactor;
      var h = model.h * this.scaleFactor;
      var canvas = document.createElement("canvas");
      canvas.width = w;
      canvas.height = h;
      var ctx = canvas.getContext("2d");
      var summary = this.summary(data);
      var groupHeight = w / summary.groups;

      for (var r = 0; r < data.length; r++) {
        var group = data[r];
        var barHeight = Math.floor(groupHeight / (group.length + 1));

        if (barHeight === 100) {
          barHeight = 50;
        }

        var groupOffSet = groupHeight * r + barHeight / 2;

        for (var c = 0; c < group.length; c++) {
          var v = group[c];
          var barWidth = Math.round(h * (v / summary.max));
          var x = Math.round(groupOffSet + c * barHeight);
          ctx.beginPath();
          ctx.lineWidth = "4";
          ctx.strokeStyle = "green";

          if (style["background" + c]) {
            ctx.fillStyle = style["background" + c];
          }

          ctx.fillRect(0, x, barWidth, barHeight);
          ctx.stroke();
        }
      }

      return canvas.toDataURL("image/png");
    },
    summary: function summary(data) {
      var result = {
        max: -10000000,
        groups: data.length
      };

      for (var r = 0; r < data.length; r++) {
        var row = data[r];

        for (var c = 0; c < row.length; c++) {
          result.max = Math.max(result.max, row[c]);
        }
      }

      return result;
    },
    flip: function flip(data) {
      this.max = -10000000;
      this.groups = 0;
      this.count = 0;
      var flipped = [];

      for (var r = 0; r < data.length; r++) {
        var row = data[r];

        for (var c = 0; c < row.length; c++) {
          if (!flipped[c]) {
            flipped[c] = [];
          }

          flipped[c][r] = row[c];
          this.max = Math.max(this.max, row[c]);
          this.count++;
        }
      }

      return flipped;
    },

    /**
     * Can be overwritten by children to have proper type conversion
     */
    _setDataBindingValue: function _setDataBindingValue(v) {
      var data = this.model.props.data;
      var value = this.model.props.value;

      if (this.type == "ring") {
        var v2 = v * 1;

        if (!isNaN(v2)) {
          value = v2;
        } else {
          console.warn('Chart._setDataBindingValue() > Wrong value for ring', v);
          return;
        }
      } else if (this.type === 'pie') {
        /**
         * Expects array with one element of array
         */
        data = [this.objectToArray(v)];
      } else {
        /**
         * Expect columns wise array of arrays
         * [ [1,2], [11, 22]...]
         */
        data = [];
        var temp = this.objectToArray(v);

        for (var r in temp) {
          var row = this.objectToArray(temp[r]);

          for (var c in row) {
            if (!data[c]) {
              data[c] = [];
            }

            data[c].push(row[c]);
          }
        }
      }

      this.renderChart(this.model, this.style, data, value);
      this.setValue(v);
    },
    objectToArray: function objectToArray(v) {
      var result = [];

      for (var key in v) {
        result.push(v[key]);
      }

      return result;
    }
  },
  mounted: function mounted() {//console.debug('Button.mounted()')
  }
};

/* script */
var __vue_script__$v = script$v;
/* template */

var __vue_render__$v = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-chart', _vm.cssClass, 'qux-chart-' + _vm.chartType]
  }, [_c('img', {
    attrs: {
      "src": _vm.chartImage
    }
  })]);
};

var __vue_staticRenderFns__$v = [];
/* style */

var __vue_inject_styles__$v = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-324212f1_0", {
    source: ".qux-chart{border:0 solid #333}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$v = undefined;
/* module identifier */

var __vue_module_identifier__$v = undefined;
/* functional template */

var __vue_is_functional_template__$v = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$v = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$v,
  staticRenderFns: __vue_staticRenderFns__$v
}, __vue_inject_styles__$v, __vue_script__$v, __vue_scope_id__$v, __vue_is_functional_template__$v, __vue_module_identifier__$v, false, createInjector, undefined, undefined);

//
var script$w = {
  name: 'qVector',
  mixins: [__vue_component__$4],
  data: function data() {
    return {};
  },

  /**
   * FIXME: add here some stuff for image uploads
   */
  mounted: function mounted() {
    Logger$1.log(4, 'qVector.mounted()');
  }
};

/* script */
var __vue_script__$w = script$w;
/* template */

var __vue_render__$w = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-vector', _vm.cssClass],
    on: {
      "click": _vm.onClick
    }
  });
};

var __vue_staticRenderFns__$w = [];
/* style */

var __vue_inject_styles__$w = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-64cc6074_0", {
    source: ".qux-vector{background-size:100% 100%}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$w = undefined;
/* module identifier */

var __vue_module_identifier__$w = undefined;
/* functional template */

var __vue_is_functional_template__$w = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$w = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$w,
  staticRenderFns: __vue_staticRenderFns__$w
}, __vue_inject_styles__$w, __vue_script__$w, __vue_scope_id__$w, __vue_is_functional_template__$w, __vue_module_identifier__$w, false, createInjector, undefined, undefined);

//
var script$x = {
  name: 'qTimeline',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      checked: false
    };
  },
  computed: {},
  methods: {
    isChecked: function isChecked(value) {
      if (this.element) {
        var input = this.dataBindingInput;

        if (input !== undefined && input != null) {
          if (isNaN(input)) {
            return input === value;
          }

          var option = this.options[input];
          return option === value;
        }

        if (this.element.props) {
          return this.element.props.selected === value;
        }
      }

      return false;
    }
  },
  watch: {
    value: function value(v) {
      Logger$1.log(5, 'qRadioBox.watch(value) > enter ' + this.lbl, v);

      if (v === false || v === true) {
        this.checked = v;
      }

      this.value = v;
    }
  },
  mounted: function mounted() {
    Logger$1.log(5, 'qRadioBox.mounted() enter');

    if (this.value === true || this.value === true) {
      this.checked = this.value;
    }
  }
};

/* script */
var __vue_script__$x = script$x;
/* template */

var __vue_render__$x = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-timeline', _vm.cssClass],
    on: {
      "click": _vm.onClick
    }
  }, [_c('div', {
    staticClass: "qux-timeline-line"
  }), _vm._v(" "), _vm._l(_vm.options, function (opt) {
    return _c('div', {
      key: opt,
      class: ['qux-timeline-element', {
        'qux-timeline-element-selected': _vm.isChecked(opt)
      }]
    }, [_c('div', {
      staticClass: "qux-timeline-circle"
    }), _vm._v(" "), _c('label', {
      staticClass: "qux-timeline-label"
    }, [_vm._v("\n        " + _vm._s(opt) + "\n      ")])]);
  })], 2);
};

var __vue_staticRenderFns__$x = [];
/* style */

var __vue_inject_styles__$x = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-38d3c055_0", {
    source: ".qux-timeline{position:relative}.qux-timeline-line{position:absolute;height:100%;background:#333;width:8px;top:0;left:8px;border-radius:4px}.qux-timeline-element{display:flex;align-items:center;position:relative}.qux-timeline-circle{display:inline-block;border-radius:50%;border-style:solid;width:32px;height:32px;background:#fff;border:2px solid #333}.qux-timeline-label{display:inline-block;flex-grow:1;color:#333;padding-left:8px}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$x = undefined;
/* module identifier */

var __vue_module_identifier__$x = undefined;
/* functional template */

var __vue_is_functional_template__$x = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$x = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$x,
  staticRenderFns: __vue_staticRenderFns__$x
}, __vue_inject_styles__$x, __vue_script__$x, __vue_scope_id__$x, __vue_is_functional_template__$x, __vue_module_identifier__$x, false, createInjector, undefined, undefined);

//
var script$y = {
  name: "qUpload",
  mixins: [__vue_component__$4],
  data: function data() {
    return {};
  },
  components: {},
  computed: {
    hasFiles: function hasFiles() {
      if (this.element) {
        var input = this.dataBindingInput;

        if (input) {
          return input !== undefined && input !== null;
        }
      }

      return false;
    },
    label: function label() {
      if (this.element) {
        var input = this.dataBindingInput;

        if (input) {
          if (this.maxFiles > 1 && Array.isArray(input)) {
            return input.map(function (f) {
              return f.name;
            }).join(', ');
          } else {
            return input.name;
          }
        }
      }

      if (this.element && this.element.props) {
        return this.element.props.label;
      }

      return '';
    },
    maxFiles: function maxFiles() {
      if (this.element && this.element.props && this.element.props.maxFiles !== undefined) {
        return this.element.props.maxFiles;
      }

      return 1;
    }
  },
  methods: {
    onFileChange: function onFileChange(e) {
      if (this.$refs.input) {
        var files = this.$refs.input.files;

        if (files.length >= this.maxFiles) {
          this.setFiles(files, e);
        }
      }
    },
    setFiles: function setFiles(files, e) {
      Logger$1.log(1, 'Upload.setFiles', files);

      if (this.element) {
        if (this.maxFiles === 1) {
          var value = files[0];
          this.onValueChange(value, 'default', e);
          Logger$1.log(5, 'Upload.setFiles() >' + this.dataBindingInputPath, value);
        } else {
          var _value = Array.from(files);

          this.onValueChange(_value, 'default', e);
          Logger$1.log(5, 'Upload.setFiles(1) >' + this.dataBindingInputPath, _value);
        }
      }
    }
  }
};

/* script */
var __vue_script__$y = script$y;
/* template */

var __vue_render__$y = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-upload', _vm.cssClass, {
      'qux-upload-has-files': _vm.hasFiles
    }]
  }, [_c('span', {
    staticClass: "qux-common-label"
  }, [_vm._v("\n          " + _vm._s(_vm.label) + "\n      ")]), _vm._v(" "), _c('input', {
    ref: "input",
    staticClass: "MatcWidgetTypeUploadFile",
    attrs: {
      "type": "file"
    },
    on: {
      "change": _vm.onFileChange
    }
  })]);
};

var __vue_staticRenderFns__$y = [];
/* style */

var __vue_inject_styles__$y = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-2aa06362_0", {
    source: ".qux-upload{cursor:pointer;transition:all .2s;border:1px solid red}.qux-upload input{height:100%;width:100%;opacity:0;cursor:pointer}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$y = undefined;
/* module identifier */

var __vue_module_identifier__$y = undefined;
/* functional template */

var __vue_is_functional_template__$y = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$y = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$y,
  staticRenderFns: __vue_staticRenderFns__$y
}, __vue_inject_styles__$y, __vue_script__$y, __vue_scope_id__$y, __vue_is_functional_template__$y, __vue_module_identifier__$y, false, createInjector, undefined, undefined);

//
var script$z = {
  name: "qUpload",
  mixins: [__vue_component__$4],
  data: function data() {
    return {};
  },
  components: {},
  computed: {
    icon: function icon() {
      if (this.element && this.element.style && this.element.style.icon) {
        return 'mdi ' + this.element.style.icon;
      }

      return '';
    },
    hasFiles: function hasFiles() {
      if (this.element) {
        var input = this.dataBindingInput;

        if (input) {
          return input !== undefined && input !== null;
        }
      }

      return false;
    },
    maxFiles: function maxFiles() {
      if (this.element && this.element.props && this.element.props.maxFiles !== undefined) {
        return this.element.props.maxFiles;
      }

      return 1;
    }
  },
  methods: {
    onFileChange: function onFileChange(e) {
      if (this.$refs.input) {
        var files = this.$refs.input.files;

        if (files.length >= this.maxFiles) {
          this.setFiles(files, e);
        }
      }
    },
    setFiles: function setFiles(files, e) {
      Logger$1.log(1, 'Camera.setFiles', files);

      if (this.element) {
        if (this.maxFiles === 1) {
          var value = files[0];
          this.onValueChange(value, 'default', e);
          Logger$1.log(5, 'Upload.setFiles() >' + this.dataBindingInputPath, value);
        } else {
          var _value = Array.from(files);

          this.onValueChange(_value, 'default', e);
          Logger$1.log(5, 'Upload.setFiles(1) >' + this.dataBindingInputPath, _value);
        }

        this.onClick(e);
      }
    }
  }
};

/* script */
var __vue_script__$z = script$z;
/* template */

var __vue_render__$z = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-camera', _vm.cssClass, {
      'qux-camera-has-files': _vm.hasFiles
    }]
  }, [_c('span', {
    class: [_vm.icon, 'qux-camera-icon']
  }), _vm._v(" "), _c('input', {
    ref: "input",
    attrs: {
      "type": "file",
      "accept": "image/*",
      "capture": "user"
    },
    on: {
      "change": _vm.onFileChange
    }
  })]);
};

var __vue_staticRenderFns__$z = [];
/* style */

var __vue_inject_styles__$z = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-7f2283cb_0", {
    source: ".qux-camera{cursor:pointer;transition:all .2s;border:1px solid red;position:relative}.qux-camera .qux-camera-icon{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);cursor:pointer}.qux-camera input{height:100%;width:100%;opacity:0;cursor:pointer}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$z = undefined;
/* module identifier */

var __vue_module_identifier__$z = undefined;
/* functional template */

var __vue_is_functional_template__$z = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$z = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$z,
  staticRenderFns: __vue_staticRenderFns__$z
}, __vue_inject_styles__$z, __vue_script__$z, __vue_scope_id__$z, __vue_is_functional_template__$z, __vue_module_identifier__$z, false, createInjector, undefined, undefined);

//
var script$A = {
  name: 'qUploadPreview',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      dataURL: '',
      placeholder: ''
    };
  },
  computed: {
    hasBorder: function hasBorder() {
      var file = this.dataBindingInput;
      return file === null || file === undefined;
    },
    src: function src() {
      var file = this.dataBindingInput;

      if (file && file.name && file.size) {
        this.setFile();
        return this.dataURL;
      }

      if (file && file.url) {
        return "url(".concat(file.url, ")");
      }

      if (file && file.indexOf && file.indexOf('http') === 0) {
        return "url(".concat(file, ")");
      }

      return this.placeholder;
    }
  },
  methods: {
    getImagePlaceHolder: function getImagePlaceHolder(widget) {
      var w = widget.w * 2;
      var h = widget.h * 2;
      var c = document.createElement("canvas");
      var context = c.getContext("2d");
      c.width = w;
      c.height = h;
      h += 0.5;
      w += 0.5;
      var n = 0.5;
      context.moveTo(n, n);
      context.lineTo(w, h);
      context.moveTo(w, n);
      context.lineTo(n, h);
      context.strokeStyle = "#333";
      context.strokeWidth = 2;
      context.imageSmoothingEnabled = false;
      context.stroke();
      var url = 'url(' + c.toDataURL("image/png") + ')';
      return url;
    },
    setFile: function setFile() {
      var _this = this;

      Logger$1.log(1, 'qUploadPreview.setFile()');
      var file = this.dataBindingInput;

      if (file && file.name && file.size) {
        var reader = new FileReader();

        if (reader.readAsDataURL) {
          reader.onload = function () {
            _this.dataURL = 'url(' + reader.result + ')';
          };

          reader.readAsDataURL(file);
        }
      }
    }
  },
  watch: {
    value: function value(v) {
      this.setFile(v);
    }
  },
  mounted: function mounted() {
    Logger$1.log(4, 'qUploadPreview.mounted()');

    if (this.element) {
      this.placeholder = this.getImagePlaceHolder(this.element);
    }

    this.setFile();
  }
};

/* script */
var __vue_script__$A = script$A;
/* template */

var __vue_render__$A = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-upload-preview', _vm.cssClass, {
      'qux-upload-preview-border': _vm.hasBorder
    }],
    style: {
      'backgroundImage': _vm.src
    },
    on: {
      "click": _vm.onClick
    }
  });
};

var __vue_staticRenderFns__$A = [];
/* style */

var __vue_inject_styles__$A = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-469fa9dd_0", {
    source: ".qux-upload-preview{background-size:100%;background-repeat:no-repeat}.qux-upload-preview.qux-upload-preview-border{border:0 solid #333}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$A = undefined;
/* module identifier */

var __vue_module_identifier__$A = undefined;
/* functional template */

var __vue_is_functional_template__$A = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$A = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$A,
  staticRenderFns: __vue_staticRenderFns__$A
}, __vue_inject_styles__$A, __vue_script__$A, __vue_scope_id__$A, __vue_is_functional_template__$A, __vue_module_identifier__$A, false, createInjector, undefined, undefined);

//
var script$B = {
  name: 'qChildrenToggle',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      active: true
    };
  },
  computed: {
    isActive: function isActive() {
      if (this.isDesignSystemRoot) {
        /**
         * If no v-model is passed, we take the active
         */
        if (this.value === undefined) {
          return this.active;
        }

        return this.value;
      }

      if (this.element) {
        var input = this.dataBindingInput;
        Logger$1.log(3, 'qChildrenToggle.toggle() >' + this.dataBindingInputPath, input);
        return input === true;
      }

      return this.active;
    }
  },
  methods: {
    toggle: function toggle(e) {
      /**
       * We stop this here, because of the repeater in the demo.
       */
      this.stopEvent(e);

      if (this.element) {
        var value = !this.isActive;
        this.onValueChange(value, 'default');
        this.active = value;
        Logger$1.log(3, 'qChildrenToggle.toggle() >' + this.dataBindingInputPath, value);
      } else {
        this.active = !this.active;
        this.$emit('change', this.active);
        this.$emit('input', this.active);
        Logger$1.log(5, 'qChildrenToggle.toggle() >' + this.active);
      }
    },
    forwardClick: function forwardClick(element, e, value) {
      this.$emit('qClick', element, e, value);
    },
    forwardChange: function forwardChange(element, e, value) {
      this.$emit('qChange', element, e, value);
    },
    forwardFocus: function forwardFocus(element, e, value) {
      this.$emit('qFocus', element, e, value);
    },
    forwardBlur: function forwardBlur(element, e, value) {
      this.$emit('qBlur', element, e, value);
    },
    forwardMouseOver: function forwardMouseOver(element, e, value) {
      this.$emit('qMouseOver', element, e, value);
    },
    forwardMouseOut: function forwardMouseOut(element, e, value) {
      this.$emit('qMouseOut', element, e, value);
    },
    forwardKeyPress: function forwardKeyPress(element, e, value) {
      this.$emit('qKeyPress', element, e, value);
    },
    forwardCallback: function forwardCallback(element, e, value) {
      this.$emit('qCallback', element, e, value);
    },
    forwardDesignSystemCallback: function forwardDesignSystemCallback(element, e, type, callback) {
      this.$emit('qDesignSystemCallback', element, e, type, callback);
    }
  },
  watch: {
    value: function value(v) {
      Logger$1.log(-1, 'qChildrenToggle.watch(value) > enter', v);

      if (v === false || v === true) {
        this.active = v;
      }

      this.value = v;
    }
  },
  mounted: function mounted() {
    Logger$1.log(-1, 'qChildrenToggle.mounted() enter', this.value);

    if (this.value === true || this.value === true) {
      this.active = this.value;
    }
  }
};

/* script */
var __vue_script__$B = script$B;
/* template */

var __vue_render__$B = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-children-toggle', _vm.cssClass, {
      'qux-active': _vm.isActive
    }],
    on: {
      "click": _vm.toggle
    }
  }, [_vm.isActive ? _vm._l(_vm.element.children, function (child) {
    return _c(child.qtype, {
      key: child.id,
      tag: "component",
      attrs: {
        "element": child,
        "model": _vm.model,
        "config": _vm.config
      },
      on: {
        "qDesignSystemCallback": _vm.forwardDesignSystemCallback,
        "qCallback": _vm.forwardCallback,
        "qClick": _vm.forwardClick,
        "qChange": _vm.forwardChange,
        "qKeyPress": _vm.forwardKeyPress,
        "qFocus": _vm.forwardFocus,
        "qBlur": _vm.forwardBlur,
        "qMouseOver": _vm.forwardMouseOver,
        "qMouseOut": _vm.forwardMouseOut
      },
      model: {
        value: _vm.value,
        callback: function callback($$v) {
          _vm.value = $$v;
        },
        expression: "value"
      }
    });
  }) : _vm._e()], 2);
};

var __vue_staticRenderFns__$B = [];
/* style */

var __vue_inject_styles__$B = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-28800f26_0", {
    source: ".qux-toggle{cursor:pointer;transition:all .2s}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$B = undefined;
/* module identifier */

var __vue_module_identifier__$B = undefined;
/* functional template */

var __vue_is_functional_template__$B = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$B = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$B,
  staticRenderFns: __vue_staticRenderFns__$B
}, __vue_inject_styles__$B, __vue_script__$B, __vue_scope_id__$B, __vue_is_functional_template__$B, __vue_module_identifier__$B, false, createInjector, undefined, undefined);

//
var script$C = {
  name: 'qSpinner',
  mixins: [__vue_component__$4, __vue_component__$i],
  data: function data() {
    return {
      selected: 0,
      offset: 0,
      isAnimating: false
    };
  },
  computed: {
    optionsAsKeyValue: function optionsAsKeyValue() {
      if (this.element) {
        return this.options.map(function (o) {
          if (o.toLowerCase || typeof o === 'number') {
            return {
              label: o,
              value: o
            };
          }

          return o;
        });
      }

      return [];
    },
    selectedIndex: function selectedIndex() {
      var value = this.selectedValue;
      var options = this.optionsAsKeyValue;
      var index = options.findIndex(function (o) {
        return o.value === value;
      });
      return index;
    },
    visibleOption: function visibleOption() {
      if (this.element) {
        var options = this.optionsAsKeyValue;
        var index = this.selectedIndex;
        var result = [];
        var length = this.length;

        for (var i = index - length; i < index + length + 1; i++) {
          var pos = (i + options.length) % options.length;
          var v = options[pos];
          result.push(v);
        }

        return result;
      }

      return [];
    },
    selectedValue: function selectedValue() {
      if (this.element) {
        var selected = this.dataBindingInput;

        if (selected) {
          return selected;
        }
      }

      return this.selected;
    },
    top: function top() {
      return -33 * (this.length - 1) + this.offset + '%'; //'calc(-66%  + ' + this.offset + 'px)'
    },
    length: function length() {
      return 4;
    },
    domPos: function domPos() {
      return this.position(this.$el);
    }
  },
  methods: {
    onStartDnd: function onStartDnd(e) {
      var _this = this;

      var pos = this.domPos;
      var mouse = this.mouse(e);
      var y = mouse.y - pos.y;
      var p = y / pos.h;
      this._startP = p;
      this.startDND(e, function (move, e) {
        return _this.onMove(move, e);
      }, function (up, e) {
        return _this.onEnd(up, e);
      });
    },
    onMove: function onMove(move, e) {
      var pos = this.domPos;
      var mouse = this.mouse(e);

      if (mouse.y > pos.y && mouse.y < pos.y + pos.h) {
        this.offset = move.y / pos.h * 100;
      }
    },
    onEnd: function onEnd(up, e) {
      var _this2 = this;

      /**
       * Get selected index from
       */
      var pos = this.domPos;
      var p = up.y / pos.h * 100;
      var steps = Math.round(p / 33);

      if (steps === 0) {
        var mouse = this.mouse(e);
        console.debug(mouse.y);

        var _p = (mouse.y - pos.y) / pos.h;

        console.debug(_p);

        if (_p < 0.33) {
          steps = 1;
        }

        if (_p > 0.66) {
          steps = -1;
        }
      }

      var newIndex = (this.selectedIndex - steps + this.options.length) % this.options.length;
      var newValue = this.options[newIndex]; // animate to steps * 33.3

      console.debug(steps, newValue, this.offset);
      this.offset = steps * 33.3;
      this.isAnimating = true;
      setTimeout(function () {
        _this2.isAnimating = false;
        _this2.offset = 0;

        _this2.onChange(newValue);
      }, 330); //this.onChange(newValue)
      // animate and count offset to
      //this.offset = 0
    },
    onChange: function onChange(value) {
      this.selected = value;

      if (this.element) {
        this.onValueChange(this.selected, 'default');
        this.$emit('qChange', this.element, null, this.selected);
      } else {
        this.$emit('change', this.selected);
        this.$emit('input', this.selected);
      }

      Logger$1.log(5, 'qSpinner.onChange() exit > ', this.selected);
    }
  },
  mounted: function mounted() {
    if (this.element && this.element.props && this.element.props.value) {
      this.count = this.element.props.value;
    }
  }
};

/* script */
var __vue_script__$C = script$C;
/* template */

var __vue_render__$C = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-spinner qux-noselect ', _vm.cssClass],
    on: {
      "mousedown": _vm.onStartDnd
    }
  }, [_c('div', {
    class: ['qux-spinner-option-cntr', {
      'qux-spinner-option-cntr-animated': _vm.isAnimating
    }],
    style: 'top: ' + _vm.top
  }, _vm._l(_vm.visibleOption, function (option, i) {
    return _c('div', {
      key: i,
      class: ['qux-spinner-option qux-valign-middle', {
        'qux-spinner-option-selected': option.value === _vm.selectedValue
      }]
    }, [_c('span', {
      staticClass: "qux-common-label"
    }, [_vm._v("\n              " + _vm._s(option.label) + "\n            ")])]);
  }), 0), _vm._v(" "), _c('div', {
    staticClass: "qux-spinner-border"
  })]);
};

var __vue_staticRenderFns__$C = [];
/* style */

var __vue_inject_styles__$C = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-54e2189b_0", {
    source: ".qux-spinner{border:none;position:relative;overflow:hidden;cursor:pointer}.qux-spinner .qux-spinner-border{position:absolute;height:33.3%;width:100%;top:33.3%;left:0;border-top:1px solid #333;border-bottom:1px solid #333}.qux-spinner .qux-spinner-option-cntr{position:absolute;left:0;height:300%;width:100%}.qux-spinner .qux-spinner-option-cntr.qux-spinner-option-cntr-animated{transition:.33s all}.qux-spinner .qux-spinner-option{display:block;height:20%;width:100%;opacity:.6;position:relative;text-align:center}.qux-spinner .qux-spinner-option .qux-common-label{width:100%}.qux-spinner .qux-spinner-option.qux-spinner-option-selected{opacity:1}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$C = undefined;
/* module identifier */

var __vue_module_identifier__$C = undefined;
/* functional template */

var __vue_is_functional_template__$C = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$C = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$C,
  staticRenderFns: __vue_staticRenderFns__$C
}, __vue_inject_styles__$C, __vue_script__$C, __vue_scope_id__$C, __vue_is_functional_template__$C, __vue_module_identifier__$C, false, createInjector, undefined, undefined);

//
var script$D = {
  name: 'qDynamicContainer',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      selectedValue: null,
      selectedChildIndex: 0,
      dynamicLines: [],
      dynamicChildValues: [],
      qErrorMessage: 'Nothing'
    };
  },
  computed: {
    selectedChild: function selectedChild() {
      if (this.element) {
        var dataBindingInput = this.dataBindingInput;

        if (dataBindingInput !== undefined) {
          var index = this.dynamicChildValues.indexOf(dataBindingInput);

          if (index >= 0 && index < this.element.children.length) {
            var child = this.element.children[index];
            return child;
          }
        }

        return this.element.children[this.selectedChildIndex];
      }

      return null;
    }
  },
  methods: {
    onClick: function onClick(element, e, value) {
      var fromLine = this.dynamicLines.find(function (line) {
        return line.from === element.id && line.event === 'click';
      });
      Logger$1.log(1, 'DynamicContainer.onClick() > ', fromLine);
      this.executeDynamicLine(fromLine);
      this.$emit('qClick', element, e, value);
    },
    onMouseHover: function onMouseHover() {
      var element = this.selectedChild;
      var fromLine = this.dynamicLines.find(function (line) {
        return line.from === element.id && line.event === 'hover';
      });

      if (!fromLine) {
        fromLine = this.dynamicLines.find(function (line) {
          return line.from === element.id && line.event === 'mouseenter';
        });
      }

      Logger$1.log(1, 'DynamicContainer.onMouseOver() > ', fromLine);
      this.executeDynamicLine(fromLine);
    },
    onMouseOut: function onMouseOut() {
      var element = this.selectedChild;
      var fromLine = this.dynamicLines.find(function (line) {
        return line.from === element.id && line.event === 'mouseleave';
      });
      Logger$1.log(-1, 'DynamicContainer.onMouseOut() > ', fromLine);
      this.executeDynamicLine(fromLine);
    },
    executeDynamicLine: function executeDynamicLine(fromLine) {
      if (this.element && this.element.children && fromLine) {
        var toIndex = this.element.children.findIndex(function (c) {
          return c.id === fromLine.to;
        });

        if (toIndex >= 0) {
          Logger$1.log(1, 'DynamicContainer.executeDynamicLine() > select ', fromLine.to, toIndex);
          this.selectedChildIndex = toIndex;
          this.emitDynamicDataBinding(toIndex);
          return;
        }
      }
    },
    emitDynamicDataBinding: function emitDynamicDataBinding(index) {
      var value = this.dynamicChildValues[index];
      this.onValueChange(value);
      Logger$1.log(1, 'DynamicContainer.emitDynamicDataBinding() > ', value);
    },
    forwardClick: function forwardClick(element, e, value) {
      this.$emit('qClick', element, e, value);
    },
    forwardChange: function forwardChange(element, e, value) {
      this.$emit('qChange', element, e, value);
    },
    forwardFocus: function forwardFocus(element, e, value) {
      this.$emit('qFocus', element, e, value);
    },
    forwardBlur: function forwardBlur(element, e, value) {
      this.$emit('qBlur', element, e, value);
    },
    forwardMouseOver: function forwardMouseOver(element, e, value) {
      this.$emit('qMouseOver', element, e, value);
    },
    forwardMouseOut: function forwardMouseOut(element, e, value) {
      this.$emit('qMouseOut', element, e, value);
    },
    forwardKeyPress: function forwardKeyPress(element, e, value) {
      this.$emit('qKeyPress', element, e, value);
    },
    forwardCallback: function forwardCallback(element, e, value) {
      this.$emit('qCallback', element, e, value);
    }
  },
  mounted: function mounted() {
    Logger$1.log(-1, 'DynamicComponent.mounted()', this.element);

    if (this.element && this.element.props) {
      if (this.element.props.dynamicLines) {
        this.dynamicLines = this.element.props.dynamicLines;
      }
    }

    var childDataValues = [];

    if (this.element.children) {
      this.element.children.forEach(function (child, index) {
        if (child.props) {
          var dataValue = child.props.dataValue;

          if (dataValue !== undefined) {
            dataValue = stringToType(dataValue);
          } else {
            dataValue = index;
          }

          childDataValues[index] = dataValue;
        }
      });
    }

    this.dynamicChildValues = childDataValues;
    Logger$1.log(1, 'DynamicComponent.mounted() > dataValues', this.dynamicChildValues);
  }
};

/* script */
var __vue_script__$D = script$D;
/* template */

var __vue_render__$D = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-dynamic-container', _vm.cssClass + ' ' + _vm.cssComponentClasses],
    on: {
      "mouseenter": _vm.onMouseHover,
      "mouseleave": _vm.onMouseOut
    }
  }, [_vm.selectedChild ? [_c(_vm.selectedChild.qtype, {
    key: _vm.selectedChild.id,
    tag: "component",
    attrs: {
      "element": _vm.selectedChild,
      "model": _vm.model,
      "config": _vm.config
    },
    on: {
      "qDesignSystemCallback": _vm.forwardDesignSystemCallback,
      "qCallback": _vm.forwardCallback,
      "qClick": _vm.onClick,
      "qChange": _vm.forwardChange,
      "qKeyPress": _vm.forwardKeyPress,
      "qFocus": _vm.forwardFocus,
      "qBlur": _vm.forwardBlur,
      "qMouseOver": _vm.onMouseOver,
      "qMouseOut": _vm.forwardMouseOut
    },
    model: {
      value: _vm.value,
      callback: function callback($$v) {
        _vm.value = $$v;
      },
      expression: "value"
    }
  })] : [_vm._v("\n        " + _vm._s(_vm.qErrorMessage) + "\n    ")]], 2);
};

var __vue_staticRenderFns__$D = [];
/* style */

var __vue_inject_styles__$D = undefined;
/* scoped */

var __vue_scope_id__$D = undefined;
/* module identifier */

var __vue_module_identifier__$D = undefined;
/* functional template */

var __vue_is_functional_template__$D = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$D = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$D,
  staticRenderFns: __vue_staticRenderFns__$D
}, __vue_inject_styles__$D, __vue_script__$D, __vue_scope_id__$D, __vue_is_functional_template__$D, __vue_module_identifier__$D, false, undefined, undefined, undefined);

//
var script$E = {
  name: 'qRichText',
  mixins: [__vue_component__$4],
  data: function data() {
    return {};
  },
  computed: {
    children: function children() {
      if (this.element && this.element.props && this.element.props.richTextLabel) {
        var children = this.element.props.richTextLabel.map(function (t) {
          return t.label;
        });
        return children;
      }

      return [];
    }
  },
  mounted: function mounted() {}
};

/* script */
var __vue_script__$E = script$E;
/* template */

var __vue_render__$E = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _vm.hasLink ? _c('a', {
    class: ['qux-rich-text', _vm.cssClass],
    attrs: {
      "href": _vm.link
    },
    on: {
      "click": _vm.onClick
    }
  }, [_c('span', {
    staticClass: "qux-common-label"
  }, _vm._l(_vm.children, function (child, i) {
    return _c('span', {
      key: i,
      class: 'qux-rich-text-child-' + i
    }, [_vm._v(_vm._s(child))]);
  }), 0)]) : _c('label', {
    class: ['qux-rich-text', _vm.cssClass],
    on: {
      "click": _vm.onClick
    }
  }, [_c('span', {
    staticClass: "qux-common-label"
  }, _vm._l(_vm.children, function (child, i) {
    return _c('span', {
      key: i,
      class: 'qux-rich-text-child-' + i
    }, [_vm._v(_vm._s(child))]);
  }), 0)]);
};

var __vue_staticRenderFns__$E = [];
/* style */

var __vue_inject_styles__$E = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-40786806_0", {
    source: ".qux-rich-text{display:inline-block}.qux-rich-text .qux-common-label{width:100%}.qux-rich-text .qux-common-label span{display:inline}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$E = undefined;
/* module identifier */

var __vue_module_identifier__$E = undefined;
/* functional template */

var __vue_is_functional_template__$E = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$E = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$E,
  staticRenderFns: __vue_staticRenderFns__$E
}, __vue_inject_styles__$E, __vue_script__$E, __vue_scope_id__$E, __vue_is_functional_template__$E, __vue_module_identifier__$E, false, createInjector, undefined, undefined);

//
var script$F = {
  name: 'qComponentSet',
  mixins: [__vue_component__$4],
  data: function data() {
    return {
      checked: false,
      qErrorMessage: 'No varient matching!',
      debug: false
    };
  },
  computed: {
    isActive: function isActive() {
      if (this.isDesignSystemRoot) {
        /**
         * If no v-model is passed, we take the checked
         */
        if (this.value === undefined) {
          return this.checked;
        }

        return this.value;
      }

      if (this.element) {
        var input = this.dataBindingInput;
        return input === true;
      }

      return this.checked;
    },
    selectedChild: function selectedChild() {
      if (this.element && this.$parent) {
        var matches = this.getMatchesByVarient();
        Logger$1.log(2, 'qComponentSet.selectedChild() ', matches);

        if (isChildrenToggle(this.element) && this.element.children.length > 1) {
          if (matches.length == 2) {
            /**
             * FIXME: Herre the order matters!
             */
            if (this.isActive) {
              return matches[1];
            } else {
              return matches[0];
            }
          } else {
            Logger$1.error('qComponentSet.selectedChild() > More than 2 matches for toggle', matches);
          }
        } else {
          if (matches.length === 1) {
            return matches[0];
          } else {
            Logger$1.error('qComponentSet.selectedChild() > More than 1 macthes', matches);
          }
        }
      }

      return null;
    },
    justifyContent: function justifyContent() {
      if (isWrappedContainer(this.element) && this.config.css.justifyContentInWrapper) {
        return true;
      }

      return false;
    },
    wrapperPlaceHolders: function wrapperPlaceHolders() {
      return [1, 2, 3, 4, 5, 6, 7, 8];
    }
  },
  methods: {
    toggle: function toggle(e) {
      if (this.element) {
        var value = !this.isActive;
        this.onValueChange(value, 'default');
        Logger$1.log(4, 'qComponentSet.toggle(element) > ' + this.dataBindingInputPath, value);
        this.checked = value;
      } else {
        this.checked = !this.checked;
        this.$emit('change', this.checked);
        this.$emit('input', this.checked);
        Logger$1.log(5, 'qComponentSet.toggle() >' + this.checked);
      }
      /**
       * Also fire onClick
       */


      this.onClick(e);
    },
    getMatchesByVarient: function getMatchesByVarient() {
      var _this = this;

      var variantKeys = this.getPresentPropertyKeys();
      Logger$1.log(4, 'qComponentSet.toggle(element) > ' + this.element.name, variantKeys);
      var matches = this.element.children.filter(function (child) {
        if (child.variant) {
          var isMatch = true;
          variantKeys.forEach(function (key) {
            var value = child.variant[key];
            isMatch &= value === _this.$parent.$props[key];
          });
          return isMatch;
        }

        return false;
      });
      return matches;
    },
    getPresentPropertyKeys: function getPresentPropertyKeys() {
      var _this2 = this;

      if (this.element && this.element.children.length > 1) {
        /**
         * Assume the first child has all variants
         */
        var firstChild = this.element.children[0];

        if (firstChild.variant) {
          return Object.keys(firstChild.variant).filter(function (key) {
            var value = _this2.$parent.$props[key];
            return value !== undefined;
          });
        }
      }

      return [];
    },
    getMatchByProps: function getMatchByProps() {
      var _this3 = this;

      var matches = this.element.children.filter(function (child) {
        if (child.variant) {
          var isMatch = true;

          for (var key in child.variant) {
            var value = child.variant[key];
            isMatch &= value === _this3.$parent.$props[key];
          }

          return isMatch;
        }

        return false;
      });
      return matches;
    },
    getValue: function getValue() {
      return this.isActive;
    },
    forwardClick: function forwardClick(element, e, value) {
      this.$emit('qClick', element, e, value);
    },
    forwardChange: function forwardChange(element, e, value) {
      this.$emit('qChange', element, e, value);
    },
    forwardFocus: function forwardFocus(element, e, value) {
      this.$emit('qFocus', element, e, value);
    },
    forwardBlur: function forwardBlur(element, e, value) {
      this.$emit('qBlur', element, e, value);
    },
    forwardMouseOver: function forwardMouseOver(element, e, value) {
      this.$emit('qMouseOver', element, e, value);
    },
    forwardMouseOut: function forwardMouseOut(element, e, value) {
      this.$emit('qMouseOut', element, e, value);
    },
    forwardKeyPress: function forwardKeyPress(element, e, value) {
      this.$emit('qKeyPress', element, e, value);
    },
    forwardCallback: function forwardCallback(element, e, value) {
      this.$emit('qCallback', element, e, value);
    }
  },
  mounted: function mounted() {// console.debug('ComponentSet.mounted()', this.element.name, this.label, this.element)
  }
};

/* script */
var __vue_script__$F = script$F;
/* template */

var __vue_render__$F = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    class: ['qux-compoment-set', _vm.cssClass],
    on: {
      "click": _vm.toggle
    }
  }, [_vm.selectedChild ? [_c(_vm.selectedChild.qtype, {
    key: _vm.selectedChild.id,
    tag: "component",
    attrs: {
      "element": _vm.selectedChild,
      "model": _vm.model,
      "config": _vm.config
    },
    on: {
      "qDesignSystemCallback": _vm.forwardDesignSystemCallback,
      "qCallback": _vm.forwardCallback,
      "qClick": _vm.forwardClick,
      "qChange": _vm.forwardChange,
      "qKeyPress": _vm.forwardKeyPress,
      "qFocus": _vm.forwardFocus,
      "qBlur": _vm.forwardBlur,
      "qMouseOver": _vm.forwardMouseOver,
      "qMouseOut": _vm.forwardMouseOut
    },
    model: {
      value: _vm.value,
      callback: function callback($$v) {
        _vm.value = $$v;
      },
      expression: "value"
    }
  })] : [_vm._v("\n        " + _vm._s(_vm.qErrorMessage) + "\n    ")]], 2);
};

var __vue_staticRenderFns__$F = [];
/* style */

var __vue_inject_styles__$F = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-06cc34ca_0", {
    source: ".qux-compoment-set{border-style:solid;border-width:0}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$F = undefined;
/* module identifier */

var __vue_module_identifier__$F = undefined;
/* functional template */

var __vue_is_functional_template__$F = false;
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$F = /*#__PURE__*/normalizeComponent({
  render: __vue_render__$F,
  staticRenderFns: __vue_staticRenderFns__$F
}, __vue_inject_styles__$F, __vue_script__$F, __vue_scope_id__$F, __vue_is_functional_template__$F, __vue_module_identifier__$F, false, createInjector, undefined, undefined);

var QUXDesignSystem = /*#__PURE__*/function () {
  function QUXDesignSystem() {
    _classCallCheck(this, QUXDesignSystem);

    this.server = 'https://quant-ux.com';
    this.components = {};
  }

  _createClass(QUXDesignSystem, [{
    key: "register",
    value: async function register(app) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var hasComponentSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      Logger$1.log(2, "QUXDesignSystem.register()", app);

      if (app.substring) {
        config.imageFolder = "".concat(this.server, "/rest/images/").concat(app, "/");
        app = await this.loadAppByKey(app);
      }

      config.addDefaultDatabinding = false;
      this.onAppLoaded(app, Config$1.merge(Config$1.getDefault(), config), hasComponentSet);
    }
  }, {
    key: "onAppLoaded",
    value: function onAppLoaded(app, config, hasComponentSet) {
      var _this = this;

      Logger$1.log(3, "QUXDesignSystem.onAppLoaded() > enter", app, config);
      var start = new Date().getTime();
      var prefix = config.designletPrefix ? config.designletPrefix : '';
      /**
       * Build tree
       */

      var transformer = new ModelTransformer(app, config);
      var tree = transformer.transform();
      /**
       * Make nicer css. Also add here a parametert to convert
       * vertAlign to padding
       */

      tree = new CSSOptimizer(config).runTree(tree, true);
      /**
       * Register all qWidget to VUE. This oculd be still smarter...
       */

      this.initComponents();
      var cssFactory = new CSSFactory(config, config.imageFolder);
      /**
       * Take all first level screen children
       */

      tree.screens.forEach(function (screen) {
        screen.children.forEach(function (widget) {
          _this.registerElement(app, widget, config, cssFactory, hasComponentSet, prefix);
        });
      });
      /**
       * ToDO: Create all templates
       */

      var stop = new Date().getTime();
      Logger$1.log(-1, "DesignSystem.onAppLoaded() > exit", stop - start);
    }
  }, {
    key: "registerElement",
    value: function registerElement(app, element, config, cssFactory, hasComponentSet, prefix) {
      Logger$1.log(-1, "QUXDesignSystem.registerElement() > enter", "<".concat(prefix).concat(element.name, ">/"));
      var props = ['label', 'value', 'options', 'href'];

      if (hasComponentSet && isComponentSet(element)) {
        this.fixComponentSet(element, props);
      }

      this.components["".concat(prefix).concat(element.name)] = {
        name: "".concat(prefix).concat(element.name),
        element: element
      };
      /**
        * Set flag for special handling and reset the cssSelectors
        */

      element.isDesignSystemRoot = true;
      /**
       * Here we create dynamicaly the qWidget that is needed! we also map our internal
       * property names to nice onces, like 'lbl' => 'label'
       */

      Vue.component(prefix + element.name, {
        props: props,
        data: function data() {
          return {
            count: 0
          };
        },
        render: function render(createElement) {
          return createElement(element.qtype, {
            props: {
              element: element,
              model: app,
              lbl: this.label,
              value: this.value,
              url: this.href,
              optionList: this.options
            }
          }, this.$slots.default);
        }
      });
      this.createCSS(app, element, config, cssFactory);
    }
  }, {
    key: "fixComponentSet",
    value: function fixComponentSet(element, props) {
      element.qtype = 'qComponentSet';
      element.type = 'ComponentSet';

      if (element.children && element.children.length > 0) {
        var child = element.children[0];

        if (child.variant) {
          Object.keys(child.variant).forEach(function (key) {
            if (props.indexOf(key) === -1) {
              props.push(key);
            }
          });
        }

        Logger$1.log(3, "QUXDesignSystem.fixComponentSet() > component set", "<".concat(element.name, " >/"), props);
      }
    }
  }, {
    key: "createCSS",
    value: function createCSS(app, element, config, cssFactory) {
      Logger$1.log(4, "QUXDesignSystem.createCSS() > register", element.name);
      /**
       * Reset all css selectord
       */

      setCSSClassNames(element, element.cssClass);
      element.cssSelector = '.' + element.cssClass;
      var classes = cssFactory.generateDesignSystemRoot(element);
      var css = [];
      css = Object.values(classes).flatMap(function (element) {
        return element.map(function (e) {
          return e.code;
        });
      });
      css = css.join('\n');
      CSSWriter$1.write(css, app.id + '-' + element.id);
    }
  }, {
    key: "loadAppByKey",
    value: async function loadAppByKey(key) {
      Logger$1.log(2, "QUXDesignSystem.loadAppByKey() > enter", key);
      var url = "".concat(this.server, "/rest/invitation/").concat(key, "/app.json");
      var start = new Date().getTime();
      var response = await fetch(url);

      if (response.status === 200) {
        var app = await response.json();
        Logger$1.log(-1, "QUXDesignSystem.loadAppByKey() > exit", new Date().getTime() - start);
        return app;
      } else {
        Logger$1.error("QUXDesignSystem.loadAppByKey() > Could not load");
      }
    }
  }, {
    key: "mergeConfig",
    value: function mergeConfig(conf) {
      if (!conf.imageFolder) {
        conf.imageFolder = '/img/';
      }

      return conf;
    }
  }, {
    key: "initComponents",
    value: function initComponents() {
      Vue.component('qHotSpot', __vue_component__$5);
      Vue.component('qButton', __vue_component__$5);
      Vue.component('qBox', __vue_component__$5);
      Vue.component('qLabel', __vue_component__$6);
      Vue.component('qContainer', __vue_component__$9);
      Vue.component('qIcon', __vue_component__$7);
      Vue.component('qTextBox', __vue_component__$8);
      Vue.component('qPassword', __vue_component__$8);
      Vue.component('qTextArea', __vue_component__$k);
      Vue.component('qRepeater', __vue_component__$a);
      Vue.component('qImage', __vue_component__$b);
      Vue.component('qCheckBox', __vue_component__$c);
      Vue.component('qRadioBox', __vue_component__$e);
      Vue.component('qRadioBox2', __vue_component__$e);
      Vue.component('qRadioGroup', __vue_component__$f);
      Vue.component('qCheckBoxGroup', __vue_component__$d);
      Vue.component('qToggleButton', __vue_component__$g);
      Vue.component('qSwitch', __vue_component__$h);
      Vue.component('qDropDown', __vue_component__$j);
      Vue.component('qMobileDropDown', __vue_component__$j);
      Vue.component('qStepper', __vue_component__$l);
      Vue.component('qHSlider', __vue_component__$m);
      Vue.component('qDate', __vue_component__$n);
      Vue.component('qDateDropDown', __vue_component__$o);
      Vue.component('qSegmentButton', __vue_component__$p);
      Vue.component('qRating', __vue_component__$q);
      Vue.component('qIconToggle', __vue_component__$r);
      Vue.component('qLabeledIconToggle', __vue_component__$r);
      Vue.component('qTypeAheadTextBox', __vue_component__$s);
      Vue.component('qTable', __vue_component__$t);
      Vue.component('qPaging', __vue_component__$u);
      Vue.component('qBarChart', __vue_component__$v);
      Vue.component('qPieChart', __vue_component__$v);
      Vue.component('qMultiRingChart', __vue_component__$v);
      Vue.component('qRingChart', __vue_component__$v);
      Vue.component('qVector', __vue_component__$w);
      Vue.component('qTimeline', __vue_component__$x);
      Vue.component('qUpload', __vue_component__$y);
      Vue.component('qCamera', __vue_component__$z);
      Vue.component('qChildrenToggle', __vue_component__$B);
      Vue.component('qUploadPreview', __vue_component__$A);
      Vue.component('qComponentSet', __vue_component__$F);
    }
  }]);

  return QUXDesignSystem;
}();

var QUXDesignSystem$1 = new QUXDesignSystem();

var FigmaDesignSystem = /*#__PURE__*/function () {
  function FigmaDesignSystem() {
    _classCallCheck(this, FigmaDesignSystem);
  }

  _createClass(FigmaDesignSystem, [{
    key: "register",
    value: async function register(figmaFile, figmaAccessKey, config) {
      Logger$1.log(-1, "FigmaDesignSystem.register()", figmaFile);
      var app = figmaFile;

      if (figmaFile && figmaAccessKey) {
        /**
         * Force the design system we pinn right for now
         */
        if (!config) {
          config = {};
        }

        config.figma = {
          pinnRight: false
        };
        var figmaService = new FigmaService(figmaAccessKey, config);
        app = await figmaService.get(figmaFile, true);
        app = figmaService.setBackgroundImages(app);
      }
      /**
       * Pass here also the hasComponentSet = true!
       */


      return QUXDesignSystem$1.register(app, config, true);
    }
  }]);

  return FigmaDesignSystem;
}();

var FigmaDesignSystem$1 = new FigmaDesignSystem();

var index$1 = {
  install: function install(Vue) {
    Logger$1.log('Luisa.install() > enter');
    Vue.component("Luisa", __vue_component__$2);
    Vue.component("QUX", __vue_component__$2);
    Vue.component("LowCode", __vue_component__$2);
    Vue.component("Figma", __vue_component__$3);
    Vue.component('qHotSpot', __vue_component__$5);
    Vue.component('qButton', __vue_component__$5);
    Vue.component('qBox', __vue_component__$5);
    Vue.component('qLabel', __vue_component__$6);
    Vue.component('qContainer', __vue_component__$9);
    Vue.component('qIcon', __vue_component__$7);
    Vue.component('qTextBox', __vue_component__$8);
    Vue.component('qPassword', __vue_component__$8);
    Vue.component('qTextArea', __vue_component__$k);
    Vue.component('qRepeater', __vue_component__$a);
    Vue.component('qImage', __vue_component__$b);
    Vue.component('qCheckBox', __vue_component__$c);
    Vue.component('qRadioBox', __vue_component__$e);
    Vue.component('qRadioBox2', __vue_component__$e);
    Vue.component('qRadioGroup', __vue_component__$f);
    Vue.component('qCheckBoxGroup', __vue_component__$d);
    Vue.component('qToggleButton', __vue_component__$g);
    Vue.component('qSwitch', __vue_component__$h);
    Vue.component('qDropDown', __vue_component__$j);
    Vue.component('qMobileDropDown', __vue_component__$j);
    Vue.component('qStepper', __vue_component__$l);
    Vue.component('qHSlider', __vue_component__$m);
    Vue.component('qDate', __vue_component__$n);
    Vue.component('qDateDropDown', __vue_component__$o);
    Vue.component('qSegmentButton', __vue_component__$p);
    Vue.component('qRating', __vue_component__$q);
    Vue.component('qIconToggle', __vue_component__$r);
    Vue.component('qLabeledIconToggle', __vue_component__$r);
    Vue.component('qTypeAheadTextBox', __vue_component__$s);
    Vue.component('qTable', __vue_component__$t);
    Vue.component('qPaging', __vue_component__$u);
    Vue.component('qBarChart', __vue_component__$v);
    Vue.component('qPieChart', __vue_component__$v);
    Vue.component('qMultiRingChart', __vue_component__$v);
    Vue.component('qRingChart', __vue_component__$v);
    Vue.component('qVector', __vue_component__$w);
    Vue.component('qTimeline', __vue_component__$x);
    Vue.component('qUpload', __vue_component__$y);
    Vue.component('qCamera', __vue_component__$z);
    Vue.component('qChildrenToggle', __vue_component__$B);
    Vue.component('qUploadPreview', __vue_component__$A);
    Vue.component('qSpinner', __vue_component__$C);
    Vue.component('qDynamicContainer', __vue_component__$D);
    Vue.component('qRichText', __vue_component__$E);
  }
};
function createFigmaService(key) {
  return new FigmaService(key);
}
function createModelTransformer(app) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var selected = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return new ModelTransformer(app, config, selected);
}
function createCSSOptimizer() {
  return new CSSOptimizer();
}
function createCSSFactory() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var imagePrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return new CSSFactory(config, imagePrefix);
}
function createCSSWriter(css) {
  var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
  return new CSSWriter$1(css, id);
}
function setLogLevel(level) {
  Logger$1.setLogLevel(level);
}
async function createFigmaDesignlets(figmaFile, figmaAcessKey, config) {
  return FigmaDesignSystem$1.register(figmaFile, figmaAcessKey, config);
}
async function createFigmaDesignSystem(figmaFile, figmaAcessKey, config) {
  return FigmaDesignSystem$1.register(figmaFile, figmaAcessKey, config);
}
async function createQUXDesignlets(app, config) {
  return QUXDesignSystem$1.register(app, config);
}
async function createQUXDesignSystem(app, config) {
  return QUXDesignSystem$1.register(app, config);
}
function getDesignSystem() {
  return QUXDesignSystem$1;
}

exports.createCSSFactory = createCSSFactory;
exports.createCSSOptimizer = createCSSOptimizer;
exports.createCSSWriter = createCSSWriter;
exports.createFigmaDesignSystem = createFigmaDesignSystem;
exports.createFigmaDesignlets = createFigmaDesignlets;
exports.createFigmaService = createFigmaService;
exports.createModelTransformer = createModelTransformer;
exports.createQUXDesignSystem = createQUXDesignSystem;
exports.createQUXDesignlets = createQUXDesignlets;
exports.default = index$1;
exports.getDesignSystem = getDesignSystem;
exports.setLogLevel = setLogLevel;
